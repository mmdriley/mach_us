    
    
    
==========================================================================
   ***** US Version U2  (dpj) *****
    
    
Here is the miracle Doug was talking about :-)

The procedures for management of the US source tree are now
operational. Give it a try, and we'll see how we can improve them if
needed.


How things work:
================

/afs/cs/project/mach/us/rcs is a complete tree with RCS archives for
all active files. Individual developers work on personal branches in
this RCS archive, while the trunk holds the common working system. A
standard "merge procedure" is defined to carry things from a personal
branch onto the trunk. Every version of the system produced after a
"merge" operation is given a unique number of the form "U1", "U2",
etc. The archive for the file ".BCSset-TRUNK" keeps track of these
versions and of the files involved in each merge.

/afs/cs/project/mach/us/src and /afs/cs/project/mach/us/obj/@sys
contain several trees with checked-out sources and objects for the
entire system. These trees are:

	- latest: the latest version of the working system,
corresponding to the end of the trunk of the RCS archive. The file
"conf/version.edit" contains the current version number.  This tree is
always consistent, but its contents may change every time someone
merges new changes. The source tree is always fully populated; the
object tree is normally empty. At various times, a background job
might be used to build the objects and executables for that tree. If
there are objects in an object tree, they are consistent with the
sources currently in the tree.

	- U1, U2, ..., Un: copies of the system frozen at various
points in time. These trees are always consistent, and all objects and
executables in them are supposed to be working. Once-created, these
trees should be considered read-only, so that everyone can always rely
on them. These trees are optionally created at the last stage of the
merge procedure, but this is not automatic, because the copy takes a
long time, and the tree itself takes a lot of space. As a result, Ux
will not exist for all x, but only for those versions that someone
finds useful.  Anybody using such a tree should enter his/her userid
in the file named REFERENCES at the base of that source tree. A Ux
tree with no entries in the REFERENCES file may be deleted at any time
to free disk space.

 	- merge: a fully populated source and object tree used
internally by the merge procedure. Nobody should use that tree if they
are not in the process of merging changes, and holding the merge lock.
The file /afs/cs/project/mach/us/src/merge/.BCSlock is the lock
indicating that someone is in the process of merging.



Each developer works in his/her personal tree outside of the common
mach/us area, and "shadows" from one of the common trees, i.e. any
source file not found in the developer's tree will be taken from the
common tree.  There are three ways to work with this:
	- shadow from the "latest" tree: this always provides an
up-to-date copy of everything, but files may have to be recompiled at
random times when someone merges and makes changes in that "latest"
tree.
	- shadow from one of the Ux trees: everything is guaranteed
not to change for as long as needed, but the developer will have to
explicitly change his/her shadowing target to pick-up changes made by
other developers.
	- shadow from the "latest" tree, but make a local checked-out
copy of every file in "latest" at some point in time. This guarantees
stability, but it uses disk space, and the task of updating the local
copy of all the files may be slow.

There is no automatic shadowing of object files and executables.
Developers are free to manually copy object files from the common area
to populate their local object tree (instead of recompiling), and to
set their paths to use executables and libraries directly from one of
the common object trees. These executables and libraries are found in
the "release" subdirectory of the object tree.



The merge procedure operates as follows:
	- obtain the lock in the merge tree.
	- generate the new version number, Un+1.
	- merge the development branch with the trunk, and leave the
checked-out files in the merge tree.
	- build and test in the merge tree
	- modify files in the merge tree until everything works.
	- check-in all modified files from the merge tree onto the
trunk.
	- copy the updated source files into the latest tree, and
remove all the objects from the latest tree, since they no longer
correspond to the sources.
	- send mail to all developers advising them of the changes in
the "latest" tree.
	- optionally clone the merge tree to create a Un+1 tree.
	- release the lock in the merge tree, update the .BCSset-TRUNK
archive to keep track of this merge.

To prevent inconsistencies, the "latest" source tree is temporarily
renamed to "latest.update" while it is being updated, making it
effectively unavailable to people who shadow against it. This update
should however always be of short duration.

To speed-up the merge process, we do not build snapshots of each new
system version. We can use the merge date from .BCSset-TRUNK to
re-create any given version. we may not be able to get away with this
forever, though.

Also to speed-up the merge, we do not require that a person doing a
merge test and build in "latest" for all architectures. A single build
for one machine in "merge" is enough. If it turns out that the stuff
left in "latest" does not work for some architecture, whoever did the
last merge will have to fix at once. 


How to do things:
=================

Before starting anything:
- -------------------------

Fix your environment to have:
	setenv BCSRELEASE alpha
	setenv PROJECTPATH "~/lib/project:/afs/cs/project/mach/lib/project"
	setpath -ib /usr/misc /afs/cs/@sys/alpha/usr/misc/.rcs
	setpath -ib /usr/misc /afs/cs/@sys/alpha/usr/misc/.sdm

Note that cs.misc.rcs must come before cs.misc.sdm on all paths.


To start a new personal work area:
- ----------------------------------

Create a project description file in ~/lib/project. Use
/afs/cs/project/mach/lib/project/us.template as an example. Specify in
that file whether you want to shadow from "latest", or from "Ux" for
some value of x.

Make this the default project, either by placing a link named
"default" in ~/lib/project, or by setting the PROJECT environment
variable to the name of the project file (file name inside of the
directory, not full path name).

Run the command "project" to verify that you are getting the right
project description.

Create the directory at the base of the local work area.

Run /afs/cs/project/mach/us/src/latest/shadow_us.csh to create all the
subdirectories in the work area, and to set-up all the right symlinks.
This result in a work area with no checked-out files, ready to be used.


To work on some files:
- ----------------------

Run "workon -branch <branch-name>", where <branch-name> is the name of
an RCS branch on which you want to place your changes. This creates a
sub-shell with all the right environment variables. Always do
everything from inside that sub-shell.

In this shell, use "bci" and "bco" to check files in and out of RCS,
and make all the changes needed on the working files.

All the files being worked on are always left checked-out in the work
area.

To build any component of the system, run "build" in the appropriate
source directory. All command-line arguments are the same as for
"make". The difference is that "build" knows about shadowing source files.


To merge a set of changes back into the common sources:
- -------------------------------------------------------

The "umerge" script (source in utils/umerge.csh, installed as
release/bin/umerge) automates all the operations described in the
section on the merge procedure. 

The first time the script is run, if the user does not hold the lock
on the merge area, this lock is acquired. Whenever the script is run
after that, it just checks that the user already holds the lock, and
proceeds normally. Multiple runs of the umerge script while the user
is already holding the lock are considered part of a single "merge
operation". The lock is released only when the user indicates that
he/she is ready to terminate the current merge operation.

To merge a set of files, just run umerge with all the names of the
files to merge as arguments. The files will be merged with the trunk,
the checked-out copies will be left in the common "merge" tree, and
the script will exit to let the user build and test the new system.
The merge area is left locked when the script exits in that way.

The umerge script can be run many times with different file names as
arguments, and it will merge all those files and build a list of all
the files involved with this merge operation.

The system containing the new merged files should be built and tested
in-place in the "merge" tree. The easiest way to do that is to operate
inside a sub-shell created with the command
	"workon -project us.merge -branch TRUNK". 

Within that sub-shell, a "build" command will automatically operate
with sources and objects inside the "merge" tree. The user can freely
edit writable source files in the "merge" tree, and use "umerge" to
merge more files, until everything works. Note that currently, the
targets for the build command must be specified as absolute paths from
the root of the source tree, i.e. "build /./install" instead of "build
install", or "build /lib/us/install" instead of "cd lib/us ; build
install".

Once the system works and the "merge" tree contains the exact set of
sources that the user wants to leave as the result of the merge
operation , run the umerge script without arguments. The script will
prompt to check-in all the modified files into the trunk, to rebuild
the system again, and to send mail to all the developers to report the
completion of the merge.  At any time, this script can still be
interrupted (or it can exit because of some user response), to merge
more files and make more modifications in the "merge" tree. The umerge
script can be run as often as needed, and will always pick-up where it
left off or redo whatever is needed. The whole merge operation is
completed only when the umerge script, invoked with no arguments, is
allowed to run to completion. At this time, the "latest" tree is
updated, and the lock on the "merge" tree is released.

One of the latest steps in the operation of the umerge script is to
ask the user if he/she wants to make a "release". A release means to
copy the entire set of sources into a new "Un" tree. Don't do this
unless you need it, and you have a lot of time to wait for it to
complete.

The umerge script tries real hard to figure-out what to do on its
own. Whenever something goes wrong, the script just exits. The user
should simply correct the problem, and run the script again.
The user can also perform many of the phases of the merge procedure
manually if needed, and rely on the umerge script to do the rest.
The only important thing is to always start and finish a merge
operation with a run of the umerge script.


After a successful merge:
- -------------------------

Remove all the old files from your personal work area, to get the
merged versions from the common area instead.

Use a new branch name for further work on the system.



Current state:
==============

I have performed the first two merge operations, generating versions U1
and U2.

Version U1:
- -----------

U1 is the stable system that we had before we moved to the new source
organization. I have generated it by doing a merge from the initial
tree, without specifying any new files to be merged. I have made a
release, creating source and object trees named "U1", that people can
shadow against.

Version U2:
- -----------

This was generated by merging the branch "dpj_6" into U1.

I have not made a full release, but the "latest" area now contains U2.


Changes are:

invoke_super() now works correctly, with the semantics of "invoke the
method in the super-class of the class containing the method that
contains this call to invoke_super()".

I have defined invoke_super_with_base(), with the obvious semantics.

For technical reasons, the first argument of invoke_super() and
invoke_super_with_base() MUST be "Super" (instead of "Self" or
"Base"). I have modified all uses of invoke_super() accordingly, in
lib/us.

I have replaced many invocations on "Delegate" in lib/us with calls to
invoke_super().

I have modified the authentication server to get the authentication
database from /afs/cs.cmu.edu/project/mach/us/common/asdatabase. It is
now easy to change that path with a variable in the Makefile.


    
    
    
==========================================================================
   ***** US Version U3  (mbj) *****
    
    
Bug fixes:
- --- -----

Cthreads now reinits its state after a fork in the child to correctly describe
the reality that the child is single threaded.

The umerge umask is now 022.

Special notes:
- ------- -----

Being released as U3.  Objects only built for the RT thus far.


    
    
    
==========================================================================
   ***** US Version U4  (dorr) *****
    
    
New features:
- --- --------

Exec now takes place in the user process.  This is a lot more efficient
(and correct)
for the typical case.  tm_init supercedes tm_test.  tm_debug is temporarily
broken.  I have a pseudo-workaround.  See me if you're curious.

Bug fixes:
- --- -----

We fixed a bug in the mach object caching that would cause valid operations 
to be refused.  The symptom was that exec's would fail for mysterious
reasons after a certain period of time.

Organizational changes:
- -------------- -------

The exec code has been taken out of the task master.  Eventually some form
of it will be put back in for set-uid programs, but it will probably
be significantly different in nature.  Hopefully, we'll have object
passivation before then.

The load library has been reorganized some to better support operating
on your own proc_image.  Specifically, you can do a pi_setup_stack() on
yourself and if you don't violate the assumption that you're not operating
on the stack you're changing.

tm_init() loads the emulation library and executes some code in it
(emul_initialize())
before exec'ing the program you're trying to start (usually a shell). 
This means that
all of the calls in the emulation library of the form "if (!emul_init)
emul_initialize()".
can go.  I got rid of them in the emul_procs module.  I'll do the rest
in my next round of
changes.

I got rid of a number of unused loader calls from the .defs file (loader_init,
tm_emul_init, etc.).

Special notes:
- ------- -----

Soon I'll have tm_init set up to log you in and set up your environment right.

Rich and I are going to have to verify it, but if all of the reference
counting stuff is working right, we should be able to get rid of tm_load (which
hasn't worked right for a long time).  If you kill the tm_init that has an
emulation library mapped in, you should be able to use fsadmin to replace
the emulation library, do a fresh tm_init, and get the new library.


    
    
    
==========================================================================
   ***** US Version U4 -- bad number  (mbj) *****
    
    
New features:
- --- --------

Signals are now delivered as messages to a thread in the emulation library.
For now, htg_kill is still being done locally.

Implemented new exec_object_function_pointer call in the load library for
looking up routine addresses (such as "extern mach_error_t emul_initialize()").

Tried to do wait/wait3 only to discover that htg_unix_syscall isn't setting
up the proper register save values for wait3.  This will require kernel
changes to fix.  (The same holds true for some other system calls too.)
Wrote htg_unix_syscall_with_flag.s for each architecture to allow explicitly
setting status bits before syscalls, etc.

Build version string for emulation library, and have emul_initialize display
it.  (Hopefully cut down on the number of times we forget to use the right
emul.lib!)

Allow setting load_debug from tm_init and convert_to_macho.  Corrected usage
messages for both.

No longer pass debug switch to tty_server from startup.

[IBMRT]	 Wrote lib/emul/ibmrt/htg_unix_syscall_with_flag.s

[SUN3]	 Wrote lib/emul/sun/htg_unix_syscall_with_flag.s

[VAX]	 Wrote lib/emul/vax/htg_unix_syscall_with_flag.s

Bug fixes:
- --- -----

Use exec_object_function_pointer for determining addresses of emulation
library routines to call in tm_init.

Fixed several places where entry_special_wait and entry_special_brk were not
correctly implemented.

Fixed protection logic in mo_unlock (the mysterious tsh bug).  Fix courtesy of
Rich Sanzi.

Don't skip lines in the diag server output.

Add more diagnostic printout to om_print.

Build local asdatabase so we're not dependent upon afs to be able to run.
Allow passing asdatabase filename on cmd line to cas.

Don't modify paths for each level of recursive make in Makeconf.  (This
results in the warnings:
	Warning: LPATH changed after being used
	Warning: PATH changed after being used
Ignore them.  They're ok.

[IBMRT]	Correct default stack size so we'll work with cthreads.

[VAX]	Move emulation library so there's room to allocate thread stacks.
	Correct default stack size so we'll work with cthreads.


    
    
    
==========================================================================
   ***** US Version U6  (dorr) *****
    
    
New features:
--- --------

98% of code required to setreuid.  watch this space for an
end to the saga.


Bug fixes:
--- -----

we now pay attention to file permissions.  oops.

[IBMRT]	  sigcode setup no longer deallocates your arg block.  oops.


Organizational changes:
-------------- -------

brand, spanking new mach/* include files.  the horror... the  
horror...

Special notes:
------- -----

we're no longer using a special version of mig.  I switched back to
the mainline mig.  I should probably defunct the whole damn
directory.


    
    
    
==========================================================================
   ***** US Version U7  (dorr) *****
    
    
New features:
--- --------

setreuid woiks.

Bug fixes:
--- -----

fixed a race condition in exec that would provide random
mysterious problems, mostly centering around cthreads interactions.


Organizational changes:
-------------- -------

Special notes:
------- -----

I think you guys are swell.


    
    
    
==========================================================================
   ***** US Version U7 -- bad number  (dpj) *****
    
    
New features:
--- --------

Prefix table:

There is now a full-fledged prefix table for pathname resolution, in  
the
./lib/us/std_name object class. It handles all complex pathnames with  
"."
and ".." components, and with a "/" at the end of the pathname  
(implies
following symlinks and verifying that the end of the path designates  
a
directory).

The prefix table caches mount points and symbolic links as it  
encounters
them, and that cache is inherited across forks. Note that currently,  
there
is no mechanism to invalidate the cache (other than explicit calls to
ns_invalidate_prefix() and ns_flush_cache_prefixes()); if you change  
a mount
point or symlink that you have cached, you lose. 


The one feature that the current prefix table does not handle is  
aliasing:
it is not possible to establish a prefix that overrides or shadows a  
subtree
under another system prefix. All system and user prefixes must have  
disjoint
canonical paths, or be the natural extensions of shorter prefixes  
beginning
with the same canonical path. I will need to make yet another  
complete
re-implementation to relax that restriction, as soon as I get enough
experience with the current scheme.

The current version prints lots of annoying debugging output. I'll  
disable
that as soon as I get the debugging macros together.


getwd():

With all the changes made in various systems, getwd() now works  
everywhere.


Sun RPC:

The tree rooted at ./pkg/sunrpc contains a complete set of sources  
for
Sun's RPC package version 3.9, including rpcgen, librpclib, portmap,  
etc. It
is similar to what is currently used by Facilities to compile the
cs.misc.nfs collection, but this version can be freely distributed,  
as long
as it is made a part of the US system as a whole and not distributed  
alone.
See the comment at the beginning of every file for details.


NFS:

There is now a NFS "server" in ./server/nfs. This program is a server  
from
the point of view of the emulation library that calls it, but it is  
really a
client from the point of view of the NFS protocol. It translates our
standard ns_* and io_* operations into the appropriate NFS  
operations,
invoked on a UDP socket through the Sun RPC library. It is based on  
the fs_*
classes, so it uses mapped-file I/O for access to all NFS files, with  
a
write-back of dirty pages after about 60 seconds. There is no name  
lookup
cache at this time, and things will break if several people with  
different
file permissions open the same file concurrently.

The server can be invoked without arguments, or with one argument  
specifying
a name under which it checks itself into the netmsgserver, just like  
the
other servers. The default name is "nfs_server". The root directory  
exported
by the NFS server is a special directory that holds all the mount  
points for
all the NFS file systems accessed through that server. The special  
method
"nfs_mount()" invoked against that directory causes a new NFS file  
system to
be mounted, under a name specified by the caller. The NFS server  
starts up
with no mounted file systems.

The fsadmin program has a new command to invoke nfs_mount():  
nfsmount. A
typical sequence in fsadmin to start using NFS is:

	mount /nfs nfs_server
	nfsmount dpj /usr1 /nfs/dpj.usr1

It is a shame that the name of a NFS mount point in the server's root
directory cannot contain slashes, or I would have called them
<hostname>:<filesystem> or some such and not given the caller the  
option to
choose the name. Too bad...

If your machine does not accept random NFS mount requests, you must  
put your
own machine's name, fully qualified and IN UPPER CASE in the /etc/ 
exports
file.

I have tried exec()'ing things out of the NFS server, and that works.  
I'll
see about changing STARTUP.fsadmin to operate out of a shared copy of  
all
executables in AFS instead of a local UFS partition for the next  
release.


gdb:

There is one new command to gdb: set-source. This allows the user to  
specify
the source file name associated with a given function, when hc's  
bogosity
has caused that file name to be truncated in the symbol table. The  
syntax is

	set-source <function-name> <source-file-name>

The source file name is evaluated relative to the source search path
currently in effect (see "info dir"). The function name is used  
simply to
designate the target object module; one set-source command affects  
all the
functions in the same object file.

set-source can be called several times without problems. It is even  
possible
to set the source file to a file that has nothing to do with the  
function in
question. The results are amusing.


Mount points and symbolic links:

In order to make getwd() work, and to avoid a few annoying  
inconsistencies,
I have eliminated the notion of a generic forwarding point from the  
name
service interface. There are now two distinct object types:

NST_SYMLINK is a symbolic link. It contains a path and no forwarding
object. It can be relative or absolute; in the former case,  
ns_resolve()
will return a CAT for the directory containing the symlink, but that  
CAT
will never be part of the symlink object itself. ns_resolve() will  
follow a
symlink at the end of a path if and only if the NSF_FOLLOW flag is  
set.

NST_MOUNTPT is a pure mount point, containing only a forwarding  
object and
no path. ns_resolve() will follow a mount point at the end of a path  
if
and only if the NSF_MOUNT flag is set. Note that NSF_FOLLOW does not  
imply
NSF_MOUNT, or vice-versa. UNIX applications, and the UNIX emulation  
library,
always have the NSF_MOUNT flag set, since UNIX does not support the  
notion
of a mount point as a first-class object.

For expediency, I have not yet created new methods to deal  
specifically with
symlinks and mount points. ns_insert_forwarding_entry() will create  
either
one or the other depending on its arguments. It is an error to  
specify both
a forwarding path and a forwarding object. Similarly,
ns_read_forwarding_entry() will return the goods for either kind of  
object.
This ugliness will be eliminated soon.


Servers initialization:

Because I needed a server (NFS) that contains both a standard-type  
directory
(the root) and several independent fs-type trees, I have re-worked  
the code
used to initialize various servers. There are now a couple of  
standard
initialization routines in ./lib/us/utils.c, and several special- 
purpose
routines in ./lib/us/fs_global.c, ./lib/us/dir_init.c and
./lib/us/tty_init.c.

Instead of letting each module allocate its own authenticator and  
access
table, ./lib/us/utils.c now exports two global variables named
us_global_access_table and us_global_authenticator, along with a  
couple of
routines to initialize them to default values if needed.

The main program in each server now explicitly sets the server's  
manager ID,
and passes it down to the module implementing that server's name  
space. In a
perfect world, manager ID's will somehow be allocated automatically,  
and yet
remain unique. I am playing with the idea of using a (IP address,  
taskid)
pair or something like that.For now, I have wired-in the following  
values:

	nameserver:	{ 0, 0x01000001 }
	nfs:		{ 0, 0x02000001 } for the root, and
			{ 0, 0x02000002 }, { 0, 0x02000003 }, etc.  
for each
			successive filesystem mounted.
	ufs:		{ 0, 0x03000001 }
	tty:		{ 0, 0x04000001 }

The first person to get that confused and break getwd() as a result  
buys
lunch.


Makefiles:

I have defined a variable named STD_CFLAGS in the global Makeconf,  
and set
CFLAGS to be initialized with it. I have moved the special switches  
that
used to be in CC into STD_CFLAGS, and removed all dangerous  
assignments to
CFLAGS in lower-level Makefiles. This should make it possible to  
override CC
or CFLAGS on the command line at the top level without breaking lots  
of
lower-level compilations.


UNIX information conversion:

The uxprot object in the emulation library that converts standard  
access
control lists into UNIX (mode,uid,gid) now does a "best-effort" at
conversion when there is no perfect translation. It reports too many  
access
rights in the mode rather than too few, and shows "-1" for the uid  
and gid
if they do not make sense.

There is also a standard uxstat object to translate standard  
attributes
information into UNIX stat structures. It maps the 64-bit manager ID  
into a
16-bit UNIX device number; that device number is only meaningful  
within a
single process.


Dir class and the root name server:

I have removed the use of the active table with dir objects in the  
root name
server. It was causing all directories to go away as soon as no one  
looked
at them. Each directory now holds a real mach_object_reference for  
each of
its children.

I have completed a first pass at getting the link_count and the  
parent
directory reported in the attributes structure right. I'm not sure we  
want
that though. Maybe we want to declare that our standard, non-UNIX
directories do not support a link count and a parent, period.

I have made dir_add_entry() into a real method, named
ns_insert_entry_internal(), so that it can be called by derived  
classes. I
have implemented dir_ns_insert_entry(), with the restriction that the  
object
linked to must have the same manager ID as the containing directory.

The "-i" flag to the name server is gone. There is now a "-d" flag,  
to cause
the nameserver to stop in a local debugging mode (TEST_US) before  
getting to
work.


Bug fixes:
--- -----

fs_dir_ns_list_entries() now reports NST_UNSPECIFIED for all entries  
instead
of showing zero for the entry type..

Fixed emul_readlink() to not follow symlinks, to return the length of  
the
link, and to correctly zero-terminate it. "ls -lL" now works.

Fixed a reference counting bug with mach_object_t's stored
in emul_object_t's. This could have caused various file descriptors  
to
mysteriously disappear in the emulation library.

Made sure that there is always a current working directory upon  
startup. It
is "/" initially.

Upgraded a number of libmach files to match the new release by mrt.
Picked-up the fixes for fence-post errors in mach_error.

Added several methods to the fs_cred class, to make it a real  
superset of
ns_cred.

Fixed a reference counting bug in agent_ns_get_agency_ptr().

Fixed to pass credentials to fss_readlink() in fs_dir.

Changed fs_dir_ns_list_entries() to get the offset for the next  
directory
block from the uio_offset field, instead of always adding DIRBLKSIZE.
This is needed for NFS, where the offset is not an offset at all, but
an opaque cookie. Yuk.

Update the uio_offset at the end of fss_readdir(), to follow
the protocol required for NFS.

Fixed uxdir_readdir() to zero-terminate all strings.

Fixed MASTERBASE in umerge.csh to reflect new the mach-2 volume.


Organizational changes:
-------------- -------

There is a whole new tree, ./pkg/sunrpc, and new release directories
./include/sunrpc and ./include/rpcsvc (see above).

./pkg/sunrpc and ./server/nfs get built with everything else when  
calling
"build all" at the root of the US tree.

The following files are obsolete and have been defuncted:
	lib/us/forward.c	- not supported
	lib/us/forward_ifc.h	-  "     "
	lib/us/std_acc_tab.c	- merged into lib/us/utils.c
	lib/us/uxprot.c		- moved to lib/ux
	lib/us/uxprot_ifc.h	-   "    "   "
	server/nfs/mount.x	- old stuff from the toy NFS server
	server/nfs/mount_xdr.c	-  "    "     "   "   "   "    "
	server/nfs/nfs_prot_clnt.c -    "     "   "   "   "    "
	server/nfs/ns.defs	-  "    "     "   "   "   "    "
	server/nfs/ns_types.h	-  "    "     "   "   "   "    "
	server/nfs/mount.h	-  "    "     "   "   "   "    "
	server/nfs/mount_clnt.c	-  "    "     "   "   "   "    "
	server/nfs/nfs_client.c	-  "    "     "   "   "   "    "
	server/nfs/nfs_prot.h	-  "    "     "   "   "   "    "
	server/nfs/nfs_prot_xdr.c -"    "     "   "   "   "    "
	server/nfs/ns_types.defs  -"    "     "   "   "   "    "


Special notes:
------- -----

Coming attractions:

	- reorganization of fs_file/fs_fio to make things simpler and
	allow multiple users with different credentials to share an
	open file

	- standardized active_table with adequate MachObjects support

	- self-initializing method argument strings in MachObjects
	+ TIS changes for security.

	- uniform error codes across all modules.

	- standard debugging macros, allowing debug output to be  
turned on
	and off at will.

	- pipe server + streams

	- and much, much more ...


    
    
    
==========================================================================
   ***** US Version U8  (dpj) *****
    
    
Special notes:
------- -----

The previous release done by me was incorrectly numbered U7 instead  
of U8,
because of a mistake I made when integrating the pkg/sunrpc stuff.

The present release changes no files from the previous release, and  
is done
only to get the version numbers back in sync, and to get a correct  
record in
the archive.

The moral is: If you think you are more clever than the umerge script  
and
can bypass it, you're wrong.


    
    
    
==========================================================================
   ***** US Version U9  (dpj) *****
    
    
New features:
--- --------

Diagnostics system:

There are now a few standardized macros to replace the plethora of
diag_printf(), diag_format(), printf(), diag_message(), etc used until now
in various modules. The new macros are intended to be easily re-implemented
and easily enabled/disabled with conditional compilation (-D_DEBUG_). They
provide run-time control of the level of diagnostics output emitted by any
server.  There is a global object named "Diag", of class "diag",  that
concentrates all output from one task and forwards it to the diagnostic
server.

Specifically, all output should be done using one of the following 6 macros:
	CRITICAL((object,format_string,arg1,arg2,...))
	ERROR((object,format_string,arg1,arg2,...))
	INFO((object,format_string,arg1,arg2,...))
	DEBUG0(condition,(object,format_string,arg1,arg2,...))
	DEBUG1(condition,(object,format_string,arg1,arg2,...))
	DEBUG2(condition,(object,format_string,arg1,arg2,...))

Each macro is associated with a different debug level, so that the verbosity
of the output can be easily controlled. CRITICAL is at level -3, ERROR at
-2, INFO at -1, DEBUG0 at 0, DEBUG1 at 1 and DEBUG2 at 2. The global
variable "us_debug_level" controls the global debug level: a message is
produced if it is at a level stricly smaller than the current debug level.
The debug level comparison is performed in-line in each macro, so as to
minimize the overhead for inactive debugging statement. By default, the
debug level is 0, so that only CRITICAL, ERROR and INFO messages are
produced.

CRITICAL() should be used for errors from which the server cannot recover
(i.e panics); it generates a message both on the diagnostic server output
and on stderr.  All other macros generate messages only on the diagnostic
server output.  ERROR() should be used for error conditions that are not
fatal for the whole server. INFO() should be used for informational messages
about the operation of the server, that are interesting even when the server
is not being debugged. DEBUG0() should be used for major (coarse-grained)
debugging messages; its use should be limited to allow a server to operate
with just enough debugging output to figure out what it is doing. DEBUG1()
should be used for all fine-grained debugging messages, to be enabled only
when all operations of the server are to be examined in detail. DEBUG2() is
reserved for extremely verbose output, and will almost never be enabled;
currently, it is used to trace all invocations against all objects in a
server.

In each macro, the "object" argument is the address of a MachObject to be
associated with the message. It can be any specific object derived from the
"base" class, or the special global object "Diag", to be used for messages
not associated with any specific object or in servers that do not use
objects. The "format_string" and following arguments are identical to the
arguments to printf(); note the double parentheses used to allow a variable
number of arguments. The "condition" argument for the debugging macros can
be any boolean expression, which will be evaluated at run-time in-line
within the macro; the message is produced only if that condition is true, or
if the global variable "us_debug_force" is true, in which case the condition
is ignored. The intention is to have each interesting module or sub-module
define it own debugging flag, but the implementors are free to do whatever
they want in this respect.

All the diagnostics definitions are contained in the file "debug.h". The
simplest way to get everything in the right order is to include "base.h".
The entire diagnostics system is started by a call to "diag_startup()", with
a single string argument representing a name to be used to identify the
current task within the diagnostic server. diag_startup() must be called
after mach_object_init() has been called. After that, the us_debug_level
variable, as well as any module-specific debugging flag, can be patched with
gdb. Most of the servers and programs (fsadmin, tm_init, task_master, ufs,
nfs, tty_server, nameserver) have a "-d" switch to specify a debug level
other than 0 (the default) on startup. Usage:
	"<server-name> -d<debug-level> <other-arguments>"
When the debug level is set to 0, the system is actually usable in real time.

All old diag_* functions are now obsolete and should not be used when
writing new code. For expendiency, I have written front-end routines so that
many old diag_* functions still work, allowing old servers to be relinked.
The functions for which there is no front-end have been removed from the
libraries and will cause linking errors, with the exception of
diag_initialize(). That function is now defined in the diag class, but with
different arguments than in the old code; be very careful not to call it by
accident.

There are also macros to replace printf() and mach_error(), so that it is
possible to compile code written for traditional output streams. The
"-DUsePrintf" conditional compilation switch disables those replacements.
The old MACH_ERROR macro is no longer supported.
The old libdebug.a has been completely removed.

Finally, the MachObject library produces debugging messages at level 1 for
incoming and outgoing remote invocations, and at level 2 for all
invocations.  Those messages are controlled by the global us_debug_level,
and by the variable "mach_object_debug_level".

For additional (but not critical) flexibility, the name associated with each
object, as well as a per-object debug level can be set with the
set_diag_name() and set_diag_level() methods, handled by the "base" class.
A message is produced by an object if both the global debug level and the
local debug level of that object are greater than the message's level.  At
startup, the local debug level for each object is set to the maximum value,
allowing everything to go through.  Individual objects may be "disabled" by
resetting their local debug level.  The definitions for those methods have
been moved from base_methods.h to diag_methods.h for consistency.  Those
same methods can also be invoked against the global Diag object; in that
case, they affect the global debug level (us_debug_level), and the name by
which the current task is designated within the diagnostic server.


Error codes:

In an effort to standardize the error codes returned by different modules
for similar situations, many new errors have been defined in us_error.h
(US_*). When appropriate, old error definitions have been removed from the
server-specific files, and replaced with the correct US_* code. Special
#define statements have been left behind to allow the code to continue to
compile; they are clearly set apart in the error definitions files, and they
should not be used when writing new code.

To clean things up some more, and to prepare for a possible reorganization
of the mach_error_t technology, all error codes specific to the US system
have been moved to the err_server group. The err_us group is now emtpy.


Startup:

The startup script now starts a NFS server, and mounts honeydew:/afs onto
/nfs/honeydew.afs, with a symlink named /afs pointing to it. If you put
/afs/cs/project/mach-2/obj/@sys/<release-name>/release on your paths, you
can start the system up without having anything in your UFS file system.

The startup script also has a "-d<debug-level>" switch to set the debug
level for all the servers being started.


tm_init:

The "-D<exec-debug-level>" switch should be used instead of "-d" to specify
that exec's at a certain depth should be suspended to allow a debugger to be
attached to them.


Bug fixes:
--- -----

Updated a number of files to conform to the new diag and error codes schemes.

Fixed a comment delimiter in gdb/source.c that mysteriously got lost.

Fixed mach_object_init() to be callable multiple times.

Fixed the Makefile for lib/us to only include the debugggin modules in
libus_test.a, instead of making a complete subset of libus.a. This speeds-up
compilation and saves space. The proper way to link something with libus
test code is "-lus_test -lus".

Removed explicit setting of CFLAGS in pkg/sunrpc/*/Makefile.

Fixed diag server to output messages if their level is smaller than the
client's global debug level, and not the opposite.  Initialize the client's
debug level to Dbg_Level_Max, so that everything is output by default.

ufs/include/base.h: added include of mach_object.h, needed by the debug system.
This file should really be named differently, to avoid conflicts
with include/base.h.

ufs/mach_directory.c: renamed all hash-related variables and types to
"ufs_hash_*", to avoid conflicts with the things imported from hash.h.

Defined UsePrintf for fsadmin.c, so that there will be output on stderr.

Set the comment leader to NONE in skel.c, skel.h and TODO. We don't want to
have a history in those files.


Organizational changes:
-------------- -------

The following files are now obsolete and have been defuncted:
	include/base_methods.h
	include/np_error.h
	lib/debug/Makefile
	lib/debug/diag_print.c
	lib/debug/printf.c

lib/debug itself is no longer compiled, or used anywhere.


Special notes:
------- -----

Because the base.h, debug.h and base_ifc.h files have been modified, it will
probably be impossible to build anything when shadowing against the "latest"
AFS area, until the files in the shadow area have been merged up to this new
version.







    
    
    
==========================================================================
   ***** US Version U10  (dorr) *****
    
    
New features:
--- --------

the load library is dead.  long live the load library.

I extended the facilities of the dynamic loading object
in the machobject package to provide for loading relocated
files and replaced the load library functionality with this.

there's less hair in this version and it works faster (it takes about
8 seconds to tm_init a shell).  99% of the code required to do
cross-process exec is in, not tested.  work will have to be done if
one wishes to do a cross-machine exec.  I marked places where this is
a problem.  I'm no longer convinced it's a worthy goal (albeit still a
noble one).

I made the file table an object (ftab.c).  this is required for
encapsulation eventually needed for out-of-process exec done
for setuid programs.

I got rid of the chain of to-be-cloned objects in the emulation
library.  It's now just an array of pointers to objects.  Eventually,
there should be a clone object that will keep track of everyone
using ports, which can port_insert the ports en masse.

Bug fixes:
--- -----

fixed geteuid/getuid bug that was killing the c-shell.  fixed bug in the
way obreak was working, also improving its efficiency.

Organizational changes:
-------------- -------

switch to new style debugging where appropriate.  dyn_object* was moved
to the load library.  old load libary files have been made defunct.

Stupid notes:
------ -----

You guys crack me up.  Get out of here.






    
    
    
==========================================================================
   ***** US Version U11  (mbj) *****
    
    
New features:
--- --------

Converted system call code to use the BSD server emulator entry point scheme.
Now all system calls enter through a common routine which saves all registers,
and calls the (slightly) machine dependent C routine emul_syscall() in the new
machine dependent module emul_machdep.c.  This routine isolates knowledge of
the calling conventions used by each architecture (how arguments are passed in
and out, etc.) into one place.  Enough information is now saved and restored
to correctly emulate problem system calls such as sigreturn and wait3.

Currently I've disabled David's stack switching code, although I've left it in
under conditional compilation.  I still believe it may be substantially easier
to push signal frames when we're not pushing them onto the same stack we're
running on, but I've been voted down on this for the moment.  That, or we'll
have to allocate a hole to push them into before calling the emulator...

Significant new modules:

    lib/emul/$(machine)/emul_vector.s	Actual system call entry points
    lib/emul/$(machine)/emul_machdep.c	Common C syscall dispatcher
    lib/emul/syscall_table.[hc]		System call entry point table

Defunct modules:

    lib/emul/emul_entry.s		Old syscall entry points
    lib/emul/$(machine)/emul_entry.h	Machine code for syscall entry points
    

[ ./utils/umerge.csh ]
Send mail to everyone at once.

[ ./utils/log-recipients.list ]
Add jms, remove sanzi and gm0w.

[ ./lib/emul/syscall_common.c ]
Wrote "generic" routine to catch syscalls which are not yet emulated.


[VAX]	[ ./lib/load/vax/dyn_thread.c ]
	Created for the VAX.

[VAX]	[ ./lib/load/vax/dyn_relocate.c ]
	Created version for the VAX.

Bug fixes:
--- -----

The current mig code tries to initialize static structures to do type
comparisons with.  Unfortunately, hc doesn't compile them correctly, and the
existing mig code tests for hc with the "hc" symbol, which should become
"__HC__".  Until then we add -DUseStaticMsgType=0 to CFLAGS where mig code is
compiled.

Also, fixed several bugs which only appear with _DEBUG_ on.

[ ./lib/load/dyn_object.c ]
Don't choke on zero-sized regions.

[ ./lib/mach/mach_error.c ]
Fixed some fencepost errors in compatibility conversions.

[ ./server/tm/tm_procs.c ]
Correct type usage in a debug statement for choosy compilers.

[ ./lib/emul/emul_misc.c ]
Always display version at startup time.

Special notes:
------- -----

Once the emul_syscall() starts doing anything besides shuffling registers
around and dispatching to the emul_*() routines direct linking won't have
these things done at present.  A direct_syscall() dispatcher would have to be
written which does the things which emul_syscall() does, but which takes its
arguments in a rational basis, rather than as a pointer to a block of saved
registers.

I'd like to change our entry point sequence soon to exactly match that used by
the pure kernel, where the trap number, csr, and pc are all passed in, rather
than inferring the syscall number based on where we were called.  This should
make putting our emulator up on the pure kernel easier.

At the same time, I'd fix the htg_syscall implementation so wait/wait3 can be
used.  To avoid the bogus register conventions, I'd have it always do a wait3,
and make the wait/wait3 distinction only in the emulator.  For what it's
worth, that what Dave does in the BSD server already.  Comments?





    
    
    
==========================================================================
   ***** US Version U12  (dpj) *****
    
    
New features:
--- --------

1. MachObjects Improvements:

1.1. PublicLocal():

A new macro named "PublicLocal()" is now available to allow method
implementations in one class to directly access local variables in a
super-class. A variable "var1" in class "class1" is available to subclasses
of "class1" (with the syntax "PublicLocal(var1)") if the file "class1_ifc.h"
contains the following declaration:
    #define PublicLocal_var    InternalLocal(Self,class1,var1)

1.2. Constructors:

In many cases, a class instance is not useful until it has been explicitly
initialized with arguments provided by its creator. Furthermore, there may
more than one valid way to specify the initial values, e.g. a complex number
can be specified with a (real,imag) pair or with a (radius,theta) pair.  In
C++, this is achieved by defining a number "constructor" method with various
arguments; for MachObjects, it is hard to define an equivalent feature that
is generic enough. Instead, I have defined a set of coding conventions to
implement sufficient functionality, but without compiler (sic!) support.

A class "class1" that requires a constructor with arguments should not have
an "initialize()" method. If there is only one meaningful constructor, it
should be implemented with an instance method named "setup_class1()", having
all the appropriate arguments. If there are several constructors, they
should be given appropriate names, all beginning with "setup_class1_". The
code that instantiates an object must immediately invoke the appropriate
setup method on the new instance, right after calling new_object(). There is
no compiler or run-time check that this setup has been performed, but it
should be considered an error to use an object that has not been set-up.

When a super-class needs a constructor, its setup method should be invoked
from the setup method (or the initialize() method) of the derived class, and
so on recursively. A class should only invoke a setup method for its
immediate super-class. If the super-class has no setup method, but the
super-super-class has one, the super-class should have an initialize()
method that calls the setup method for the super-super-class.

Since setup methods are only called from a very few places, it is not
necessary to define an invocation macro for them in some common include
file. Instead, the macro definition may be placed in the "_ifc.h" file
itself. It is acceptable not to have a macro at all and to use invoke()
explicitly in the code.

Note that in the present scheme, all setup methods are "instance methods"
and not "class methods". This contradicts the intuition of an Objective-C
programmer, but it is simpler.

A number of classes in the system (but not all) have been updated to follow
this convention. This includes the MachRemoteObject() class, which used to
have its own style of constructors. New code should try to follow the same
conventions.

1.3. Shutdown Method:

To support the active_table technology (see below), the MachObjects
system supports a new distinguished method called "shutdown()", which
is handled like the "initialize()", "terminate()" and "default()"
methods. To reproduce the description in the new MachObjects
documentation:

Shutdown() is called (with no arguments other than "self") when the
reference count on an object reaches zero. If it returns TRUE, the
appropriate "terminate()" routines are called, and the object is
deallocated. If it causes the reference count to be incremented and
returns FALSE, the object is not deallocated and no "terminate()"
routines are called. If it returns FALSE, but the reference count
appears not to have been incremented, the "shutdown()" method is
called again, on the assumption that a race condition occurred.  It is
an error for this method to return TRUE and also increment the
reference count.  Note that if several classes in the
single-inheritance hierarchy implement the "shutdown()" method, only
the outermost one will be called.

At the moment that the "shutdown()" routine is called, the reference
count appears to be ``1'', to prevent multiple recursive invocations
if new references are quickly acquired and released while that routine
is active. That ``last reference'' is removed just after the routine
exits (regardless of its return value).

1.4. Class Templates:

To facilitate the use of PublicLocal() and setup methods, there are two
template files named "utils/skelobj.c" and "utils/skelobj_ifc.h". Those
templates can be used as a starting point for every new class definition.

Don't forget to reset the in-file history log when using those templates.

1.5. TIS Changes:

All the available changes from TIS (Trusted Information Systems) have been
integrated into the MachObjects package. Except for generic bug fixes, all
those changes are under "#ifdef TRUSTED" conditionals, and turned off.

Those changes are mainly concerned with handling the extra UID and security
level info defined by the TIS IPC system for remote invocations, and with
special manipulation of port rights. They could in fact be compiled-in; most
of them are only applicable when a method arguments string contains a "t" or
"T" specification.

1.6. Remote Invocations:

The "setup_method_with_args()" macro, which was previously defined in each
methods file, is now defined in mach_object.h.

There are better error messages for incoming remote invocations with
insufficiently defined method argument strings (i.e. method unknown, or
method known, but no argument strings).

When a client-side MachRemoteObject gets an invocation where no argument
string is defined, it now rejects the invocation at once with
MACH_OBJECT_NO_SUCH_OPERATION. Previously, it was attempting a remote
invocation with the default argument string "rpc:" (no arguments).


2. Active Table and Active Objects:

In several parts of the system, we are maintaining a set of objects,
where each object is designated by a specific key:
	- fs_agency with a given fs_id
	- nfs_obj with a given NFS file handle
	- cat with a given object port
	- etc ...

In each of these cases, when we go looking for an object with a given
key, it is important not to create a new duplicate object instance if
an object with that key already exists, but to just return a new
reference to that object. This means that all the objects need to be
kept in some sort of table indexed by the key. But if that table must
hold a reference to each object, then no object will ever be
deallocated, even long after anybody has stopped caring about them.

There is now a general-purpose facility to deal with this problem.
The "active_table" class implements a table where objects can be
looked-up according to a generic key (type act_key_t), but it does not
itself hold a reference to the objects. All objects entered in the
active_table must derive from class "active_object", which defines a
"shutdown()" method that takes care of removing the object from the
active_table when the reference count reaches zero. The exact protocol
is rather complicated because of concerns with deadlocks and race
conditions, but it is entirely hidden inside those two classes, so
that no one should need to worry about it (unless it turns out to be
buggy :-).

For additional flexibility, all objects entered in the active table
are also placed on one of a number of queues.  A new object reference
can be obtained either by looking-up an object by its key, or by
scanning the contents of a given queue (this makes it easy to invoke a
specific method on all the objects in the active_table that satisfy
some condition).

The number of queues defined in the active_table is specified in its
setup method. Each queue is identified by a positive integer, starting
with 0. Each object entered in the table is in exactly one queue at
all times; by default, all objects start in queue 0
(ACT_QUEUE_DEFAULT).

A high-water-mark can be defined for each queue. When the insertion of
a new object on a queue causes the total number of objects on that
queue to exceed the high-water-mark, an "act_object_queue_full()"
notification is sent to the object at the head of that queue. This
notification can be ignored, or used to move the object to another
queue, or to destroy the object altogether.

Also for additional flexibility, it is possible to avoid removing an
object from the active table when its reference count reaches zero:
this is useful to keep a cache of a small number of idle objects,
similar to the object cache in the Mach kernel. This facility relies
on the specification of a pair of associated queues. The first queue,
of type ACT_TYPE_PERSISTENT, holds all the objects that are currently
referenced by parties outside of the active_table. When the reference
count reaches zero, instead of letting the object be destroyed, the
active_table itself takes a reference, and moves the object to the
associated queue, of type ACT_TYPE_IDLE. If the object is again
looked-up (through the active_table), that reference is released, and
the object is put back on the ACT_TYPE_PERSISTENT queue. Objects on
the ACT_TYPE_IDLE queue can be destroyed by using the high-water-mark
technology, or by periodically scanning that queue.

It is possible to have any number of independent persistent queue
pairs in the same active_table, provided that they all use different
queue numbers.

Please refer to "local_include/act_internal.h" for the specification
of the various methods exported and used by the active_table class.
The "active_table" class is part of lib/us.

Currently, the FS agency system and the NFS system have been converted
to use an active_table. The CAT system is an obvious candidate for use
of this technology, but it has not been updated as of this release.


3. Shared conditions:

The "shcond" class implements condition variables similar to those
provided in the cthreads library, but that can be stored in memory
shared between multiple tasks. Note that cthreads mutexes can already
be shared normally between tasks.

To reduce resources fragmentation, each instance of the "shcond" class
implements an array of 10 condition variables, numbered 0 through 9.

Each of the "shcond" instances in each task that must share access to
the condition variables must delegate (through IPC) to a single
instance of class "shcond_mgr", which acts as the coordinator for
sleep and wakeup requests. Each instance of "shcond" and "shcond_mgr"
must also be given a pointer to an area of shared memory of type
"struct shcond_shared_zone", defined in "lib/us/shcond_ifc.h". It is
the responsibility of the user of the Shared Conditions facility to
allocate that shared memory; this memory will typically be a small
part of a larger shared buffer.

Please refer to "include/shcond_methods.h" for the specification
of the various methods exported by the Shared Conditions facility.
This facility is part of lib/us.

This facility is currently not used in any part of the system. It may
be used in the future for the implementation of streams.


4. Streams:

The Streams facility is constituted by a set of classes that implement
rapid transfer of data, buffering, reader-writer synchronization and
pipelining across address spaces.

There are two kinds of streams: bytestreams, where the data is an
undistinguished sequence of bytes, and msgstreams, where the data is
organized as a sequence of records or messages, with record
boundaries. Currently, only bytestreams are operational, and they do
not yet support pipelining.
Each instance of the class "bytestream" implements a data buffer
supporting io_read() and io_write() operations with multiple readers
and writers.  It uses IPC and CAT's for data transfer between tasks.
The memory blocks used to store the buffered data are all managed by
an instance of the class "stream_mgr"; this allow data blocks to be
shared between multiple stream-like objects in a pipeline.

The streams-related classes are part of lib/us, and most of their
methods are defined in "include/io_methods.h" and
"local_include/io_internal.h".

There are currently no applications using streams, but the pipe server
is coming soon...


5. Reorganized Agent Class:

The "agent" class has been reorganized to allow re-invocation on the
agent through the "Base" pointer without encountering problems with
access mediation.

This is accomplished by splitting the agent into two components: an
instance of the "agent" class itself, and an instance of class
"agent_helper". The instance of "agent" implements access mediation
through the access_table, and forwards accepted invocations to the
agent_helper (NOT through delegation). The agent_helper implements all
the other functions of a composite agent (get_credentials, get_access,
...), and delegates to the agency.
With to this setup, during the execution of any method in the agency,
the "Base" pointer refers to the agent_helper and not to the real
agent itself, and any method can be invoked against it without going
through the access_table again. All re-invocations from inside
components of the agency can and should thus be done on "Base" and not
on "Self".

The agent_helper is allocated internally by the initialization of the
agent class, so that this structure is transparent to all users of
the agent class.


6. Reorganized mapped-file and FS system:

6.1. fs_access:

Each FS-based name tree now contains a single instance of an object of
class "fs_access", which encapsulates all knowledge about translation
of credentials and protection between the FS and standard formats.

All instances of fs_dir, fs_file, fs_symlink and fs_auth contain a
pointer to the fs_access object.

6.2. agency_mgr:

The old "active_table" objects that keeps track of all FS-type objects
and takes care of GC has been renamed "agency_mgr". The agency_mgr
class derives from the standard active_table class, and it can be used
with systems other than FS.

It performs the equivalent of a "sync()" on each writeable file every
minute, and deallocates unused paging objects after 3 minutes.

6.3. PublicLocal():

All classes have been reorganized to inherit some instance variables
(agency_mgr, fsid, ...) through the "PublicLocal()" construct, instead
of keeping a copy of those variables in each class of the inheritance
hierarchy.

6.4. Mapped Files:

The mapped-file classes (mf_mem, mf_mgr, mf_user, mf_cat) have been
restructured. All write accesses are now always forwarded via IPC to
the mgr, without any attempt to use a window on the client side. For
read accesses, each client maintains a notion of the "last known size"
of the file. If the read falls within the currently-defined size, it
is performed in the local window; otherwise, the client first sends a
message to the mgr to make sure of that size.

Note that with this scheme, there is no descriptor page, and no
call-back for concurrent access. The behavior with multiple concurrent
clients is reasonable, but not perfect. In particular, it is possible
for a reader to observe inconsistent data if a writer changes the data
inside the current size of the file, or truncates the file to reduce
that size.

All the client state is now lazily initialized at the time of first
access to the object.

6.5. fs_file:

The fs_file class has been restructured to make it more
understandable, and to simplify garbage-collection. The new structure
is illustrated in a comment at the head of the implementation file.

The pager and fs_fio are no longer on the delegation chain.


7. Volatile Name Hierarchies:

Next to the name hierarchies that are based on some sort of secondary
storage (i.e file system), we have a class of name hierarchies that are
used only to keep track of the objects in a server for as long as this
server is running (root name server, NFS mount points, TTY server,
task_master, ...). These name hierarchies are all special cases of a
generic concept called a "volatile name hierarchy" (as opposed to
"persistent"). It is now possible to implement volatile name
hierarchies by using or inheriting from a few standard building
blocks.
In a volatile name hierarchy, it is possible to use simple object
pointers in directory entries, and there is no need for any kind of
active_table or agency_mgr. In addition, the object pointer itself can
be used as the ns_obj_id returned by ns_get_attributes(). These
policies are encapsulated in the class "vol_agency", which should be
used instead of "agency" as the base for all objects in such a name
space.  vol_agency also takes care of allocating and initializing a
standard protection object on the delegation chain, and it could
maintain a link count if we decide to have one.

The "dir" class can now be easily used as a base class for more
complex directory objects that support various types of entries. It
now exports special operations (ns_reserve_entry(), ns_install_entry()
and ns_cancel_entry()) to manipulate entries for object that have been
created in a derived class. It also exports a method to allocate a
unique name for an entry, without actually creating the entry itself
(ns_allocate_unique_name()). The "dir" class has also be significantly
cleaned-up.
The "symlink" and "mountpt" class still work as before, but they have
been reorganized to derive from "vol_agency".

The root name server, and the root of the NFS server (which holds all
the mount points) have been reorganized to use the new style of
volatile name hierarchies. Other servers (tty, tm, pipe, ...) are
candidates for a similar reorganization, but have not yet been
updated.


8. Name Hierarchy Initialization:

The standard procedures for initializing a new name space hierarchy
have once again been improved. Each of the classes that can be used to
implement the root of a name hierarchy (dir and fs_dir) now exports a
special setup method (setup_dir_as_root() or setup_fs_dir_as_root())
to initialize them as the root of a new tree instead of as a regular
directory inside of a tree. These setup methods internally allocate an
access_table, authenticator and any other global objects needed by the
naming tree.

The "agency" class implements two methods to export any object to the
outside world: "ns_create_initial_agent()" and "ns_netname_export()".

The "access_table" class exports a special method
(setup_access_table_default()) that initializes the table with a set
of default access entries, specified in the same file that contains
the implementation of the "access_table" class. In a vanilla system,
there should be no reason to use anything other than this default
table.

The functions and variables for management of a global access_table
and authenticator are gone, as well as all the utility functions for
creating a new tree (lib/us/dir_init.c, lib/us/fs_global.c,
lib/us/utils.c). To create a new tree, simply create (new_object())
the root directory object, invoke the appropriate setup_*_as_root()
method, and use ns_netname_export() to make it available in the
netname space.


9. Temporary Objects

The "temporary" class can be used as a standard delegate for any
object in any name hierarchy, that needs to be removed from its
containing directory when it no longer has any agents. This feature is
enabled simply by specifying the entry name and containing directory
with the ns_register_temporary_name() method.

Currently, this class can only remove an entry for the object in a
single directory. This should be improved.


10. Authid Mapping:

The standard "fs_access" class contains a general-purpose facility for
translating between standard authentication ID's and FS-style uid's
and gid's.

This translation is enabled with the method "fs_set_authid_map()",
which should specify a pointer to a single ASCII string containing raw
mapping info in the following format:
 		authid1:uid1:gid1
 		authid2:uid2:gid2
 			....
Either of the uid or the gid fields may be empty; no field may be
repeated on more than one line.  If a mapping is not found in the
table, the identity mapping is performed, except for root and the
privileged ID, which are always mapped specially.

The nfs_mount() method in the NFS server has been modified to specify
such an authid mapping, allowing authenticated access to NFS servers
outside of the US emulation world.

The UFS file server currently does not do any authid mapping.


11. System Startup Script

The system startup script uses an authid mapping table in
/afs/cs.cmu.edu/project/mach-2/common/authid_map_cmu when mounting
honeydew:/afs. In order to be authenticated to AFS, the user of this
system must also acquire an AFS token from the PAG service on
honeydew, for the same machine and with the same userid as those that
are running the emulated system. This is not the same thing as simply
having a token on the local machine. Note also that by default, the
tm_init program starts a shell running with the root uid, not that of
the user.

The programs to deal with the PAG service can be found in
/afs/cs/user/dpj/src/pag; they are maintained by jsb.

The startup script now finds STARTUP.fsadmin along LPATH, instead of
looking in bin.


Bug fixes:
--- -----

[ ./utils/umerge.csh ]
Added *LOG* to list of files to clean-up.
[89/10/27  19:59:58  dpj]

[ ./lib/emul/emul_io.c ]
Added cloning of the Diag object. This was preventing any debugging
output from showing-up in child processes.

[ ./lib/emul/emul_proc.c ]
Fixed argument block allocation in emul_execve().
Fixed exec_debug technology to only suspend the process once.

[ ./lib/load/dyn_execute.c ]
Fixed dyn_object_make_stack() to always copy the arguments
and environment onto the new stack, even when inplace is true.
This was causing the infamous "cannot open 0.o" in ld.

[ ./lib/us/io_methods.c ]
Updated maximum I/O buffer size to 7000 bytes.
Describe io_offset and io_size arguments as 4 halfwords, not two ints.

[ ./lib/us/mf_mgr.c ]
Fixed a deadlock in io_clean().

[ ./lib/us/pager.c ]
Added a quick hack to try to reduce chances of deadlock on the
single service thread when mo_request() is called while waiting
for mo_lock_c().

[ ./lib/us/test/test_global.h ]
Defined UsePrintf, to get error reports to stderr.

[ ./server/as/Makefile ]
Removed the authentication database from the list of
targets made by default.
If people are going to be modifying their entry in the database, it
cannot be rebuilt from scratch every time the system is rebuilt.

[ ./server/tm/tm_init.c ]
Fixed "-D" switch, which had disappeared.


[IBMRT]

[ ./server/ufs/ufs_xxx.c ]
Added some dummy code to get around a bad compiler bug on
the RT.


Organizational changes:
-------------- -------

The following files are now obsolete and have been defuncted:
	lib/us/dir_init.c
	lib/us/fs_global.c
	lib/us/fs_global.h
	lib/us/gen_base.h
	lib/us/utils.c


Special notes:
------- -----

There are many loose ends in this release, but I needed to checkpoint
my work and bring it up to date before going any deeper. Anyway, it
works, and I have a lot more confidence in the file server now,
although there is still a serious deadlock problem in the pager.

The pipe server, and a name space for the TTY server, should come very
easily now.





    
    
    
==========================================================================
   ***** US Version U13  (dpj) *****
    
    
New features:
--- --------

1. New Pager:

The pager class has been completely re-implemented to eliminate the various
deadlock problems found in the old version. The new code uses a queue of
pending operations to deal with requests that cannot be serviced at once,
instead of blocking the service thread on a condition variable. It is also
much more straightforward. The iop_flush() operation has been eliminated,
since we no longer need to call-back pages mapped into a client's address
space. A few of the memory object methods have been renamed for consistency,
and the memory_object class has been modified accordingly, as well as
cleaned-up.

The structure of this new implementation relies heavily on the model pager
by Joe Barrera, and Rich Sanzi's earlier US pager.

There are no known problems with this new pager.


2. Pipes:

There is now a full-fledged pipe server, using the standard bytestream class
for I/O buffering, and a UNIX-specific pipe_agency class to handle
no-readers/no-writers conditions. All pipes are stored in a single volatile
directory implemented by the class pipe_dir, derived from dir; there is
support for unnamed pipes, and destroying pipes when they are no longer in
use. Sources for standard components are in lib/us; sources for components
specific to the UNIX pipe server are in server/pipe.

The bytestream class has been modified to implement the I/O strategies
needed to implement UNIX semantics (see io_types.h and io_internal.h):
	IOS_ENABLED: if this bit is zero, all I/O operations
		are rejected immediately.
	IOS_WAIT_ALLOWED: if this bit is zero, I/O operations
		are immediately rejected if there is no data or no space
		available, whether or not the IOM_WAIT mode is used.
There are independent strategies for read and write operations.
The new error code IO_REJECTED has been defined to be used when the current
I/O strategy does not allow a data transfer.

The bytestream class has also been modified to support arbitrary sizes for
I/O operations, and to treat the "buffer size" as only a high-water-mark for
flow control instead of a hard limit. Read/write atomicity is guaranteed for
any data size (this is better than what regular UNIX does). The I/O method
argument strings have been updated to allow up to 32K bytes for each data
transfer (up from 7000 bytes).

The emulation library has been modified to implement emul_pipe() correctly,
and the uxio class has been cleaned-up to remove the unused ux_pipe()
method. The uxstat class can now deal with pipes.  emul_read() and
emul_write() have been updated to deal with pipe errors. Note that there is
no mechanism (yet) to generate a SIGPIPE, so some pipelines may behave
strangely at times.

The pipe server is compiled by default with all the other servers, and
started normally (with directory "/pipes") by the standard startup script.


3. Minor cleanup in mf_mem:

The local variable "is_mgr" in the mf_mem class has been renamed
"do_write_through" in a (futile?) effort to make it more explicit.


Bug fixes:
--- -----

Fixed include of error.h to come from mach/error.h instead of sys/error.h in
a few places.

Added a default access_entry for ns_get_agency_ptr() in the access_table
class, since this is needed for the correct operation of ns_insert_entry()
in various other classes. Modified fs_dir to use ns_get_agency_ptr() instead
of calling fs_get_fsid() directly on the agent.

[ ./include/io_error.h ]
Removed IO_WAIT and IO_NOTIFY, no longer used anywhere.

[ ./include/io_methods.h ]
Fixed documentation for type of "count" argument in
io_read() and io_write().

[ ./include/io_types.h ]
Removed IOA_* definitions, and io_stat_rec_t.

[ ./lib/machobj/MachRemoteObject.c ]
Fixed msg_unpack to deal correctly with out-of-line arrays
for each value of the indirect count.
Modified mach_message_invoke() to try and send a simple error
reply when the msg_send() for the real reply failed. This should
keep the client from hanging unnecessarily.

[ ./lib/machobj/mach_object.c ]
Fixed to really have a NULL arg_info when no argument string
was specified.

[ ./lib/us/cat.c ]
Added an initialize() method, to clear the cached object port.

[ ./lib/us/fs_access.c ]
Make the parsing of the authid data more robust:
	- force a zero at the end of the data string,
	- generate an error if the data string does not
	end with a newline,
	- strengthen the sscanf() format string.

[ ./lib/us/nfs_methods.c ]
Fixed type of authid_map data in nfs_mount().

[ ./lib/us/ns_methods.c ]
Fixed name argument ns_create_anon(). OUT strings do not work well.

[ ./lib/ux/uxio.c ]
Fixed arguments declaration in ux_open().

[ ./server/ufs/mach_directory.c ]
Fixed namei_in_directory() to return a NULL inode pointer by
default, to make it more robust in case of errors.

[ ./server/ufs/ufs_bio.c ]
Process any pending delayed write before calling block_read()
from bread().

[ ./server/ufs/ufs_export.c ]
Improved handling of errors from namei_in_directory(), to try
and unlock the various inodes more often.

[ ./server/ufs/ufs_xxx.c ]
Fixed allocbuf() to copy the old data into the new buffer
instead of just losing it.
Added error checking on vm_allocate() and vm_deallocate().


[IBMRT]

The execl() function out of libc.a on the RT incorrectly uses the bottom of
the stack as a scratch area in which to build the argv block. Unfortunately,
the emulation emtry code uses that same stack area to save the call
arguments. Since we cannot fix execl(), I have implemented a work-around
in lib/emul/ibmrt/emul_vector.s and lib/emul/ibmrt/emul_machdep.c. This
should work in all cases, but it is a really ugly hack, and we might try to
think of something better. This fix is under the DPJ_EXECL conditional, to
set it apart from the "pure" code. DPJ_EXECL is turned on by default.


Organizational changes:
-------------- -------

There is now a pipe server.


Special notes:
------- -----

wait3() seems to be broken both on the Sun and RT. Since I only changed the
RT emulation code, I don't think I did it.

The UFS server had quite a few problems which were causing "ranlib" to
break.  It almost certainly has more. It needs to be looked at.

I have successfully compiled the "Hello world" program with make on a Sun
and RT.

ranlib now works.

I have a fixed an initialization bug in the cat class, which might explain a
lot of mysterious bugs previously reported.

The following files belonging to the old (1988) pipe server are now defunct:
	server/pipe/pipe_access.c
	server/pipe/pipe_common.h
	server/pipe/pipe_oops.c
	server/pipe/pipe_pipe.c






    
    
    
==========================================================================
   ***** US Version U14  (dpj) *****
    
    
New features:
--- --------

Added a new act_remove() method in the active_table class, to remove an
entry without taking into account its current reference count.
See act_internal.h for details. Note that the object designated by the entry
is NOT destroyed by this method (normally).

This method should not be used with the typical active_table applications,
but it is useful for the task_master.


Bug fixes:
--- -----

Fixed a number of "#include" statements for files that used to be in .../sys
and are now in .../mach. Affected files:
	server/as/sm/sm_init.c
	server/as/sm/sm_init_defs.h
	server/tty/bigpile_xxx.x
	server/ufs/queue.h
This should be all that is needed to compile the whole system again with the
new standard include files.

Fixed the UFS Makefile to correctly use CFLAGS sepcified in the Makeconf or
on the command line, if any.


Organizational changes:
-------------- -------

Modified the umerge.csh script to maintain a history of all release messages
(such as this one), in ./UMERGE_HISTORY. Successive messages are simply
appended at the end. This file is archived in RCS.

Fixed the umerge.csh script to trigger the version number update on the
.BCSmerge-TRUNK file instead of .BCSlog-TRUNK, as per the kernel kmerge
script. This should eliminate the various "accidents" where the version
number did not get incremented because someone had been using bci in the
merge area before calling umerge.

Modified ./utils/log-recipients.list to use the new mach3 mailing list.


Special notes:
------- -----

For those who receive a release message for the US system for the first time:
I have manually entered all previous release messages in the UMERGE_HISTORY
file. You can peruse them at your leisure.

    
    
    
==========================================================================
   ***** US Version U15  (dorr) *****
    
    
New features:
--- --------

the emulation library has been reorganized so that emulation features
are now much more independent of each other.  similar features (file
table i/o, signals, process management, name space manipulation, etc.)
are in separate library archive members.  the emulation library that
actually gets built is determined by a control file that describes
which syscalls are to be emulated.  the control file has a {type} and
a {sys}.  the {sys} determines which syscalls you have to choose from
(found in a file called {sys}_syscalls.c).  currently, we only have a
"bsd" {sys}.  the {type} determines which syscalls (using which
features) are to be emulated (the file called {sys}_emul_{type} gives
the list of syscalls exactly are to be selected).  initialization and
other {type} specific features are found in the module emul_{type}.c,
which is automatically linked in with a given emulation library.
libraries are now named {sys}_{type}.lib.  for the moment, we work
with "bsd_all.lib" for everything we do.

MAKE NOTE:  emul_init looks for bsd_all.lib.  the makefile generates
it.  don't use emul.lib any more.  move into the 90's!

the following organizational changes have been made:

	emul_basic.c:		basic syscalls - exec, brk, etc.
	emul_proc.c:		process mgt related syscalls - fork, getpid, etc.
	emul_io.c:		same as before, less some initialization
	emul_uid.c:		setreuid, setregid, getuid, etc.
	emul_misc.c:		generic initialization and generally useful stuff

	emul_all.c:		specific initialization for the emulation 
				library that emulates all of bsd unix
	bsd_emul_all:		which syscalls are emulated in our emulation of
				bsd unix


I changed emul_initialize so that it sets up the emulation redirection, 
so the syscalls to be emulated are wholly a function of the library doing
the emulation.

I made an htg library that has all of the htg syscalls you could ever
want as an archive.

tm_init has been replaced by an emul_init.  it's been a while since tm_init
made any sense.

I wrote a small program that takes a list of syscalls (as in
bsd_emul_all, for example) and generates a table of emul_* entry
points, indexed by syscall number, and a mask also indexed by syscall
number.  these tables are used by emul_initialize to set up task
emulation.  we don't use it right now, but the mask could be used to
turn on or off emulation at run time.  the table of entry points is
used to set up task emulation.

I also wrote some objects that implement a name space and do i/o using
underlying htg (2.5 mach) file descriptors.  This lets us easily write
emulation libraries that do i/o in the 2.5 namespace.  This will
please that fiend, Rick.

I moved the identity stuff from the uxprot object (Dan, you can stop
wondering loudly what it was doing there ... it's gone) into a new
uxident object.  I implemented setgid() and set/get_groups in that
object.  I got rid of the uxprot conversion operations (ditto for
that, Dan).  I changed everyone to use fs_access objects.  I don't
really like that ... I think fs_access should derive from something
that does only conversion, since it does this other fs_* specific
stuff, but maybe we can talk about that when Dan gets back.  Then, I
moved the unix specific mode conversion into the uxstat object and
thereby got rid of the last reason to have a uxprot object.  As soon
as I can remember how to defunct something, I'll defunct it.

I also added initial objects and library (cthreads, mostly) support
for signals.  This consists mostly of an alert object, a unix signal
object, exception and thread redirection support in cthreads
and the inital work on plugging it into the emulation library.
more on that as it develops.  I hope to be running some signals within
a few days.


Bug fixes:
--- -----

no bugs here.

Organizational changes:
-------------- -------

oops.  see above.

Special notes:
------- -----

You like me!  You really like me!  -Sally Field    
    
    
==========================================================================
   ***** US Version U16  (roy) *****
    
    

[ ./conf/version.edit ]
16
[ ./Makeconf ]
change /afs/cs to /afs/cs.cmu.edu
[90/02/13  17:18:54  roy]
[ ./lib/emul/Makefile ]
move machine-dep. htg file stuff into htg_lib to avoid circular
dep. when building on RT.
[90/02/13  16:51:03  roy]
[ ./lib/emul/ibmrt/Make.ibmrt ]
create MACHDEP_HTG define to be used by makefile above
[90/02/13  16:54:02  roy]
[ ./utils/startup.sh ]
sleep 5 after cas startup to make sure it's initialized before other
servers start
[90/02/14  15:44:36  roy]
[ ./utils/umerge.csh ]
change /afs/cs to /afs/cs.cmu.edu
[90/02/13  17:32:25  roy]
    
    
    
==========================================================================
   ***** US Version U16  (roy) *****
    
    
   ***** US Version U16  (roy) *****

This message is being entered in absentia for Paul.

Miscellaneous small changes to get things to build and
run on an RT not at CMU.
    

[ ./conf/version.edit ]
16
[ ./Makeconf ]
change /afs/cs to /afs/cs.cmu.edu
[90/02/13  17:18:54  roy]
[ ./lib/emul/Makefile ]
move machine-dep. htg file stuff into htg_lib to avoid circular
dep. when building on RT.
[90/02/13  16:51:03  roy]
[ ./lib/emul/ibmrt/Make.ibmrt ]
create MACHDEP_HTG define to be used by makefile above
[90/02/13  16:54:02  roy]
[ ./utils/startup.sh ]
sleep 5 after cas startup to make sure it's initialized before other
servers start
[90/02/14  15:44:36  roy]
[ ./utils/umerge.csh ]
change /afs/cs to /afs/cs.cmu.edu
[90/02/13  17:32:25  roy]
    
    
    
==========================================================================
   ***** US Version U17  (orr) *****
    
    
New features:
--- --------

i386 support added.

first cut at dos emulation merged in, also, though not for general
consumption.

ls doesn't work on the 386 because we don't emulate getdirent() & friends.
A small deal, but worth noting so that you don't spend a day looking for
the problem as I did.

Bug fixes:
--- -----

Organizational changes:
-------------- -------


Special notes:
------- -----

F sharp.

     
    
    
==========================================================================
   ***** US Version U17  (orr) *****
    
    
New features:
--- --------

<Replace this text with a description of one new machine independent feature.
Replicate a similar block to describe each additional new feature.>

[IBMRT]	  <Replace this text with a description of one new IBMRT machine
dependent feature.  Replicate a similar block to describe each additional
new feature.>

[SUN3]	  <Replace this text with a description of one new SUN3 machine
dependent feature.  Replicate a similar block to describe each additional
new feature.>

[VAX]	  <Replace this text with a description of one new VAX machine
dependent feature.  Replicate a similar block to describe each additional
new feature.>


Bug fixes:
--- -----

<Replace this text with a description of one machine independent bug fix.
Replicate a similar block to describe each additional bug fix.>

[IBMRT]	  <Replace this text with a description of one IBMRT machine dependent
bug fix.  Replicate a similar block to describe each additional bug fix.>

[SUN3]	  <Replace this text with a description of one SUN3 machine dependent
bug fix.  Replicate a similar block to describe each additional bug fix.>

[VAX]	  <Replace this text with a description of one VAX machine dependent
bug fix.  Replicate a similar block to describe each additional bug fix.>


Organizational changes:
-------------- -------

<Replace this text with a description of one machine independent organizational
change.  Replicate a similar block to describe each additional change.>

[IBMRT]	  <Replace this text with a description of one IBMRT machine dependent
organizational change.  Replicate a similar block to describe each additional
change.>

[SUN3]	  <Replace this text with a description of one SUN3 machine dependent
organizational change.  Replicate a similar block to describe each additional
change.>

[VAX]	  <Replace this text with a description of one VAX machine dependent
organizational change.  Replicate a similar block to describe each additional
change.>


Special notes:
------- -----

<Replace this text with any special information of interest for this version.>

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
17
[ ./Makeconf ]
<<<log message for ./Makeconf>>>
148c148
< LIBS=-lmach -lc
---
> LIBS=-lmach -lcs -lc
[90/03/14  16:44:25  orr]
[ ./lib/emul/Makefile ]
get rid of notify procs.  move the include of make.${machine}
up so that make's that require ordered definition of make
variables.  fix other miscellaneous make problems for the
386 make, which seems a little sensitive.
[90/03/14  16:49:12  orr]
[ ./lib/emul/emul_addr.c ]
gcc isn't generating a "return 0" if you
fall out of a procedure.  make it explicit.
[90/03/14  16:50:56  orr]
[ ./lib/emul/emul_all.c ]
get rid of start_notification_listener.
[90/03/14  16:51:18  orr]
[ ./lib/emul/emul_memory_base.c ]
nc
[90/03/14  16:51:32  orr]
[ ./lib/emul/emul_proc.c ]
for some reason on the 386, the values returned through
the hosed up return path of htg_fork() are different. 
use a more robust, but more expensive method for
determining who is the parent and who is the child (do
some extra htg_getpid()'s).  this all goes away when
we have task_create().
[90/03/14  16:53:00  orr]
[ ./lib/emul/emul_user_lib.c ]
get rid of #include "complexio.h"
[90/03/14  16:53:19  orr]
[ ./lib/emul/gen_syscalls.c ]
explicitly exit(0).  gcc/libc for the 386 doesn't
exit with 0 if you fall out of a routine implicitly.
[90/03/14  16:54:06  orr]
[ ./lib/load/at386/dyn_relocate.c ]
initial checkin.
[90/02/04  19:39:30  orr]

created.
[89/07/11  15:32:15  dorr]
[ ./lib/load/at386/dyn_thread.c ]
fix to work (modify from original sun copy.
[90/03/14  16:54:42  orr]

initial creation.
[90/02/04  19:39:52  orr]

created.
[89/07/11  15:32:51  dorr]

add setup_primary_thread() and get_stack_info()
[89/07/10  15:56:53  dorr]

created.
[89/07/06  13:05:36  dorr]
[ ./lib/load/dyn_aout.c ]
add 386 changes.  some of this stuff is massively bogus, because
the /usr/include definitions are ... er ... inconvenient.
[90/03/14  16:56:30  orr]
[ ./lib/load/dyn_execute.c ]
no change.
[90/03/14  16:56:43  orr]
[ ./lib/load/dyn_object_ifc.h ]
add 386 definitions.
[90/03/14  16:56:59  orr]
[ ./lib/machobj/at386/cthread_inline.awk ]
initial checkin.
[90/02/04  17:08:19  orr]

initial checkin.

 
[90/02/04  16:50:50  orr]
[ ./lib/threads/Makefile ]
get rid of unused call* stuff.
[90/03/14  16:57:30  orr]
[ ./lib/threads/at386/csw.s ]
initial checkin.
[90/02/04  16:50:05  orr]
[ ./lib/threads/at386/cthread_inline.awk ]
initial checkin.

 
[90/02/04  16:50:50  orr]
[ ./lib/threads/at386/lock.s ]
initial checkin.
[90/02/04  16:51:07  orr]
[ ./lib/threads/at386/thread.c ]
initial checkin.
[90/02/04  16:51:21  orr]
[ ./lib/us/fd_dir.c ]
i386 changes.
[90/03/14  16:57:45  orr]
[ ./lib/ux/ftab_ifc.h ]
fix a syntax error.
[90/03/14  16:58:04  orr]
[ ./lib/v86/Makefile ]
Added .h dependancies
[90/03/13  15:26:39  orr]

first working version.
[90/03/12  02:22:30  orr]
[ ./lib/v86/base.h ]
add device stuff.
[90/03/14  16:58:58  orr]

Version that gives an A:> prompt and does a DIR.
Removed DEBUG.  Added the support for the DebugX's
run time debugging.
[90/03/13  15:34:50  orr]

try it without debug output.
[90/03/12  02:16:29  orr]

[90/03/12  01:17:39  orr]
[ ./lib/v86/bios.h ]
Version that gives an A:> prompt and does a DIR.
No major changes.
[90/03/13  15:35:19  orr]

fix addr so that it masks off high word of segment.
turn off debug output.
[90/03/12  02:17:06  orr]
[ ./lib/v86/bios_disk.c ]
first pass at generalizing device stuff.
[90/03/14  16:59:20  orr]

Version that gives an A:> prompt and does a DIR.
Replaced DEBUG with DebugX.  No major changes.
[90/03/13  15:28:03  orr]

First working version.  route all debug output
through stderr.
[90/03/12  02:11:30  orr]

[90/03/11  20:02:37  orr]
[ ./lib/v86/bios_kbd.c ]
Version that does an A:> prompt and a DIR.
bios_kbd_init saves the initial tty state
and turns off echo and turns on raw mode.
Control-g resets the tty and exits the program.
Added peeked and peekc which are used so
the get_keyboard_status thinks it didn't really
remove char from the input queue.
[90/03/13  15:32:16  orr]

first working version.  route all debug output through
stderr.  use dosdevice for i/o
[90/03/12  02:12:15  orr]

[90/03/12  01:14:20  orr]
[ ./lib/v86/bios_misc.c ]
Version that gives an A:> prompt and does a DIR.
Replaced DEBUG with DebugX. No major changes. 
[90/03/13  15:33:07  orr]

first working version.  use stderr, for debug output.
hack up tick count to change.
[90/03/12  02:13:02  orr]

[90/03/11  22:18:44  orr]
[ ./lib/v86/i386-pisn.c ]
no change
[90/03/12  02:14:01  orr]
[ ./lib/v86/mon_init.c ]
allow no arguments to be passed to monitor program.
[90/03/14  16:59:57  orr]

strip out unnecessary things from emul_init to
use with v86 dos mode.
[90/03/12  02:21:21  orr]

[90/03/09  22:40:07  orr]
[ ./lib/v86/tst.c ]
little test program for trying weird
8086 stuff.
[90/03/12  02:15:47  orr]
[ ./lib/v86/v86.c ]
first pass at generalizing device stuff.
[90/03/14  17:00:21  orr]

Version that gives an A:> prompt and does a DIR.
Added run time flags, replaced DEBUG with DebugX.
Settable dosdevice added to replace stdout.
[90/03/13  15:26:12  orr]

first working version.
[90/03/12  02:16:09  orr]
[ ./local_include/i386_mach/machine_address_space.h ]
get the numbers right for the emulation library location.
[90/03/14  17:00:57  orr]

 initial checkin.
[90/02/04  17:02:27  orr]
[ ./pkg/sunrpc/rpc/clnt_perror.c ]
sprintf has to be an int or bad things happen with gcc.
[90/03/14  17:01:45  orr]
[ ./pkg/sunrpc/rpc/xdr_float.c ]
change defines to be not so vaxcentric.
[90/03/14  17:02:16  orr]
[ ./pkg/sunrpc/rpcgen/rpc_util.h ]
sprintf's are ints.
[90/03/14  17:02:34  orr]
[ ./server/device/Makefile ]
use LIBS for standard libraries.
[90/03/14  17:02:54  orr]
[ ./server/device/mach_ether.c ]
add an errno.
[90/03/14  17:03:39  orr]
[ ./server/diag/Makefile ]
use LIBS for generic libraries.
[90/03/14  17:03:58  orr]
[ ./server/name/Makefile ]
use LIBS for generic libraries.
[90/03/14  17:04:19  orr]
[ ./server/nfs/Makefile ]
use LIBS for generic libraries.
[90/03/14  17:04:34  orr]
[ ./server/pipe/Makefile ]
use LIBS for generic libraries.
[90/03/14  17:05:20  orr]
[ ./server/tm/Makefile ]
get rid of tm_init and a bunch of other stuff that
isn't used any more.
[90/03/14  17:05:52  orr]
[ ./server/ufs/Makefile ]
use LIBS for generic libraries.
[90/03/14  17:06:08  orr]
[ ./server/ufs/include/inode.h ]
add 386 support.
[90/03/14  17:06:23  orr]
[ ./server/ufs/ufs_xxx.c ]
move the netname lookup after finishing the debug initialization
(so that error output doesn't hose up because it hash't been
initialized).
[90/03/14  17:09:03  orr]
[ ./utils/Makefile ]
use LIBS for generic libraries.
[90/03/14  17:09:54  orr]
[ ./utils/fsadmin.c ]
don't use writeable strings for standard login.
[90/03/14  17:10:23  orr]
[ ./mach_include/stdio.h ]
undo mja sprintf change.  too painful is right.

[ ./lib/emul/Makefile ]
change the order of the -include again for the sun.
[ ./lib/emul/sun/Make.sun ]
MACHDEP_EMULLIB -> MACHDEP_HTG
[ ./server/ufs/include/setjmp.h ]
add 386 jmp_buf.
[ ./UMERGE_HISTORY ]
US Version U17
    
    
    
==========================================================================
   ***** US Version U18  (jms) *****
    
    
New features:
--- --------

The New AND Improved Object-Based Task_Master.  There are now new features
as such but all of the interfaces have changed.  See .../include/tm_methods.h
for more details.

Signals actually do something.  The Task_Master signals processes
directly for the nonce.

[IBMRT]	 
This may be the last version that runs on the RT.  Dougs next checking
(this week) is not expected to work on the RT.

[i386]
Doug missed some 386 machdep files.  New feature: this release version runs
on the 386 (mrbig).

Bug fixes:
--- -----

DPJ fixed a number of bugs in MachRemoteObject.
DPJ enabled cloning of MachExternalObject so that emulation objects can have
remote representations.

Organizational changes:
-------------- -------
The following files have been defunctatized:
	./defs/tm.defs
	./defs/tm_notify.defs
	./defs/tm_types.defs
	./lib/signal/emul_signal.c
	./lib/signal/error_routine.c
	./lib/signal/error_routine.h
	./lib/signal/hash.h
	./lib/signal/libc_signal.c
	./lib/signal/list.c
	./lib/signal/list.h
	./lib/signal/mach.c
	./lib/signal/machine_signal.h
	./lib/signal/main.c
	./lib/signal/misc.c
	./lib/signal/romp_exception.c
	./lib/signal/sendsig.c
	./lib/signal/sig_main.c
	./lib/signal/signal.c
	./lib/signal/signal.h
	./lib/signal/signal_base.h
	./lib/signal/signal_interface.defs
	./lib/signal/signal_interface.h
	./lib/signal/signal_types.h
	./lib/signal/sigtest_asm.s
	./lib/signal/task_master.h
	./lib/signal/tm_interface.c
	./lib/signal/tm_types.defs
	./lib/signal/tm_types.h
	./lib/signal/types.defs
	./lib/signal/ux_exception.c
	./server/tm/bsd_emulation.h
	./server/tm/tm_debug.c
	./server/tm/tm_init.c
	./server/tm/tm_internals.h
	./server/tm/tm_job.c
	./server/tm/tm_procs.c
	./server/ufs/include/setjmp.h

Special notes:
------- -----
This may be the last version that runs on the RT.  Dougs next checking
(this week) is not expected to work on the RT.

Haven't compiled this on the Sun3.  Have had new flakey kernel bugs that
would not let the compile complete without locking the machine (orr).

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
18
[ ./defs/tm.defs ]
Defunct with objectified Task Master.
[ ./defs/tm_notify.defs ]
Defunct with objectified Task Master.
[ ./defs/tm_types.defs ]
Defunct with objectified Task Master.
[ ./lib/signal/emul_signal.c ]
Making defunct
[ ./lib/signal/error_routine.c ]
Making defunct
[ ./lib/signal/error_routine.h ]
Making defunct
[ ./lib/signal/hash.h ]
Making defunct
[ ./lib/signal/libc_signal.c ]
Making defunct
[ ./lib/signal/list.c ]
Making defunct
[ ./lib/signal/list.h ]
Making defunct
[ ./lib/signal/mach.c ]
Making defunct
[ ./lib/signal/machine_signal.h ]
Making defunct
[ ./lib/signal/main.c ]
Making defunct
[ ./lib/signal/misc.c ]
Making defunct
[ ./lib/signal/romp_exception.c ]
Making defunct
[ ./lib/signal/sendsig.c ]
Making defunct
[ ./lib/signal/sig_main.c ]
Making defunct
[ ./lib/signal/signal.c ]
Making defunct
[ ./lib/signal/signal.h ]
Making defunct
[ ./lib/signal/signal_base.h ]
Making defunct
[ ./lib/signal/signal_interface.defs ]
Making defunct
[ ./lib/signal/signal_interface.h ]
Making defunct
[ ./lib/signal/signal_types.h ]
Making defunct
[ ./lib/signal/sigtest_asm.s ]
Making defunct
[ ./lib/signal/task_master.h ]
Making defunct
[ ./lib/signal/tm_interface.c ]
Making defunct
[ ./lib/signal/tm_types.defs ]
Making defunct
[ ./lib/signal/tm_types.h ]
Making defunct
[ ./lib/signal/types.defs ]
Making defunct
[ ./lib/signal/ux_exception.c ]
Making defunct
[ ./server/tm/bsd_emulation.h ]
defuncted
[ ./server/tm/tm_debug.c ]
defuncted
[ ./server/tm/tm_init.c ]
defuncted
[ ./server/tm/tm_internals.h ]
defuncted
[ ./server/tm/tm_job.c ]
defuncted
[ ./server/tm/tm_procs.c ]
defuncted
[ ./server/ufs/include/setjmp.h ]
Making defunct
[ ./include/event_methods.h ]
Bring file across from the dorr_signal branch for use with new objectified
TaskMaster.
[90/03/15  15:26:21  jms]
[ ./include/sig_error.h ]
Dummy checkin of version from branch dorr_signals
[90/03/14  17:03:02  jms]
[ ./include/tm_methods.h ]
Methods macros for accessing task master features
[90/03/16  16:01:08  jms]

first objectified Task Master checkin
[89/12/19  16:07:19  jms]
[ ./include/tm_types.h ]
Add some NULL group id values
[90/03/16  16:02:56  jms]

first objectified Task Master checkin
[89/12/19  16:07:26  jms]
[ ./lib/bnw/Makefile ]
TaskMaster is no longer Brave or New.
[ ./lib/emul/Makefile ]
Mods for useing the objectified Task Master and TM->emul signal support.
[90/03/16  16:10:36  jms]
[ ./lib/emul/at386/Make.at386 ]
i386 specific sub-make
[ ./lib/emul/at386/SYS.h ]
First working version
[ ./lib/emul/at386/emul_machdep.c ]
First working version
[ ./lib/emul/at386/emul_vector.s ]
First working version
[ ./lib/emul/at386/htg_trap.s ]
First working version
[ ./lib/emul/at386/htg_unix_syscall_with_flag.s ]
First working version
[ ./lib/emul/emul_all.c ]
Mods for useing the objectified Task Master and TM->emul signal support.
[90/03/16  16:14:06  jms]
[ ./lib/emul/emul_basic.c ]
Remove all Task Master reference
[90/03/16  16:16:36  jms]
[ ./lib/emul/emul_error.c ]
Comment corrections
[90/03/16  16:18:34  jms]
[ ./lib/emul/emul_init.c ]
Remove tm.h include
[ ./lib/emul/emul_io.c ]
Get changes from dorr branch and objectified Task Master objects added to 
clone list.
[90/03/16  16:24:03  jms]
[ ./lib/emul/emul_misc.c ]
[90/01/04  16:30:35  jms]
[ ./lib/emul/emul_proc.c ]
Mods for useing the objectified Task Master and TM->emul signal support.
[90/03/16  16:27:49  jms]

first taskmaster mods
[89/12/19  16:07:58  jms]
[ ./lib/emul/emul_proc.h ]
Name changes.
[90/03/16  16:28:56  jms]

first object based checkin
[89/12/19  16:08:08  jms]
[ ./lib/emul/emul_signal.c ]
Mods for useing the objectified Task Master and TM->emul signal support.
[90/03/16  16:33:02  jms]
[ ./lib/emul/emul_uid.c ]
Grabed from dorr branch
[90/03/16  16:38:46  jms]
[ ./lib/emul/emul_user_init.c ]
Mods for useing the objectified Task Master and TM->emul signal support.
[90/03/16  16:39:54  jms]
[ ./lib/emul/emul_user_misc.c ]
Comment correction
[90/03/16  16:40:41  jms]

first objectified Task Master checkin
[89/12/19  16:08:17  jms]
[ ./lib/emul/event_post.c ]
Fake emulation object for task_master to use to notify the emulation of 
signals.  Does not actually do anything till dougbo gets his signal stuff in
but it does get called before the taskmaster directly applies a unix
kill to the process.
[90/03/16  16:47:54  jms]
[ ./lib/emul/event_post_ifc.h ]
Fake emulation object for task_master to use to notify the emulation of 
signals.  Does not actually do anything till dougbo gets his signal stuff in
but it does get called before the taskmaster directly applies a unix
kill to the process.
[90/03/16  16:49:29  jms]
[ ./lib/emul/inherit_ports.c ]
Comment changes
[90/03/16  16:50:41  jms]

Mods for new task master
[89/12/19  16:44:00  jms]
[ ./lib/mach/error_codes.c ]
Comment changes
[90/03/16  16:51:31  jms]

Mods for new taskmaster interface
[89/12/19  16:15:50  jms]
[ ./lib/mach/errorlib.h ]
Comment Changes
[90/03/16  16:52:20  jms]

[89/12/19  16:16:56  jms]
[ ./lib/machobj/MachExternalObject.c ]
Bug Fixes and Cloneing support from Dan J.
[90/03/16  16:53:11  jms]
[ ./lib/machobj/MachExternalObject.h ]
Clone complete support from Dan J.
[90/03/16  16:54:11  jms]
[ ./lib/machobj/MachRemoteObject.c ]
Bug fixes from DPJ.
[90/03/16  16:55:22  jms]
[ ./lib/machobj/MachRemoteObject.h ]
Clone reset support from DPJ
[90/03/16  16:56:34  jms]
[ ./lib/machobj/empty_class.c ]
Waste the silly printfs
[90/03/16  16:57:13  jms]
[ ./lib/machobj/mach_object.c ]
Bug fixes from DPJ
[90/03/16  16:57:53  jms]
[ ./lib/us/Makefile ]
Mods for useing the objectified Task Master
[90/03/16  16:59:13  jms]
[ ./lib/us/access_table.c ]
Further mods for useing the objectified Task Master
[90/03/16  17:00:24  jms]

First objectified Task Master checkin
[89/12/19  16:49:04  jms]
[ ./lib/us/event_methods.c ]
Temporary version until Doug Orr checks in the real stuff.
[90/03/16  17:01:42  jms]
[ ./lib/us/tm_job_group_cat.c ]
Comment Change
[90/03/16  17:02:12  jms]

First objectified Task Master checkin
[89/12/19  16:18:12  jms]
[ ./lib/us/tm_job_group_cat_ifc.h ]
Misc bug fixes and comment changes.
[90/03/16  17:03:02  jms]

First objectified Task Master checkin
[89/12/19  16:18:44  jms]
[ ./lib/us/tm_methods.c ]
Signature corrections and comment changes
[90/03/16  17:03:48  jms]

first checkin
[89/12/19  16:18:56  jms]
[ ./lib/us/tm_task_cat.c ]
Comment changes
[90/03/16  17:04:36  jms]

First objectified Task Master checkin
[89/12/19  16:19:04  jms]
[ ./lib/us/tm_task_cat_ifc.h ]
Minor bug fixes and comment changes
[90/03/16  17:05:25  jms]

First objectified Task Master checkin
[89/12/19  16:19:43  jms]
[ ./local_include/us_ports.h ]
Mods for useing the objectified Task Master and TM->emul signal support.
[90/03/16  17:07:03  jms]
[ ./server/tm/Makefile ]
Mods for useing the objectified Task Master and TM->emul signal support.
[90/03/16  17:07:56  jms]
[ ./server/tm/test/test_driver.c ]
Stolen from lib/us/test
[90/03/16  17:09:05  jms]
[ ./server/tm/test/test_global.c ]
Stolen from lib/us/test
[90/03/16  17:09:48  jms]
[ ./server/tm/test/test_global.h ]
Stolen from lib/us/test and modified to test the taskmaster
[90/03/16  17:10:41  jms]
[ ./server/tm/test/test_main.c ]
Stolen from lib/us/test and modified to test the taskmaster
[90/03/16  17:11:10  jms]
[ ./server/tm/test/test_tm.c ]
Routines for testing task master feature. to be called from TestDriver
[90/03/16  17:12:05  jms]
[ ./server/tm/test/tm_post.c ]
New object created for testine task_master
[ ./server/tm/test/tm_post_ifc.h ]
New interface for new test object.
[ ./server/tm/tm_agency.c ]
Mods for useing the objectified Task Master and TM->emul signal support.
[90/03/16  17:13:00  jms]

Mods for object based task master.
[89/12/19  16:22:18  jms]
[ ./server/tm/tm_agency_ifc.h ]
Mods for useing the objectified Task Master
[90/03/16  17:13:48  jms]

First objectified Task Master checkin
[89/12/19  16:22:30  jms]
[ ./server/tm/tm_internal.h ]
Move stuff from tm_methods to here.
[90/03/16  17:14:34  jms]

Created for objectified TM
[89/12/19  16:22:39  jms]
[ ./server/tm/tm_job_group.c ]
Comment and agent fixes
[90/03/16  17:15:16  jms]

first object TM checkin
[89/12/19  16:22:57  jms]
[ ./server/tm/tm_job_group_agent.c ]
Misc bug fixes.
[90/03/16  17:16:01  jms]

First objectified Task Master checkin
[89/12/19  16:23:05  jms]
[ ./server/tm/tm_job_group_agent_ifc.h ]
Comment fixes
[90/03/16  17:16:35  jms]

First objectified Task Master checkin
[89/12/19  16:23:16  jms]
[ ./server/tm/tm_job_group_ifc.h ]
Comment and agent fixes.
[90/03/16  17:17:16  jms]

First objectified Task Master checkin
[89/12/19  16:23:37  jms]
[ ./server/tm/tm_main.c ]
Misc debugging code added
[90/03/16  17:18:39  jms]

first objectified checkin
[89/12/19  16:23:42  jms]
[ ./server/tm/tm_mapping.c ]
Strip out everything but the port mapping stuff.  Add some locking and cleanup
modularity some.
[90/03/16  17:19:49  jms]
[ ./server/tm/tm_mapping.h ]
New .h file to access functionality of tm_mapping.c
[90/03/16  17:21:45  jms]
[ ./server/tm/tm_task.c ]
Misc initial bug fixes.
[90/03/16  17:36:47  jms]

first checkin objectified version
[89/12/19  16:23:51  jms]
[ ./server/tm/tm_task_agent.c ]
Comment changes and agent fixes.
[90/03/16  17:37:28  jms]

Initial Submission.
[89/12/19  16:24:06  jms]
[ ./server/tm/tm_task_agent_ifc.h ]
Comment changes
[90/03/16  17:38:01  jms]

First objectified Task Master checkin
[89/12/19  16:24:31  jms]
[ ./server/tm/tm_task_group.c ]
Comment and locking fixes
[90/03/16  17:38:44  jms]

First objectified Task Master checkin
[89/12/19  16:24:46  jms]
[ ./server/tm/tm_task_group_ifc.h ]
Comment fixes
[90/03/16  17:39:15  jms]

First objectified Task Master checkin
[89/12/19  16:24:58  jms]
[ ./server/tm/tm_task_ifc.h ]
Comment and agent fixes
[90/03/16  17:40:03  jms]

first checkin object based TM
[89/12/19  16:25:22  jms]
[ ./server/tm/tm_user_task_ifc.h ]
Comment fixes
[90/03/16  17:40:44  jms]

First objectified Task Master checkin
[89/12/19  16:27:20  jms]
[ ./server/tty/Makefile ]
Lib fix for i386/tahoe land
[ ./server/tty/i386_mach/devnum.h ]
First working version for i386.  Some entries facked because
we didnn't have a good answer. (sic 99)
[ ./utils/startup.sh ]
Mods for useing the objectified Task Master and Pipe server call fix.
[90/03/16  17:44:13  jms]
    
    
    
==========================================================================
   ***** US Version U19  (dorr) *****
    
    
*** This release (started by Doug) is being made by J. Mark Stevenson ***

New features:
--- --------

J. Mark Stevenson as new "Mr. emul-lib".

Doug created a "Clone Master" for registering/cloneing objects across
process forks.

The various sigXXX, kill, and getdirentries system calls are now done
by the multi-server system instead of by the underlying 2.5 Mach.
Ergo signal delivery is now done entirely in the emulated system.
Interuption of system calls is not yet fully supported.

Unix signals are supported as "events" composed of a "err, code, subcode"
in a way independent of the OS being emulated.

There is now a signal object that resides in the emulation process and
takes requests from the task master.  THE SIGNAL OBJECT METHODS SHOULD NOT
BE INVOKED DIRECTLY FROM THE EMULATION LIBRARY TO DELIVER SIGNALS!  This
should be done using the task master supplied methods "tm_event_to_task"
and "tm_event_to_task_group".  Direct communication occures with the signal
object only to cause an emulated process to wait until a "self signal"
arrives.

[IBMRT] Does not now work and never will work again

Bug fixes:
--- -----

[IBMRT]	  It has been fixed (made sterile).

Organizational changes:
-------------- -------

This message is from Mark (and Dan), not Doug.  Doug is now with the
CHORUS organization.

Special notes:
------- -----
When Doug left he took the lock for this merge planning to release it
still using most "HTG" signal stuff with some signal code he wrote
dissabled.  Dan and I (Mark) decided that we did not want to
release the lock with less functionality than the previous release.
Hence the delay.

At this time the "latest" area may be/is out of sync with the merge area.
Dan promises to fix this soon.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
19
[ ./lib/emul/emul_io.c ]
Add emul_getdirentries.
[90/07/06  14:41:04  jms]
[ ./lib/emul/emul_io.c ]
no change.
[90/03/01  14:43:42  dorr]

add clone_master support.  move fork support
into clone_master.  switch to DEBUG[012].
[90/01/11  11:30:45  dorr]
Add emul_getdirentries.
[90/07/06  14:41:04  jms]
[ ./TODO ]
More stuff.
[ ./lib/ux/ux_exception.h ]
No Further Changes
[90/07/09  10:32:40  jms]
[ ./include/dyn_object_methods.h ]
clean up and start to move towards a real naming
scheme (region_* ... mach_load_*, ...)
[90/02/23  14:31:53  dorr]
New region methods.
Changed names from xxx_prog to xxx_program and other cosmetic changes.
[90/07/06  13:26:02  jms]
[ ./include/event_methods.h ]
move event handlers into cthreads.
[90/03/22  13:52:52  dorr]

add event handler macros.
[90/03/01  14:30:53  dorr]

add thread argument.
[90/02/23  14:32:21  dorr]

Initial checkin.
[90/01/07  16:17:25  dorr]

created.
[89/08/11  14:57:27  dorr]

add event handler macros.
[90/03/01  14:30:53  dorr]

add thread argument.
[90/02/23  14:32:21  dorr]

Initial checkin.
[90/01/07  16:17:25  dorr]

created.
[89/08/11  14:57:27  dorr]
No Further Changes
[90/07/06  13:29:13  jms]
[ ./include/exception_error.h ]
Initial revision.
[90/01/07  16:17:48  dorr]

created.
[89/08/11  14:57:27  dorr]
No Further Changes
[90/07/06  13:30:04  jms]
[ ./include/list_methods.h ]
No idea
[90/07/06  13:36:55  jms]
[ ./include/sig_error.h ]
no change.
[90/03/01  14:31:12  dorr]

SIG -> UNIX_SIG.  This may be a mistake because
we want generic signal conditions ... stay tuned.
[90/02/23  14:32:57  dorr]

SIG() internal macro -> unix_sig_err() macro
[90/01/11  11:19:29  dorr]

iniitial revision
[90/01/07  16:18:12  dorr]

created.
[89/08/11  14:57:27  dorr]

no change.
[90/03/01  14:31:12  dorr]

SIG -> UNIX_SIG.  This may be a mistake because
we want generic signal conditions ... stay tuned.
[90/02/23  14:32:57  dorr]

SIG() internal macro -> unix_sig_err() macro
[90/01/11  11:19:29  dorr]

iniitial revision
[90/01/07  16:18:12  dorr]

created.
[89/08/11  14:57:27  dorr]
No Further Changes
[90/07/06  13:37:37  jms]
[ ./include/signal_methods.h ]
add signal register and signal_reset methods
[90/03/01  14:31:56  dorr]

get rid of signal_deliver.  fix up signal_pause
and signal_return.
[90/02/23  14:36:40  dorr]

add signal_block(), signal_pause(), signal_set_vec(),
signal_set_mask(), signal_set_stack().
[90/01/11  11:25:05  dorr]

Initial revison.
[90/01/07  16:18:27  dorr]
Add child_info and self signaling sync.
[90/07/06  13:39:28  jms]
[ ./include/tm_methods.h ]
Add emulation "emul_status" value and manipulation.
[90/07/06  13:41:13  jms]
[ ./lib/emul/Makefile ]
do machdep_htg changes (again).
[90/02/23  14:37:28  dorr]

nuke notify_procs.c complexio.h
[90/01/11  11:26:22  dorr]
Handle variable syscall numbers (e.g. getdirentries).
[90/07/06  13:42:51  jms]
[ ./lib/emul/at386/emul_machdep.c ]
Stack frame for sig_return fixed.  Emul_wait added. Misc bug fixes.
[90/07/06  13:47:01  jms]

move emul_entry definition into syscall_define.h
[89/12/18  16:08:39  dorr]
[ ./lib/emul/at386/emul_vector.s ]
Add "initial emulator stack" logic.
[90/07/06  13:48:09  jms]
[ ./lib/emul/bsd_emul_all ]
add:
 sigvec
 sigstack
 sigreturn
 osigcleanup
 
[90/02/23  14:38:01  dorr]

add kill.  more to come.
[90/01/11  11:26:43  dorr]
Add sigXXX, kill, and getdirentries emulations.
[90/07/06  13:50:03  jms]
[ ./lib/emul/bsd_syscalls.c ]
[90/02/23  14:38:38  dorr]
[ ./lib/emul/emul_all.c ]
fix dereference problem when adding prefix object to clone list.
[90/03/01  14:33:42  dorr]

get reid of emul_find_alert().  get rid of alerts.
[90/02/23  14:39:24  dorr]

Add initialization for signal stuff.
[90/01/11  11:28:55  dorr]
Add the signal_object and setup to listen for signals.  Also register more
objects with the clone_master.
[90/07/06  14:22:56  jms]
[ ./lib/emul/emul_base.h ]
get rid of alerts.  add a proc_object.
[90/02/23  14:39:48  dorr]

switch to DEBUG[012].  add emul_debug and syscall_trace stuff.
[90/01/11  11:29:34  dorr]
No Further Changes
[90/07/06  14:30:38  jms]
[ ./lib/emul/emul_basic.c ]
add signal_reset() after exec.
[90/03/01  14:34:07  dorr]

*_region -> region_*.  get rid of emul_reinit_proc.
change to exec for use with stack switch.
[90/02/23  14:40:50  dorr]
No Further Changes
[90/07/06  14:35:49  jms]
[ ./lib/emul/emul_init.c ]
Run emul_initialize on an emulation space stack, not the primary user stack.
[90/07/06  14:38:45  jms]
[ ./lib/emul/emul_misc.c ]
first working version for multiple cthreads.
[90/03/19  17:25:52  dorr]

restore port_cache_resetpush
[90/03/01  14:50:55  dorr]

add stack switch stuff to allocate a new emulation
stack (and accompanying cthread state).
[90/02/23  14:41:40  dorr]

add clone_master stuff.  
[90/01/11  11:31:42  dorr]
Add mechinism to run emul_initialize on a emulation space stack with args
comming in the "back door".
14a15,27
>  * Revision 1.31.1.4  90/03/19  17:25:52  dorr
>  * 	first working version for multiple cthreads.
>  * 
>  * Revision 1.31.1.3  90/03/01  14:50:55  dorr
>  * 	restore port_cache_resetpush
>  * 
>  * Revision 1.31.1.2  90/02/23  14:41:40  dorr
>  * 	add stack switch stuff to allocate a new emulation
>  * 	stack (and accompanying cthread state).
>  * 
>  * Revision 1.31.1.1  90/01/11  11:31:42  dorr
>  * 	add clone_master stuff.  
>  * 
96a110,111
> #include <cat_methods.h>
> #include <list_methods.h>
105a121,122
> boolean_t		emul_debug = TRUE;
> boolean_t		syscall_trace = TRUE;
106a124
> 
117a136,143
> 
> extern int	cthread_stack_size;
> 
> typedef struct {
> 	vm_offset_t	next;
> } * stack_t;
> stack_t		emul_stack_list;
> 
119c145
<  * Called once only at emulation library initialization time.
---
>  * Initial stack to run emul_initialize upon
120a147,219
> stack_t		emul_initialize_stack = (stack_t)0xcafebabe;
> 
> /*
>  *	emul_inital_stack_setup:  allocate an initial emulation space stack
>  *	to do system initialization in.  This routine
>  *	knows nothing about cthreads.
>  */
> mach_error_t
> emul_initial_stack_setup()
> {
> 	vm_offset_t		stack_addr;
> 	vm_size_t		stack_size;
> 	mach_error_t		err;
> 
> 	mach_init();	/* Get standard mach port set */
> 
> 	/* XXX x-machine dependency */
> 	dyn_object_get_stack_info(&stack_addr, &stack_size);
> 	err = vm_allocate(task_self(),&emul_initialize_stack,stack_size,TRUE);
> 	if (err) return (err);
> 
> 	emul_initialize_stack = (stack_t)(((char *)emul_initialize_stack) + stack_size - sizeof(char*));
> 	emul_initialize_stack->next = 0;
> 	return(ERR_SUCCESS);
> }
> 
> /*
>  *	emul_stack_alloc:  allocate a cthread-safe stack.  this routine
>  *	knows a LOT more about cthreads than it ought to.
>  *
>  * 	note:  this routine depends on creating a cproc structure with
>  *	a NULL thread_port.  so the emulation library can't use cthreads
>  *	facilites that require this port to be valid.
>  */
> stack_t
> emul_stack_alloc()
> {
> 	ur_cthread_t		ur;
> 	stack_t			stack;
> 	extern vm_offset_t	cproc_stack();
> 	extern ur_cthread_t	cthread_create_phantom();
> 
> 	ur = cthread_create_phantom();
> 
> 	stack = (stack_t)(cproc_stack(ur)-sizeof(vm_offset_t));
> 	stack->next = 0;
> 
> 	return stack;
> }
> 
> 
> /*
>  *	emul_cthread_init: initialize the cthreads packagae and get us a stack
>  *	to use while in the emul lib.  this routine knows LOTS more about
>  *	how cthreads works than it should
>  */
> emul_cthread_init()
> {
> 	/*
> 	 *  cthread_init will generate a new ur pointer at the base of OUR
> 	 *  stack.  grab the new pointer.  stick it
> 	 *  at the base of the stack we're going to use while we're in
> 	 *  here.
> 	 */
> 	cthread_init();
> 
> 	emul_stack_list = emul_stack_alloc();
> }
> 
> 
> /*
>  * Mechanisms for passing args to emul_initialize "under the table"
>  */
121a221,226
> static dyn_region_t	emul_init_shared_lib_regions;
> static ns_identity_t	emul_init_as_ident;
> static ns_token_t	emul_init_as_token;
> static int		emul_init_debug_level, emul_init_exec_debug_level;
> static char		**emul_init_argv;
> static int		emul_init_emul_mask;
124c229,230
< emul_initialize(shared_lib_regions,as_ident,as_token,debug_level,emul_mask)
---
> emul_set_initialize_args(shared_lib_regions,as_ident,as_token,
> 		debug_level,exec_debug_level,argv,emul_mask)
128c234,235
< 	int			debug_level;
---
> 	int			debug_level, exec_debug_level;
> 	char			**argv;
130a238,282
> 	emul_init_shared_lib_regions = shared_lib_regions;
> 	emul_init_as_ident = as_ident;
> 	emul_init_as_token = as_token;
> 	emul_init_debug_level = debug_level;
> 	emul_init_exec_debug_level = exec_debug_level;
> 	emul_init_argv = argv;
> 	emul_init_emul_mask = emul_mask;
> 	return ERR_SUCCESS;
> }
> 
> mach_error_t
> emul_get_initialize_args(shared_lib_regions,as_ident,as_tok
[90/07/06  14:42:51  jms]
[ ./lib/emul/emul_proc.c ]
register the initial thread.  fix a little debug output.
[90/03/01  14:52:26  dorr]

Debug -> DEBUG[012]
Add clone registration for newly forked task.  
Add unix process "status" logic".
Add emul_wait and friends.
[90/07/06  14:54:33  jms]
[ ./lib/emul/emul_proc.h ]
Add tm_job_group_obj.
[90/07/06  14:58:51  jms]
[ ./lib/emul/emul_signal.c ]
add htg_signal stuff for hybrid emulation.
[90/03/01  14:53:26  dorr]

add thread argument to event_post.  get rid of emul_signal_deliver().
[90/02/23  14:44:24  dorr]

first working signal delivery.
gut htg_kill and htg_killpg.  fill in signal_* routines.
[90/01/11  11:39:35  dorr]
signal_* routines filled in (no core dumped).
Add self signal syncronization.
Add emulation unix process  status logic
Add sig_pause.
Misc bug fixes.
[90/07/06  15:02:46  jms]
[ ./lib/emul/gen_htg.awk ]
Add explicit call numbers (vs order implicit)
[90/07/06  15:03:57  jms]
[ ./lib/emul/gen_syscalls.c ]
Add explicit sys call numbers (vs order implicit)
[90/07/06  15:04:52  jms]
[ ./lib/emul/htg.h ]
add an entry for those syscalls that change register state.
[90/02/23  14:45:37  dorr]
No Further Changes
[90/07/06  15:07:01  jms]
[ ./lib/emul/sun/Make.sun ]
make machdep_htg changes (again).
[90/02/23  14:46:01  dorr]
No Further Changes
[90/07/06  15:09:58  jms]
[ ./lib/emul/sun/emul_machdep.c ]
add htg_signal stuff.  get rid of emul_setup.
fill out exception translation stuff.
add exception handler stuff.
[90/03/01  14:57:24  dorr]

activate stack switch & exec code.  get rid of some stuff that
is not applicable about error returns.
[90/02/23  14:46:59  dorr]
Add emul_wait and frineds, as well as emul_sigreturn
[90/07/06  15:14:18  jms]
[ ./lib/emul/sun/emul_vector.s ]
turn on stack switching.
[90/02/23  14:47:29  dorr]
Add cade to call emul_initialize on emulation stack.  Clear "sig_unsafe"
turning deadlock into small race.
[90/07/06  15:15:57  jms]
[ ./lib/emul/syscall_table.h ]
Fix sysW to be same format as other sysX macros
[90/07/06  15:17:08  jms]
[ ./lib/load/Makefile ]
get rid of some debugging stuff.
[90/02/23  14:47:52  dorr]

temp.
[90/01/11  11:40:26  dorr]
No Further Changes
[90/07/06  15:17:38  jms]
[ ./lib/load/at386/dyn_thread.c ]
No Further Changes
[90/07/06  15:18:05  jms]
[ ./lib/load/dyn_aout.c ]
Fix latent section mapping bug
[90/07/06  15:19:08  jms]
[ ./lib/load/dyn_execute.c ]
no change (?!)
[90/02/23  14:48:14  dorr]
No Further Change
[90/07/06  15:19:45  jms]
[ ./lib/load/dyn_object.c ]
change some names.  return entry point when "executing"
program.  only chreate initial thread if thread port != NULL
clean up debug output.
[90/02/23  14:50:40  dorr]
Rename some methods and add region_is_in
[90/07/06  15:47:10  jms]
[ ./lib/load/dyn_object_ifc.h ]
*_region -> region_*
[90/02/23  14:51:15  dorr]
Change the names to protect the inocent
[90/07/06  15:48:18  jms]
[ ./lib/load/sun/dyn_thread.c ]
add get_entry() routine.
[90/02/23  14:51:48  dorr]
No Further Changes
[90/07/06  15:49:40  jms]
[ ./lib/mach/err_server.sub ]
add generic signal error.
[90/02/23  14:52:08  dorr]
No Further Changes
[90/07/06  15:50:10  jms]
[ ./lib/machobj/MachRemoteObject.c ]
add a little debug output.
[90/03/01  14:57:55  dorr]
No Further Changes
[90/07/06  16:04:23  jms]
[ ./lib/threads/Makefile ]
install cthreads.h. add exception handlers.
[90/03/22  13:54:58  dorr]

get rid of call* stuff.
[90/02/23  14:52:28  dorr]

null change.
[90/01/11  11:40:56  dorr]
Keep malloc.E.c around
[90/07/06  16:25:30  jms]
[ ./lib/threads/at386/thread.c ]
cthread_thread-stack and cthread_do_handler added
[90/07/06  16:30:11  jms]
[ ./lib/threads/call.c ]

add thread argument to cthread_call_self to make
it look like cthread_call_on.
[90/01/11  11:41:47  dorr]
No Further Changes
[90/07/06  16:42:30  jms]
[ ./lib/threads/cprocs.c ]
export create_cproc()
[90/03/19  17:26:29  dorr]
No Further Changes
[90/07/06  16:45:11  jms]
[ ./lib/threads/cthread_internals.h ]
No Further Changes
[90/07/06  16:48:19  jms]
[ ./lib/threads/cthreads.c ]
Dorr/mbj added cthread_create_phantom
[90/07/06  16:51:23  jms]
[ ./lib/threads/cthreads.h ]
add exception handlers.
[90/03/22  13:57:24  dorr]
No Further Changes
[90/07/06  16:53:58  jms]
[ ./lib/threads/exception.c ]
created.
[90/03/22  13:57:51  dorr]
No Further Changes
[90/07/06  16:54:32  jms]
[ ./lib/threads/fork.c ]
Unchanged
[90/07/06  17:04:45  jms]
[ ./lib/threads/ipc.c ]
No Further Changes
[90/07/06  17:06:21  jms]
[ ./lib/threads/malloc.c ]
Unchanged
[90/07/06  17:07:58  jms]
[ ./lib/threads/mig_support.c ]
No Further Changes
[90/07/06  17:10:49  jms]
[ ./lib/threads/options.h ]
No Further Changes
[90/07/06  17:11:43  jms]
[ ./lib/threads/stack.c ]
add cproc_stack().
[90/02/23  14:53:02  dorr]
Bug fix: Zero out the "round up" pages on stack allocation
[90/07/06  17:13:59  jms]
[ ./lib/threads/stack_base.c ]
Unchanged
[90/07/06  17:16:10  jms]
[ ./lib/threads/sun/call_md.c ]
<<<log message for ./lib/threads/sun/call_md.c>>>
[90/01/11  11:41:57  dorr]
Unchanged (do not know what doug did)
[90/07/06  17:17:49  jms]
[ ./lib/threads/sun/thread.c ]
Cproc startup for Sun MTHREAD implementation.
[90/07/06  17:20:11  jms]
[ ./lib/threads/sync.c ]
Header fixed
[90/07/06  17:23:00  jms]
[ ./lib/threads/time.c ]
Header Fixed
[90/07/06  17:25:16  jms]
[ ./lib/threads/unix.c ]
Header Fixed
[90/07/06  17:27:20  jms]
[ ./lib/us/Makefile ]
add alert object.
[90/01/11  11:42:22  dorr]
No Further Changes
[90/07/06  17:32:31  jms]
[ ./lib/us/access_table.c ]
Add task_master methods for modifying emulation process status
[90/07/06  17:33:36  jms]
[ ./lib/us/alert.c ]
first working version.
[90/01/11  11:43:03  dorr]
No Further Changes
[90/07/06  17:34:28  jms]
[ ./lib/us/alert_ifc.h ]
shuffle some comments.
[90/01/11  11:43:32  dorr]
No Further Changes
[90/07/06  17:35:51  jms]
[ ./lib/us/cat.c ]
add some debug output.
[90/03/01  14:58:42  dorr]
No Further Changes
[90/07/06  17:36:36  jms]
[ ./lib/us/clone_master.c ]
add some debug output.
[90/03/01  14:59:02  dorr]

fix clone_abort().  don't crap out on null objects.
[90/01/11  11:44:08  dorr]
No Further Changes
[90/07/06  17:37:11  jms]
[ ./lib/us/event_methods.c ]
Make Event Post asyncronous
[90/07/06  17:38:23  jms]
[ ./lib/us/mf_mem.c ]
raise a bunch of debug output levels.
[90/03/01  14:59:32  dorr]
No Further Changes
[90/07/06  17:39:21  jms]
[ ./lib/us/mf_mgr.c ]
raise a bunch of debug output levels.
[90/03/01  14:59:55  dorr]
No Further Changes
[90/07/06  17:40:09  jms]
[ ./lib/us/std_name.c ]
raise a bunch of debug output levels.
[90/03/01  15:00:41  dorr]
No Further Changes
[90/07/09  12:51:40  jms]
[ ./lib/us/tm_methods.c ]
Add methods for process status as supplied by the emulation lib.
[90/07/09  10:27:10  jms]
[ ./lib/ux/Makefile ]
get rid of machdep stuff (for now)
[90/03/01  15:02:33  dorr]

add machine dependent sources.
[90/02/23  14:53:43  dorr]
No Further Changes
[90/07/09  10:28:03  jms]
[ ./lib/ux/kio.c ]
Never change the underlying mach job groups.  Just remember job group values
here.
[90/07/09  10:31:11  jms]
[ ./lib/ux/kio_ifc.h ]
Add process group field to the object definition.
[90/07/09  10:32:01  jms]
[ ./lib/ux/uxsignal.c ]
move exception handlers into cthreads.
[90/03/22  13:58:36  dorr]

add event handlers.  add signal_register & signal_reset
for tracking primary thread.  change signal_*() to
be internal routines instead of real internal hanlders
fix a very stupid precidence bug.
[90/03/01  15:04:40  dorr]

add signal_return, signal_pause and signal_wait.
get rid of alerts. use alerts.  get working.
switch stacks.
[90/02/23  14:55:12  dorr]

get sun machdep to work.
[90/01/26  15:17:22  dorr]

first working version.
[90/01/11  11:45:03  dorr]
Enable emulated signals (vs htg signals)
Add logic to track events in the lives of child proceses as they arrive.
This is done via the code and subcode for the unix exception "sigchld".

Detect and handle as best as possible (die meaningfully) failures in the
emulation lib.  This does not include turning failures in syscalls into
the appropriate errno.

Many many bug fixes.

Handle sync. of self signaling.  Deal with kernel exceptions.

Set the object up for clone completion.
[90/07/09  10:41:30  jms]
[ ./lib/ux/uxsignal_ifc.h ]
move exception handlers into cthreads.
[90/03/22  13:59:40  dorr]

add event handler stacks.
[90/03/01  15:39:02  dorr]

add signal_return, signal_pause, signal_wait.
clean up staack switch. get rid of alerts.
[90/02/23  14:56:00  dorr]

move mask, handler and flags into unix sigvec.
execption_post -> event_post.  add signal_set_vec,
signal_set_stack, signal_pause and signal_wait.
[90/01/11  11:46:18  dorr]
Add child information and self sync. fields/methods to the object
[90/07/09  10:44:18  jms]
[ ./server/tm/Makefile ]
No more "USE_HTG_KILL"
[90/07/09  10:45:30  jms]
[ ./server/tm/tm_agency.c ]
Add mechinisms to deliver kernel exceptions
Add mechinisms to deliver "sigchld" to parents at the appropriate times
[90/07/09  10:49:04  jms]
[ ./server/tm/tm_agency_ifc.h ]
Adda field to keep the childs exception port.  A method for delivering kernel
exceptions.
[90/07/09  11:05:05  jms]
[ ./server/tm/tm_internal.h ]
Add methods to get a task from its ID (not a task cat) and to deliver kernel
exceptions.
[90/07/09  11:14:51  jms]
[ ./server/tm/tm_main.c ]
Formatting change
[90/07/09  11:18:05  jms]
[ ./server/tm/tm_task.c ]
Add emulation status manipulation methods.
Add parent notification logic.
Take out some HTG stuff
[90/07/09  11:21:02  jms]
[ ./server/tm/tm_task_group.c ]
No Changes
[90/07/09  11:21:53  jms]
[ ./server/tm/tm_task_ifc.h ]
Add emul_status field/methods
[90/07/09  11:23:44  jms]
[ ./server/tty/tty_signal.c ]
No Further Changes
[90/07/09  11:24:38  jms]
[ ./lib/emul/emul_misc.c ]
Fixed the log.

[ ./lib/emul/notify_procs.c ]

[ ./include/memory_object.h ]
Making defunct.

[ ./lib/ux/uxsignal.c ]
Cosmetic changes.
[ ./lib/emul/emul_proc.c ]
Reap 2.5 zombies only when needed.
[ ./lib/mach/Makefile ]
Find libmach.a along LPATH instead of using builtin path.
    
    
    
==========================================================================
   ***** US Version U20  (dpj) *****
    
    
New features:
--- --------

This is the release of the standalone 3.0 build environment, announced in a
previous message to the mach3 mailing list. Substantial portions of that
message are reproduced here, for archival purposes. The few differences from
the original plan are as follows:
	- libmach3 now includes all of libmach_sa
	- new crt0, which eliminates the need to call "mach_init_service()"
	  explicitly.
	- the pre-defined macro "$(LIBMACH3)" expands to the appropriate set
	  of default libraries. No need to list -libmach3_*, -lc, etc.
	  explicitly.
	- no libmach_sa and libthreads_sa in the US tree.

The new environment will be generally referred-to as "MACH3".


(1) Makefiles and configurations:

There are now two kinds of Makefiles in the source tree:
	- the "old" format, which includes "Make.inc"
	- the "new" format (a.k.a. "SSP"), which includes "Makefile-common".

Old format Makefiles are unmodified, and will continue to work as before.
They can only be used to compile components for the 2.5 environment. 

The new format has much simpler Makefiles, and matches closely the standards
defined for other groups at CMU and MtXinu. It allows each component to be
compiled in any of four different configurations: MACH3_SA, MACH3_US,
MACH3_VUS and MACH3_UNIX. Each Makefile must contain a line of the form
	CONFIGURATION = MACH3_XX
to specify the default configuration; this default can be overridden with a
"CONFIGURATION=MACH3_XX" argument on the command line for "make". For each
configuration, the "make" environment automatically supplies appropriate
"-I" flags to find the corresponding include directories, supplies a
"-DMACH3_XX=1" flag for conditional compilation, and defines "$(LIBMACH3)"
to be the appropriate set of libraries. Exactly one of the four MACH3_XX
conditionals should be defined for any compilation. In addition, "MACH3" is
always defined, for conditional compilation in code shared with source trees
outside the multi-server emulation world. 

MACH3_SA corresponds to components that must operate directly on top of the
3.0 kernel, with no access to UNIX traps, and no access to the other
services of the emulation system, such as the diag server, or the
authentication server. Examples of components operating in this mode are the
netmsgserver (needed to implement remote debugging and diagnostics), and the
Mach Shell itself.

MACH3_US is for components that must operate on top of the 3.0 kernel, with
no access to UNIX traps, but with access to all normal services of the
emulation system. Most "normal" servers should fall into this category.

MACH3_VUS ("virtual US") is for components that normally operate on top of
the 3.0 kernel, but have access to UNIX traps, as well as to the other
emulation services. Servers used for bootstrapping under the Mach Shell fall
into this category. The same configuration could be used to define a set of
emulation servers operating under another complete UNIX system such as the
single-server, or the 2.5 kernel as we operate today.

MACH3_UNIX corresponds to components that must be compiled and linked
entirely in a native UNIX or Mach 2.5 environment, with no access to the
services of the 3.0 kernel. I do not expect that this option will be much
used, but I have defined it here for completeness.

Beside the support for multiple configurations, the new "make" environment
also provides various other features, such as automatic enabling/disabling
of debugging, dealing with the new/old IPC interfaces, default rules for
most common operations, automatic cleaning of directories and recursion
through subdirectories. 

I expect that we will change each Makefile to this new format as we adapt
each component to operate in the 3.0 environment.  The files
"./utils/skel.Makefile.prog" and "./utils/skel.Makefile.lib" contain
examples of Makefiles to build either a set of libraries, or a set of
programs.


(2) Libraries:

The 3.0 kernel comes with a new version of libmach, called
"libmach_sa.a", which contains the stubs for access to the raw kernel
functions, and essentially nothing else. In a more or less standalone
environment, we need other functions, which fall into four broad
classes:
	- support functions normally provided by libc: bcopy, strcpy,
sprintf, malloc, etc...
	- support functions found in libmach under 2.5: mach_error,
netname_XXX, name_server_port, etc...
	- new functions useful for interacting with the 3.0 system:
access to the privileged host port, get-time, etc...
	- functions to access "US" services, normally found in
"libbnw" and "libserver": diag service, authentication service, hash
tables, etc...

I have grouped all those additional functions along with libmach_sa into a
single new library, called "libmach3". This library comes into four versions
corresponding to the four compilation configurations: libmach3_sa.a,
libmach3_us.a, libmach3_vus.a and libmach3_unix.a.

All mach3 library versions except libmach3_sa.a contain all the
functions previously found in libbnw and libserver, which should now
be obsolete.

The main new exported support functions for 3.0 are:
	- mach_privileged_host_port(): returns a send right for the "host
	  port", suitable for performing various system control operations.
	  This port is obtained from the standard kernel handoff mechanism,
	  or from a trap to the UNIX server if the former fails and the
	  caller happens to run under emulation.  If the latter also fails,
	  0 is returned.  If the "trap to UNIX server" technique is used,
	  the caller must run as "root", or be a member of group "kmem".
	- mach_device_server_port(): same as above, but returns the master
	  device port, suitable for opening raw devices.
	- mach_get_time(): read the current value of the system clock.
	  Only works if mach_privileged_host_port() succeeds.
	- mach_set_time(): set the value of the system clock. Same as above.

The version of libmach_sa included in all versions of libmach3 is compiled
with MACH_IPC_COMPAT enabled, to allow programs written with the old IPC
interface to continue to work. There is no need to access any library from
the pure kernel sources to link a standalone program in the multi-server
environment.

For libmach3_sa.a and libmach3_us.a, the "UNIX" portion comes from Paul
Roy's work, merged with the latest version of libc.a from MtXinu.  It
consists of all libc functions that do not, directly or indirectly, invoke
UNIX system calls. No floating-point support is provided. All programs in
the emulation system should eventually be modified to not require any UNIX
functions beyond this minimal set. At some point, somebody should probably
also look into replacing this UNIX code with some "free" (GNU?) versions,
but I have not worried about this so far.

For now, libmach3_vus.a and libmach3_unix.a do not actually contain
any code from libc.a; instead, every Makefile should use the macro
"$(LIBMACH3)" to refer to the appropriate set of libraries. Depending on the
configuration, this macro will expand to the correct version of libmach3,
along with any additional libraries that are needed but have not been merged
with it. A typical set of libraries would be:
	-lus -lthreads $(LIBMACH3)

Since most configurations of programs should not contain libc at all, and
since libmach3 contains a special version of "crt0", it is dangerous to use
"cc" to link programs. Instead, I recommend using "ld" and specifying
explicitly all the required libraries. Do not forget to use the "-e __start"
switch to get the correct entry point. The new-style Makefiles will do this
automatically.


(3) Include files:

There are four basic include directories in the MACH3 environment:

./mach_include_sa contains a snapshot of the standard kernel include files
from the pure kernel. There is no local RCS archive for these files. Any
changes on them must be performed in the pure kernel sources, not in
the multi-server sources. The Makefile in that directory know how to
generate a new snapshot, when desired. This should be a very rare occurrence;
the similar "./mach_include" snapshot for the 2.5 kernel files was in fact
only updated a couple of times over a two/three-year period.

./sa_include contains a few additional files needed by the standalone
libraries, independent of whether or not these libraries are used as part of
the multi-server emulation. It does have its own local RCS archives, and can
be used to "override" or "shadow" some files in ./mach_include_sa if
necessary.

./include contains all the include files required at the interface between
an emulation library (UNIX or otherwise), and the "generic" part of the
emulation system (e.g. servers and proxies).

./local_include contains all the other include files required for
compilation of the various servers and proxies, but which should not be
included by the emulation library itself.

For now, ./mach_include_sa does not contain any of the traditional
"UNIX" include files (signal.h, errno.h, ctypes.h, etc...), which are
present in ./mach_include. I believe that most uses of these files are
for the definition of the UNIX functions to emulate, and not for the
actual operating environment of the emulation servers themselves.
Therefore, I think they should be separate. Currently, we just pick
them up along the normal "CPATH" environment variable. We may want to
freeze a copy into our source tree later.

The old ./mach_include directory  remains in place, for use with the
MACH3_UNIX configuration.


(4) TTY and console output.

In an attempt to eliminate the problems created by programs that call
"printf()" or "fprintf()" in a standalone environment, I have placed
replacements in libmach3. Output from these functions can now be
re-directed to three independent channels:
	- a UNIX TTY, through a UNIX "write" trap, handled by
whatever UNIX emulation or kernel support is available.
	- a message to the diagnostics server, automatically and
transparently looked-up with the local netname service.
	- a printout directly on the kernel console device, when the
device_server_port can be acquired by the client.

Each version of libmach3 defines at startup time a specific default
output channel. Output can later be redirected with a call to
"mach3_output_unix()", "mach3_output_diag()" or
"mach3_output_console()", as appropriate. All output functions invoked
after such a call are directed to the new channel:

libmach3_sa: default is console. No other channels available.

libmach3_us: default is diag. Can be redirected to console.

libmach3_vus, libmach3_unix: default is unix. Can be redirected to
diag or console.

To maintain the current behavior if all components were relinked with
libmach3_vus to operate under 2.5, the servers would have to call
mach3_output_diag() as part of their initialization; support programs
such as "fsadmin" would operate correctly by default.

The default diag output goes to a local diag server, and is prefixed
with "NoName". When invoking mach3_output_diag(), the caller must
specify two arguments: the host name or IP address (in "x.y.z.t"
format) where the diag server is to be found ("127.0.0.1" for the
local server), and a string to be used as a prefix for all output
messages.

The scanf() and fscanf() functions produce an error message under
MACH3_US and MACH3_SA. They are present because they cannot easily be
removed without also removing sscanf().


(5) New IPC interface:

Starting with the XMK22 version, the 3.0 kernel exports the new IPC
interface defined by Rich Draves. Eventually, all system components will be
modified to use this interface, which incorporates some features (such as
"no-more-senders" notifications) needed for the correct operation of our
emulation system. However, for the time being, there is a "compatibility
mode" that allows programs using the old IPC interface to continue to
operate. To reduce the effort required to move over from the 2.5 to the 3.0
kernel, we are taking advantage of that compatibility package, and continue
to use our unmodified code for now.

To use this package, the conditional "MACH_IPC_COMPAT" must be defined
and equal to "1" when compiling files with the include files from
mach_include_sa. The new-style Makefiles will do this automatically.

The version of libmach_sa.a distributed with the "pure kernel" has
that package turned off and is therefore unusable. libmach3_sa.a,
libmach3_us.a and libmach3_vus.a all include a copy of the modules from
libmach_sa.a, with compatibility enabled. Additional modules have been added
to fill-in the blanks left by this standard compatibility package.

Finally, programs that have been linked with an old 2.5 version of
the Mach libraries may contain embedded "xxx_port_enable" traps. This
will simply not work at all, even with the compatibility package. Just
re-linking with a new version of libmach will eliminate the problem.


(6) No new MIG:

Except for the modules from libmach_sa.a themselves, no component in the
source tree is compiled with the new version of MIG. The current version of
MIG is found along the standard paths. The include files used from MIG have
been set-up accordingly.


(7) No new threads library:

Until the new threads library from the pure kernel is updated with our
changes for forking, all components of the multi-server system continue to
use the old version, compiled from ./lib/threads. The presence of the new
file ./sa_include/cthreads.h guarantees that all compilations pick-up the
appropriate definitions, regardless of the contents of
./mach_include_sa/cthreads.h. 

The routine "cthread_init()" in the local version of libthreads.a has been
modified to allow this package to operate with the pure kernel version of
crt0, which assumes the new threads package.


(8) Old libmach.a:

The old libmach.a built from ./lib/mach still exists, for the benefit of
all the components that are not yet using libmach3. However it has been
somewhat modified:

	- the file "compat.c", which implements port_enable/port_disable in
terms of port sets, has been removed and replaced with a modified version of
"new_mach_user.c" from the standard 2.5 sources. This is to allow modules to
be imported from newer releases of the 2.5 libmach.a, which have been
modified in the same way.

	- the special code to allocate memory in "emulation space"
("emul_memory.c" and co.) has been removed from libmach, since it will not
be included in libmach3. This function now belong in the sources for the
emulation library itself.

	- the code to translate error codes into strings is still there.
However, this code is duplicated in libmach3, so that any changed made in
libmach must be reflected in libmach3, or they will eventually be lost.


Bug fixes:
--- -----

Picked-up a fix from jms for correct garbage-collection of kernel (2.5)
zombies in the fork/exit/wait code in the emulation library.

Picked-up a fix from roy to pad the bottom of the initial thread's stack in
crt0, to avoid a fault with argument copying in MachObjects.

Fixed the Makefile for the emulation library to generate "emul_config.h" 
soon enough, so that the very first "build" from scratch in this directory
no longer fails.

The GNU version of cc does not correctly produce output on stdout with the
"-E" switch, if the "-MD" switch is also specified. Since this happens
naturally with the modified Makefile setup, the Makefiles in ./lib/threads
and ./lib/ttz have been modified to avoid the problem. For now, this means
that we do not generate dependency lists for files that are explicitly
pre-processed in this way.

The "umerge" script was not correctly updating the "latest" area when
brand-new subdirectories had been created as part of the merge. This should
be fixed (I'll know when this merge completes!). It also tries to remove a
few more trash files in the merge area (*LOG*, build.out, etc.).


Known bugs:
----- ----

The TTY server does not compile.

The NFS server does not work on a 386, due to a compiler problem with bit
shifting. The workaround is known, and will be applied shortly.


Organizational changes:
-------------- -------

With the new Makefile organization come new versions of ./Makeconf,
./Make.inc and ./Makefile, as well as a brand-new ./Makefile-common. This
last file is in fact generated from ./Makefile-common.m4, but it is
installed at the base of the source tree instead of the object tree. The
top-level Makefile knows how to re-generate it if needed, but this is not
done automatically at each system build, since any changes there almost
always require manual intervention anyway.

The standard way to create a new private shadow area is the following:
	- enter a "workon" shell for an appropriate project and branch,
	- execute "/afs/cs.cmu.edu/project/mach-2/src/latest/shadow_us.csh"
	  from the base directory of the shadow area,
	- execute "build -k bootstrap" to build everything from scratch.
The version of "shadow_us.csh" from the base of the source tree is the
correct one. There also used to be one in ./utils/shadow_us.csh, which has
not been used in years, was incorrect, and which I have finally removed.

The new version of "make" from MtXinu defines "$(machine)" and co. to be
"i386" instead of "at386" as was previously the case. Since this is becoming
the standard, I have renamed all the "at386" subdirectories in the RCS and
source trees to "i386". I have left symbolic links named "at386" behind,
for backward-compatibility. However, the "shadow_us" script does not create
those symbolic links in private shadow areas, and those links will
eventually be removed everywhere anyway. Users should exercise caution when
creating new 386-specific files or directories.

Similarly, the MtXinu "make" defines "sun3" instead of "sun" on a Sun 3.
However, since there are a lot of Sun 3 sources already out there, "sun"
will remain the standard designation at CMU for now.  Things have been
set-up so that when a "make" program is compiled at CMU from MtXinu sources,
it defines "sun" and not "sun3". Just in case, I have added symbolic links
named "sun3" in the appropriate locations in the RCS and source trees

The new Makefile technology requires that "make" always be invoked with the
"-m" flag, to cause it to always search machine-specific subdirectories
ahead of any generic directory. This can be accomplished automatically by
adding the specification
	build_makeflags		-mc
in each project description file used by "workon", "build", and co.
I have updated all the relevant files in
/afs/cs.cmu.edu/project/mach/lib/project. Beware if you have private project
descriptions.


Special notes:
------- -----

Thanks go to Paul Roy for doing most of the work to identify the required
libraries and include files for standalone operation, and putting them
together in the first place.

The following files are now obsolete, and have been removed ("defuncted"):
	./utils/Makefile.template	old-style Makefile.
	./utils/shadow_us.csh		we have been using ./shadow_us.csh
					for a long time...
	./lib/mach/compat.c		subsumed in new_mach_user.c

The system has been compiled and run on a 386 and a SUN 3.

This release is being made on a 386, with a new version of the RCS and bcs,
bci, bco, etc. tools, supporting the transition to RCS version 4. If you
need these tools, get in touch with me.
*** These modified tools are NOT in /afs/cs.cmu.edu/i386_mach/latest (yet).

*** Warning ***
There is quite a bit of confusion right now about various versions of the
"make" program. Some versions on the 386 define "$(MACHINE)" to be "i386"
instead of "I386", which is just plain incorrect. Other versions (all
systems) cannot parse the modified Make.inc file, even though they accept
the brand-new Makefile-common. The recommended versions of "make" are:
	386: a fresh copy of /afs/cs.cmu.edu/i386_mach/latest/bin/make.
	     Any older copy from that location is definitely wrong.
	Sun 3: the Facilities alpha release.
The version of "make" in the standard CMU I386 distribution is believed to
be OK, but you are taking your chances if you use it.

*** Warning ***
Do not attempt to access, create or modify any RCS archives in the
mach_include_sa area. See above for explanations.


    
    
    
==========================================================================
   ***** US Version U21  (dpj) *****
    
    
This release is just to fix one mistake I made in U20, which cannot wait
until I finish my other work.

Bug fixes:
--- -----

The Makefiles for libmach3_* were causing some files to be missing in all
versions except libmach3_unix.a.  This is because I was not planning on
actually building libmach3_unix.a for U20, but jms convinced me to do so
after I had already merged, built and tested everything. I had to slightly
alter ./lib/mach3/mach3/Makefile for MACH3_UNIX, and of course I broke the
other configurations in the process. This is yet another proof that whenever
you think you are smarter than the system, you're wrong...!

I also polished the two Makefile templates a bit
(./utils/skel.Makefile.{lib,prog}), after suggestions by jms, who has been
using them.

    
    
    
==========================================================================
   ***** US Version U22  (jjc) *****
    
    
New features:
--- --------

Added emulation of {get,set}itimer BSD system calls.

Bug fixes:
--- -----

Picked up Mark Stevenson's fixes to osigcleanup(), so signals will work 
correctly on the Sun 3.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
22
[ ./include/timer.h ]
Created.
[90/07/19            jjc]
[ ./include/tm_methods.h ]
Added methods for interval timer.
[90/07/19            jjc]
[ ./lib/emul/Makefile ]
Added emul_time.c to list of sources to compile.
[90/07/23            jjc]
[ ./lib/emul/bsd_emul_all ]
	Added {get,set}itimer.
	Uncommented out osigcleanup.
[90/07/23            jjc]
[ ./lib/emul/emul_all.c ]
Added call to emul_init_task_master() to initialize 
interval timer.
[90/07/23            jjc]
[ ./lib/emul/emul_time.c ]
Created.
[90/07/21            jjc]
[ ./lib/emul/sun/emul_machdep.c ]
Picked up Mark Stevenson's bug fixes to osigcleanup().
[90/08/07            jjc]
[ ./lib/mach3/mach3/errorlib.h ]
Picked up from Mark Stevenson for including in error_codes.c.
[90/08/07            jjc]
[ ./lib/us/access_table.c ]
Added methods for interval timer.
[90/07/19            jjc]
[ ./lib/us/tm_methods.c ]
Added methods for interval timer.
[90/07/19            jjc]
[ ./server/tm/timer.c ]
Created.
[90/07/19            jjc]
[ ./server/tm/tm_agency.c ]
Added methods for the interval timer to the class declaration
of tm_agency and added call to timer_init() to tm_agency_initialize().
Included timer module, since a class can't be split into more than one
file.
[90/07/19            jjc]
[ ./server/tm/tm_agency_ifc.h ]
Added methods for interval timer.
[90/07/19            jjc]
[ ./server/tm/tm_internal.h ]
Added methods for interval timer.
[90/07/19            jjc]
[ ./server/tm/tm_task.c ]
Added methods for interval timer.
[90/07/19            jjc]
[ ./server/tm/tm_task_ifc.h ]
Added methods for interval timer.
[90/07/19            jjc]
    
    
    
==========================================================================
   ***** US Version U23  (mbj) *****
    
    
New features:
--- --------

Updated tty_server to use new Task_Master interfaces.

Modified umerge.csh to support smaller release snapshots.  You now have the
option to snapshot only the src/<version> and the obj/@sys/<version>/release
directories instead of the entire src and obj hierarchies.

Bug fixes:
--- -----

Fix remote mach_object buffer size problem.  The io_write method was
specifying more output than the mach_object system was prepared to cope with.
Unfortunately, no one had tested remote io_writes when the change was made.

Don't hang on big tty output requests.

Put emul_init into release/bin where it belongs.

Fix broken version.o dependency rule in lib/emul/Makefile.

Fixed obsolete IBMRT and VAX references in umerge.csh and added I386.
Parameterized supported machine types to make future changes easier.

Organizational changes:
-------------- -------

Release snapshots now contain only sources and the obj/@sys/*/release
binaries by default.  For the released binaries to be useful, a complete
runnable system must reside there.  Hence it's no longer acceptable (if it
ever was!) to build necessary components (such as emul_init) in the object
areas rather than in the correct release area.

Special notes:
------- -----

This gives us back a working tty_server for the impure kernel.  Next I'll be
adding real name service methods for looking up ttys.  All this should be
relatively independent of and complimentary to the tty_server modifications
for the pure kernel which Paul Neves has done.

To run with the tty_server, do one of two things:

1.  By default the tty_server will bring up an xterm tty_server window named
    tty_server on $DISPLAY.  If you're running under X you shouldn't have to
    do anything special to make the tty_server work.  If you get "Can't Open
    display" messages most likely either your DISPLAY isn't set, or you
    haven't done the appropriate xhost command.

    A normal startup command like should look like:

	startup [-d2] [-f] filesystem_file

2.  You can explicitly have the tty_server use a specific BSD tty as the
    emulated /dev/tty by specifying it on the command line.  The tty_server
    will put it in raw mode and do async i/o on it, so it's best to either
    have nothing else using the tty, or have a long sleep running on it.

    A startup command line to use an explicit bsd tty (in this example,
    /dev/tty9Z) for /dev/tty should look like:

	startup [-d2] -t /dev/tty9Z [-f] filesystem_file

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
23
[ ./lib/emul/Makefile ]
Release emul_init to release/bin area.
[90/08/14  14:39:07  mbj]
[ ./lib/emul/emul_all.c ]
Move tty pgrp initialization to emul_init_more_io() because of order
dependency upon the Task_Master being initialized.
[90/08/14  14:41:38  mbj]
[ ./lib/emul/emul_misc.c ]
Put back emul_init_more_io().  The Task_Master must be initialized
before the tty pgrp can be.
[90/08/14  14:43:30  mbj]
[ ./lib/machobj/MachRemoteObject.c ]
Increased size of data buffers for building out arguments.
Yes, Dan, it's my log message, but it's your change.
[90/08/14  14:45:16  mbj]
[ ./server/tty/bsd_tty.c ]
Fix longstanding bug which forgot to simulate the transmit interrupt
after writes.  Also changed some printfs to debugging output.
[90/08/14  14:46:31  mbj]
[ ./server/tty/emul_xxx.c ]
Changed some printfs to debugging output.
[90/08/14  14:47:12  mbj]
[ ./server/tty/i386_mach/devnum.h ]
Changed the i386 device numbers to more closely match reality.
We're still making up numbers for CPU ptys since the mainline
doesn't yet have them.
[90/08/14  14:49:47  mbj]
[ ./server/tty/lock_xxx.c ]
Changed some printfs to debugging output.
[90/08/14  14:50:08  mbj]
[ ./server/tty/tty_signal.c ]
Converted to use new Task_Master interface.
[90/08/14  14:50:59  mbj]
[ ./utils/ubuild.csh ]
It was never used.  Now it never will be.
[90/08/14  14:51:42  mbj]
[ ./utils/umerge.csh ]
Support releases with just sources & release areas as well as the old
(space-consuming) full releases.  Use "-releaseall" to release
everything, or the old "-release" for just sources & the release areas.
[90/08/14  14:55:04  mbj]
[ ./utils/umerge.csh ]
Parameterize supported machine types using architectures csh variable.
[ ./utils/log-template.msg ]
Removed IBMRT and VAX references.  Added I386 references.
[ ./utils/umerge.csh ]
Fix typo in message.
    
    
    
==========================================================================
   ***** US Version U24  (mbj) *****
    
    
New features:
--- --------

Support source-only snapshots in umerge.csh.

Bug fixes:
--- -----

None.

Organizational changes:
-------------- -------

None.

Special notes:
------- -----

Snapshots of the obj/@sys/<version>/release trees are huge.  The code
to take them works, but the space savings is practically negligible
compared to a release with all the objects.  What we really need is a
clearer separation between what we run (e.g., task_master, ufs_server,
bsd_all.lib, STARTUP.fsadmin) and what we don't (e.g., lib*.a).

Anyway, the source snapshots are the most useful anyway since they give
us a well-behaved shadowing mechanism.  Given the space the objects
currently take, I suspect source-only snapshots will be by far more common.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
24
[ ./utils/umerge.csh ]
Support source-only releases and make them the default release type.
Continue supporting complete and obj/@sys/<version>/release releases.
The obj/@sys/<version>/release release type probably need to be
rethought.  The intent is to release just a runnable system, but it
currently releases a large volume of big libraries as well because of
how we have things organized.
    
    
    
==========================================================================
   ***** US Version U25  (roy) *****
    
    
New features:
--- --------

All servers can easily be built to run on either Mach 2.5 or Mach 3.0
(excluding the tty server and task master).

Servers support an option to force diagnostic output to the console 
rather than to the diag server.

Diag server takes an option to netname_checkin itself to a remote
netmsgserver thus allowing diagnostic output to be printed on
a machine different from the target multi-server system.

fsadmin program can connect to a remote name server thus allowing
remote testing of a multi-server system.

Makefiles for servers and the root of the tree use the new
Makefile-common technology.

Bug fixes:
--- -----

Several fixes in lib/mach3 to correctly implement printf and friends.


Organizational changes:
-------------- -------

Old Device server is no longer used (file server talks to kernel
directly).



******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
25
[ ./Make.inc ]
Device server no longer built.
[90/08/15  16:32:32  roy]
[ ./Makeconf ]
Moved defn of LOCAL_RELDIR here from Makefile-common.
[90/08/20  13:02:55  roy]
[ ./Makefile ]
Converted to use Makefile-common.


[ ./Makefile-common.m4 ]
Moved defn of LOCAL_RELDIR to Makeconf so that VPATH
can use it.
[90/08/20  13:10:24  roy]
[ ./lib/Makefile ]
First version.
[90/08/22  12:09:23  roy]
[ ./lib/emul/i386/emul_vector.s ]
Remove include of emul_vector.s.
[90/08/21  09:34:43  roy]
[ ./lib/mach3/libmach3_sa/Makefile ]
Slight change.
[90/08/21  11:09:50  roy]

Make install rule dependent on target.
[90/08/21  10:46:13  roy]
[ ./lib/mach3/libmach3_unix/Makefile ]
Slight change.
[90/08/21  11:10:26  roy]
[ ./lib/mach3/libmach3_us/Makefile ]
Slight change.
[90/08/21  11:08:18  roy]

Make install rule dependent on target.
[90/08/21  10:50:14  roy]
[ ./lib/mach3/libmach3_vus/Makefile ]
Slight change.
[90/08/21  11:06:30  roy]

Make install rule dependent on target.
[90/08/21  10:52:14  roy]
[ ./lib/mach3/mach3/Makefile-include ]
Added mach3_abort.
[90/08/14  12:28:45  roy]
[ ./lib/mach3/mach3/mach3_abort.c ]
No change.
[90/08/14  17:03:58  roy]
[ ./lib/mach3/mach3/mach3_filbuf.c ]
Prevent reading beyond eof.
[90/08/14  12:32:13  roy]
[ ./lib/mach3/mach3/mach3_findiop.c ]
Allocate static bufs for stdout, stderr.
[90/08/14  12:31:01  roy]
[ ./lib/mach3/mach3/mach3_flsbuf.c ]
Added mach3_init_diag().
[90/08/14  12:31:36  roy]
[ ./lib/mach3/mach3/mach_time.c ]
Added MACH3_UNIX impl.
[90/08/14  12:14:14  roy]
[ ./lib/mach3/mach_sa/Makefile-include ]
Added memory_object_server.o.
[90/08/14  12:33:09  roy]
[ ./lib/threads/Makefile ]
Remove cthreads.h before installing.
[90/08/20  17:55:35  roy]
[ ./lib/threads/stack.c ]
Constant stack size to avoid unix calls.
[90/08/14  12:12:19  roy]
[ ./lib/us/diag.c ]
Use vsprintf() to fill diag messages.
[90/08/14  11:59:53  roy]
[ ./lib/us/dir.c ]
Use mach_get_time() to get random mgr id.
[90/08/14  11:53:41  roy]
[ ./lib/us/fs_dir.c ]
Use mach_get_time() to get random mgr id.
[90/08/14  11:55:51  roy]
[ ./local_include/debug.h ]
Removed #define of printf.
[90/08/14  12:01:27  roy]
[ ./pkg/Makefile ]
First version.
[90/08/22  12:15:04  roy]
[ ./server/Makefile ]
First version.
[90/08/22  12:04:49  roy]
[ ./server/as/Makefile ]
Converted to new makefile structure.
[90/08/20  16:06:45  roy]
[ ./server/diag/Makefile ]
Change install.
[90/08/17  13:34:23  roy]

Converted to new makefile structure.
[90/08/15  16:04:21  roy]
[ ./server/diag/diag_main.c ]
Use mach_error().
[90/08/15  16:03:36  roy]
[ ./server/name/Makefile ]
Change install.
[90/08/17  13:14:42  roy]

Converted to new makefile structure.
[90/08/14  12:39:12  roy]
[ ./server/name/name_init.c ]
No change.
[90/08/17  13:15:02  roy]

No change.
[90/08/15  16:01:56  roy]

Added -console option.
[90/08/14  12:40:20  roy]
[ ./server/nfs/Makefile ]
Converted to new makefile structure.
Reset history.
[90/08/20  12:54:52  roy]
[ ./server/nfs/nfs_main.c ]
Added -console option.
[90/08/20  12:54:00  roy]
[ ./server/pipe/Makefile ]
Converted to new makefile structure.
Reset history.
[90/08/17  13:56:29  roy]
[ ./server/pipe/pipe_init.c ]
Added -console option.
[90/08/17  13:57:01  roy]
[ ./server/ufs/Makefile ]
Change install.
[90/08/17  13:13:13  roy]

Converted to new makefile structure.
[90/08/14  12:41:25  roy]
[ ./server/ufs/ufs_alloc.c ]
Commented out calls to syslog for now.
[90/08/14  12:42:47  roy]
[ ./server/ufs/ufs_bio.c ]
Converted to use disk_read(), disk_write().
[90/08/14  12:43:24  roy]
[ ./server/ufs/ufs_xxx.c ]
No change.
[90/08/17  13:13:32  roy]

Device name can be with or without prepended "/dev/".
[90/08/17  11:53:54  roy]

No change.
[90/08/15  16:01:36  roy]

Implemented disk_open(), disk_read(), disk_write().
Added -console option.
[90/08/14  12:42:17  roy]
[ ./utils/Makefile ]
Converted to new Makefile structure.
Reset history.
[90/08/17  09:56:50  roy]
[ ./utils/STARTUP.fsadmin ]
Remove nfsmount of afs for now.
Reset history.
[90/08/17  09:57:41  roy]
[ ./utils/fsadmin.c ]
Added -h<host_name> option to allow connecting to
a remote name server.
[90/08/17  09:59:57  roy]
[ ./utils/startup.sh ]
Device server no longer used.
[90/08/15  18:18:51  roy]
    
    
    
==========================================================================
   ***** US Version U26  (mbj) *****
    
    
New features:
--- --------

The tty_server now exports a name server interface, allowing ttys to be
opened, etc. in the normal way.  Currently both emulated and 2.5 ttys are
entered into the name space.  The 2.5 ones are entered with the suffix "_htg"
in the name.  For instance:

	/dev/ttyp0		Emulated pty
	/dev/ttyp0_htg		Emulated name for underlying 2.5 /dev/ttyp0

Emulated ptys have been tested and appear to work correctly.


Bug fixes:
--- -----

Fixed bugs in disk_write and disk_open which clearly show that Paul Roy's new
filesystem code was never tested or even run.  The main fix was to change the
line:

	if ((*count = write(fd, blkno, size)) < 0) {
to:
	if ((*count = write(fd, addr, size)) < 0) {

this stopped the EFAULT errors and the like in the ufs server.

People, please, please, please!  Don't merge code that you haven't tested!  It
typically takes others much more time to fix your bugs than it would for you
to do so.  It turns what would otherwise be a simple merge into a magical
mystery tour through exciting bugs in previously working code.

Organizational changes:
-------------- -------

Moved tty agency code from lib/us to server/tty.


Special notes:
------- -----

There is currently no /dev/tty device.  This should be handled via special
prefix table entries on a per-process basis since /dev/tty is really just a
per-process device indirection mechanism.  When this is done the "first-tty-
opened-becomes-/dev/tty" semantics can also be emulated at the same time.

A distinction still needs to be made between agents which require actual
access to the tty and those which just need NSR_GETATTR access, in which case
no actual open need be done.  Currently, for instance, stat of a pty blocks
waiting for the other side to be opened.

The ttys are actually mounted in the directory /ttys with /dev simply being a
symlink to /ttys.  This will need to be rethought at some point.

I had to increase the length of the sleep in startup before fsadmin is run to
give the servers enough time to initialize themselves, avoiding the name-not-
checked-in errors that otherwise occurred.

The hacky initial tty port is still around.  This will shortly be removed in
favor of actually doing an open of the initial tty in the emulation library.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
26
[ ./lib/us/tty_agency.c ]
DEFUNCT -- Moved to server/tty
[ ./lib/us/tty_agency_ifc.h ]
DEFUNCT -- Moved to server/tty
[ ./lib/us/tty_init.c ]
DEFUNCT -- Incorporated into server/tty/tty_dir.c and tty_server.c
[ ./local_include/tty_internal.h ]
DEFUNCT
[ ./local_include/tty_name.h ]
DEFUNCT -- Moved to server/tty
[ ./server/tty/tty_tty.c ]
Dropped indirect /dev/tty support since it is really per-process state.
[ ./utils/ubuild.csh ]
DEFUNCT
[ ./Makefile ]
Picked up fixed version from Paul Roy left over from his merge.
[ ./TODO ]
Updated for tty_server changes.
[ ./lib/emul/emul_io.c ]
Corrected longstanding typo resulting in loops on failing opens.
[90/09/04  14:54:53  mbj]
[ ./lib/us/Makefile ]
Removed tty modules.  They're now in server/tty.
[90/09/04  15:03:58  mbj]
[ ./lib/ux/uxstat.c ]
Added TTY case.
[90/09/04  15:10:06  mbj]
[ ./server/tty/Makefile ]
Added tty_dir modules.  Moved tty_agency here.  Dropped tty_tty.
[90/09/04  15:14:58  mbj]

Added tty_dir modules.  Moved tty_agency here.  Dropped tty_tty.
[90/09/04  15:14:58  mbj]
[ ./server/tty/bsd_tty.c ]
Simplified name handling to distinguish between externally visible tty
names and internal (htg) names.
[90/09/04  15:16:46  mbj]
[ ./server/tty/cdevsw.c ]
Dropped indirect /dev/tty support since it is really per-process state.
[90/09/04  15:18:37  mbj]
[ ./server/tty/cdevsw.h ]
Dropped indirect /dev/tty support since it is really per-process state.
[90/09/04  15:19:23  mbj]
[ ./server/tty/tty_agency.c ]
Moved here from lib/us.
[90/09/04  15:20:19  mbj]
[ ./server/tty/tty_agency_ifc.h ]
Moved here from lib/us.
[90/09/04  15:20:50  mbj]
[ ./server/tty/tty_dir.c ]
Wrote it.
[90/09/04  15:21:16  mbj]
[ ./server/tty/tty_dir_ifc.h ]
Wrote it.
[90/09/04  15:21:46  mbj]
[ ./server/tty/tty_name.c ]
Added ns naming code.  Enter ttys backed by the underlying 2.5 system
with "_htg" appended to their names (e.g. /dev/ttyp0_htg).  Enter
emulated ptys under normal names.  Dropped indirect /dev/tty support.
[90/09/04  15:25:42  mbj]
[ ./server/tty/tty_name.h ]
Simplified name handling to distinguish between externally visible tty
names and internal (htg) names.  Moved here from lib/us.
[90/09/04  15:27:28  mbj]
[ ./server/tty/tty_server.c ]
Reworked for the addition of ns naming interface for ttys.
[90/09/04  15:29:04  mbj]
[ ./server/ufs/ufs_xxx.c ]
Fix bugs in disk_write and disk_open which clearly show that the new
code was never tested or even run.
[ ./utils/Makefile ]
Picked up fixed version from Paul Roy left over from his merge.
[ ./utils/STARTUP.fsadmin ]
Mount ttys at /ttys and point /dev to /ttys as well.
[90/09/04  15:30:13  mbj]
[ ./utils/startup.sh ]
Start Task Master earlier.  Wait longer for servers to initialize.
[90/09/04  15:31:10  mbj]
[ ./server/tty/Makefile ]
Converted to common Makefile structure.
    
    
    
==========================================================================
   ***** US Version U26  (mbj) *****
    
    
New features:
--- --------

The tty_server now exports a name server interface, allowing ttys to be
opened, etc. in the normal way.  Currently both emulated and 2.5 ttys are
entered into the name space.  The 2.5 ones are entered with the suffix "_htg"
in the name.  For instance:

	/dev/ttyp0		Emulated pty
	/dev/ttyp0_htg		Emulated name for underlying 2.5 /dev/ttyp0

Emulated ptys have been tested and appear to work correctly.


Bug fixes:
--- -----

Fixed bugs in disk_write and disk_open which clearly show that Paul Roy's new
filesystem code was never tested or even run.  The main fix was to change the
line:

	if ((*count = write(fd, blkno, size)) < 0) {
to:
	if ((*count = write(fd, addr, size)) < 0) {

this stopped the EFAULT errors and the like in the ufs server.

People, please, please, please!  Don't merge code that you haven't tested!  It
typically takes others much more time to fix your bugs than it would for you
to do so.  It turns what would otherwise be a simple merge into a magical
mystery tour through exciting bugs in previously working code.

Organizational changes:
-------------- -------

Moved tty agency code from lib/us to server/tty.


Special notes:
------- -----

There is currently no /dev/tty device.  This should be handled via special
prefix table entries on a per-process basis since /dev/tty is really just a
per-process device indirection mechanism.  When this is done the "first-tty-
opened-becomes-/dev/tty" semantics can also be emulated at the same time.

A distinction still needs to be made between agents which require actual
access to the tty and those which just need NSR_GETATTR access, in which case
no actual open need be done.  Currently, for instance, stat of a pty blocks
waiting for the other side to be opened.

The ttys are actually mounted in the directory /ttys with /dev simply being a
symlink to /ttys.  This will need to be rethought at some point.

I had to increase the length of the sleep in startup before fsadmin is run to
give the servers enough time to initialize themselves, avoiding the name-not-
checked-in errors that otherwise occurred.

The hacky initial tty port is still around.  This will shortly be removed in
favor of actually doing an open of the initial tty in the emulation library.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
26
[ ./lib/us/tty_agency.c ]
DEFUNCT -- Moved to server/tty
[ ./lib/us/tty_agency_ifc.h ]
DEFUNCT -- Moved to server/tty
[ ./lib/us/tty_init.c ]
DEFUNCT -- Incorporated into server/tty/tty_dir.c and tty_server.c
[ ./local_include/tty_internal.h ]
DEFUNCT
[ ./local_include/tty_name.h ]
DEFUNCT -- Moved to server/tty
[ ./server/tty/tty_tty.c ]
Dropped indirect /dev/tty support since it is really per-process state.
[ ./utils/ubuild.csh ]
DEFUNCT
[ ./Makefile ]
Picked up fixed version from Paul Roy left over from his merge.
[ ./TODO ]
Updated for tty_server changes.
[ ./lib/emul/emul_io.c ]
Corrected longstanding typo resulting in loops on failing opens.
[90/09/04  14:54:53  mbj]
[ ./lib/us/Makefile ]
Removed tty modules.  They're now in server/tty.
[90/09/04  15:03:58  mbj]
[ ./lib/ux/uxstat.c ]
Added TTY case.
[90/09/04  15:10:06  mbj]
[ ./server/tty/Makefile ]
Added tty_dir modules.  Moved tty_agency here.  Dropped tty_tty.
[90/09/04  15:14:58  mbj]

Added tty_dir modules.  Moved tty_agency here.  Dropped tty_tty.
[90/09/04  15:14:58  mbj]
[ ./server/tty/bsd_tty.c ]
Simplified name handling to distinguish between externally visible tty
names and internal (htg) names.
[90/09/04  15:16:46  mbj]
[ ./server/tty/cdevsw.c ]
Dropped indirect /dev/tty support since it is really per-process state.
[90/09/04  15:18:37  mbj]
[ ./server/tty/cdevsw.h ]
Dropped indirect /dev/tty support since it is really per-process state.
[90/09/04  15:19:23  mbj]
[ ./server/tty/tty_agency.c ]
Moved here from lib/us.
[90/09/04  15:20:19  mbj]
[ ./server/tty/tty_agency_ifc.h ]
Moved here from lib/us.
[90/09/04  15:20:50  mbj]
[ ./server/tty/tty_dir.c ]
Wrote it.
[90/09/04  15:21:16  mbj]
[ ./server/tty/tty_dir_ifc.h ]
Wrote it.
[90/09/04  15:21:46  mbj]
[ ./server/tty/tty_name.c ]
Added ns naming code.  Enter ttys backed by the underlying 2.5 system
with "_htg" appended to their names (e.g. /dev/ttyp0_htg).  Enter
emulated ptys under normal names.  Dropped indirect /dev/tty support.
[90/09/04  15:25:42  mbj]
[ ./server/tty/tty_name.h ]
Simplified name handling to distinguish between externally visible tty
names and internal (htg) names.  Moved here from lib/us.
[90/09/04  15:27:28  mbj]
[ ./server/tty/tty_server.c ]
Reworked for the addition of ns naming interface for ttys.
[90/09/04  15:29:04  mbj]
[ ./server/ufs/ufs_xxx.c ]
Fix bugs in disk_write and disk_open which clearly show that the new
code was never tested or even run.
[ ./utils/Makefile ]
Picked up fixed version from Paul Roy left over from his merge.
[ ./utils/STARTUP.fsadmin ]
Mount ttys at /ttys and point /dev to /ttys as well.
[90/09/04  15:30:13  mbj]
[ ./utils/startup.sh ]
Start Task Master earlier.  Wait longer for servers to initialize.
[90/09/04  15:31:10  mbj]
[ ./server/tty/Makefile ]
Converted to common Makefile structure.
    
    
    
==========================================================================
   ***** US Version U27  (mbj) *****
    
    
New features:
--- --------

Do a real ns_resolve_obj and ux_open to open the emulation lib's initial tty.
Dropped support for hokey netname "/dev/tty" lookup and kio ttys since we're
now getting our ttys through legitimate channels.

The initial tty name is now passed into the emulation library by emul_init.
It can be specified three different ways:

    emul_init ...		Uses emul_init's terminal for emulated tty
    emul_init -xterm ...	Runs a slave xterm for emulated tty
    emul_init -t /dev/tty?? ...	Uses /dev/tty?? for emulated tty

Note that the "-t /dev/tty??" name is massaged to be "/dev/tty??_htg" by
emul_init before handing it off to the emulation library.  Stated
differently, knowledge of the mapping between bsd tty names and and tty_server
tty names is encapsulated in emul_init, and hidden from the emulation library.

Note that you can no longer specify "-t no" to startup since the initial
terminal is now given to emul_init rather than to the tty_server.  Among
other advantages, this now allows multiple emul_init'ed processes to be run
against the same servers with different controlling terminals.

So go ahead.  Live dangerously.  Run two or more simultaneous emulated
processes in different windows!

Bug fixes:
--- -----

Cleaned up emulation library initialization error handling to pay attention
to fatal errors.


Organizational changes:
-------------- -------

Moved slave_xterm into lib/server.


Special notes:
------- -----

Bach's prelude in C.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
27
[ ./server/tty/slave_xterm.c ]
DEFUNCT
[ ./lib/emul/Makefile ]
Dropped test_htg lines.
[90/09/07  11:08:54  mbj]
[ ./lib/emul/emul_all.c ]
Do a real ns_resolve_obj and ux_open to open the initial tty.
Dropped support for hokey netname "/dev/tty" lookup and kio ttys.
Return meaningful error codes from emul_init_io().
[90/09/07  11:13:16  mbj]
[ ./lib/emul/emul_basic.c ]
Return meaningful error codes from emul_init_proc().
[90/09/07  11:14:22  mbj]
[ ./lib/emul/emul_init.c ]
Provide the initial tty name to be opened to the emulation init code.
By default the initial tty is our ttyname.  It may also be allocated
via the -xterm switch or be explicitly specified with the -t switch.
This module does the mapping from /dev/tty* to /dev/tty*_htg names.
[90/09/07  12:02:18  mbj]
[ ./lib/emul/emul_misc.c ]
Accept the initial tty name passed in by emul_init. Clean up
initialization error handling to pay attention to fatal errors.
[90/09/07  11:21:44  mbj]
[ ./lib/server/Makefile ]
Moved slave_xterm to lib/server.
[90/09/07  11:23:42  mbj]
[ ./lib/server/slave_xterm.c ]
Generalize %t processing to expand tty name within argument strings.
[90/09/07  11:27:04  mbj]
[ ./server/tty/Makefile ]
Moved slave_xterm to lib/server.
[90/09/07  11:27:43  mbj]

Moved slave_xterm to lib/server.
[90/09/07  11:27:43  mbj]
[ ./server/tty/tty_server.c ]
Dropped hokey netname "/dev/tty" agent checkin.
[90/09/07  11:31:23  mbj]
[ ./utils/startup.sh ]
Dropped "-t no" option.
[90/09/07  11:33:46  mbj]
    
    
    
==========================================================================
   ***** US Version U28  (mbj) *****
    
    
New features:
--- --------

The tty_server now builds and runs under all of the configurations
MACH3_UNIX, MACH3_VUS, and MACH3_US.  Unadorned names such as /dev/console,
/dev/tty01, and /dev/ttyp1 refer to the underlying pure kernel objects or
emulated ttys (under MACH3_US and MACH3_VUS).  Names such as
/dev/console_htg, /dev/tty01_htg, and /dev/ttyp1_htg refer to the co-existing
BSD implementation's ttys (under MACH3_UNIX and MACH3_VUS).

The emul_init "-t ttyname" switch no longer appends "_htg" to the given name.
This allows "emul_init -t /dev/console /bin/csh" to use the pure kernel
console device, whereas "emul_init -t /dev/console_htg /bin/csh" will use the
single server's /dev/console device.

Added the "-S" switch to emul_init and tty_server for doing a task_suspend()
at startup.  Useful for debugging.

Made switch processing in emul_init and tty_server order independent.

Added file local_include/unix_include/sys/select_types.h.  This file supplies
select-specific types normally found in sys/types.h which are missing from
the pure kernel's version of sys/types.h.


Bug fixes:
--- -----

Fixed linker entry point name on SUN3 to be "start" instead of "__start".


Organizational changes:
-------------- -------

None.


Special notes:
------- -----

As of the moment, the tty_server believes that it it the sole user of the
pure kernel's physical devices.  In particular, this means that both the the
single server and the tty_server are contending for console reads.  Randy
has an idea for a special syscall to the single server telling it to stop
reading from the physical ttys which will alleviate this problem.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
28
[ ./server/device/device.h ]
Was interfering with mach_include_sa/device/device.h.
[ ./server/tty/lock_xxx.c ]
DEFUNCT -- Replaced by mach_synch.c.
[ ./server/tty/test/tty_name_xxx.c ]
Replaced by tty_name.c.
[ ./server/tty/test/tty_name_xxx.h ]
Replaced by tty_name.h.
[ ./lib/emul/emul_base.h ]
Dropped unused TTYServer conditionals.
[90/09/12  13:43:03  mbj]
[ ./local_include/debug.h ]
Made statement-like macros legal in all statement contexts.
[90/10/01  14:51:49  mbj]
[ ./local_include/macro_help.h ]
Added to US sources.
[90/10/01  14:52:21  mbj]
[ ./local_include/unix_include/sys/select_types.h ]
Supply select-specific types normally found in sys/types.h which are
missing from the pure kernel's version of sys/types.h.
[90/10/01  14:54:06  mbj]
[ ./server/tty/cdevsw.h ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
[90/10/01  14:59:27  mbj]
[ ./server/tty/sys/conf.h ]
Track single server changes.
[90/10/01  15:17:53  mbj]
[ ./server/tty/sys/ioctl.h ]
Paul Neves' pure kernel tty_server changes
[90/09/10  17:53:24  mbj]
[ ./server/tty/sys/param.h ]
Undefine spl*() macros defined by some machine/machparam.h files.
[90/10/01  15:19:39  mbj]
[ ./server/tty/sys/queue.h ]
Track single server changes.
[90/10/01  15:20:08  mbj]
[ ./server/tty/sys/synch.h ]
Paul Neves' pure kernel tty_server changes
[90/09/10  17:54:07  mbj]
[ ./server/tty/sys/tty.h ]
Track single server changes.
[90/10/01  15:22:28  mbj]
[ ./server/tty/sys/zalloc.h ]
Changed erroneous include of kern/macro_help.h.
[90/10/01  15:23:33  mbj]
[ ./server/tty/tty_agency_ifc.h ]
Change #include <vol_agency_ifc.h> -> #include <agency_ifc.h>.
[90/10/01  15:28:49  mbj]
[ ./server/tty/tty_features.h ]
Changed NCMUPTY to 32 to reflect reality.
Added NSERIAL and NPURE constants.
[90/10/01  15:30:54  mbj]
[ ./server/tty/tty_name.h ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
Moved NTTYS computation here from tty_name.c.
[90/10/01  15:34:53  mbj]
[ ./server/tty/uxkern/device.h ]
Corrected #if MACH3_US -> #if MACH3 conditional.
[90/10/01  15:41:24  mbj]
[ ./server/tty/uxkern/device_reply_hdlr.h ]
Paul Neves' pure kernel tty_server changes
[90/09/10  18:03:50  mbj]
[ ./server/tty/uxkern/device_utils.h ]
Paul Neves' pure kernel tty_server changes
[90/09/10  18:04:00  mbj]
[ ./server/tty/uxkern/import_mach.h ]
Removed incorrect mach/mach.h include.
[90/10/01  15:43:23  mbj]
[ ./Makefile-common.m4 ]
Merged-up to U25
[90/09/02  19:59:59  dpj]

Use explicit flags ahead of default for NROFFFLAGS and MIGFLAGS.
[90/08/29  06:06:57  dpj]

Fixed main entry point for SUN to be "start" and not "__start".
[90/08/22  12:48:36  dpj]

Added -lc to standard libs for MACH3_UNIX.
[90/08/15  14:22:17  dpj]

Fixed bug in Mig rules that was picking-up the whole list of
dependencies on the command line.
[90/08/13  10:15:12  dpj]
[ ./lib/emul/emul_all.c ]
Dropped unused TTYServer conditionals.
[90/09/12  13:38:21  mbj]
[ ./lib/emul/emul_init.c ]
Added ability to suspend emul_init with "-S" switch.
Made argument processing order independent.
Don't append "_htg" to explicitly specified tty names.
[90/10/01  14:49:06  mbj]
[ ./lib/emul/emul_signal.c ]
Added missing mach_object_dereference call.
[90/10/01  14:49:40  mbj]
[ ./server/device/device.c ]
Dropped defunct device.h include.
[90/09/21  17:11:54  mbj]
[ ./server/device/device_main.c ]
Dropped defunct device.h include.
[90/09/21  17:11:37  mbj]
[ ./server/tty/Makefile ]
Now able to build for any of MACH3_{UNIX,VUS,US} configurations.
Simplified building test programs (make target tests).
[90/10/01  14:56:45  mbj]

Made it work again under MACH3_UNIX after Paul Neves' pure kernel
tty_server changes.
[90/09/12  13:26:28  mbj]

Now able to build for any of MACH3_{UNIX,VUS,US} configurations.
Simplified building test programs (make target tests).
[90/10/01  14:56:45  mbj]

Made it work again under MACH3_UNIX after Paul Neves' pure kernel
tty_server changes.
[90/09/12  13:26:28  mbj]
[ ./server/tty/bsd_tty.c ]
Make it work under MACH3_VUS.
[90/10/01  14:57:51  mbj]

Added bsd_tty_find_tty and other tweaks to make it work again with
the newer single-server-derived tty driver files.
[90/09/12  13:18:35  mbj]
[ ./server/tty/cdevsw.c ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
[90/10/01  14:58:56  mbj]

Made it work again under MACH3_UNIX after Paul Neves' pure kernel
tty_server changes.
[90/09/12  13:21:57  mbj]
[ ./server/tty/cons.c ]
Paul Neves' pure kernel tty_server changes
[90/09/10  17:41:20  mbj]
[ ./server/tty/device_misc.c ]
Paul Neves' pure kernel tty_server changes
[90/09/10  17:49:35  mbj]
[ ./server/tty/device_reply_hdlr.c ]
Added #include <device/device_types.h>.
[90/10/01  15:05:28  mbj]
[ ./server/tty/device_utils.c ]
Paul Neves' pure kernel tty_server changes
[90/09/10  17:50:22  mbj]
[ ./server/tty/emul_xxx.c ]
Made it work under MACH3_US.
[90/10/01  15:06:21  mbj]
[ ./server/tty/libc_xxx.c ]
Added libc rindex() function.
[90/10/01  15:06:54  mbj]
[ ./server/tty/mach_synch.c ]
Dropped annoying nyi debugging printout.
[90/10/01  15:07:58  mbj]
[ ./server/tty/misc.c ]
Paul Neves' pure kernel tty_server changes
[90/09/10  17:51:48  mbj]
[ ./server/tty/queue.c ]
Changed erroneous include of kern/queue.h.
[90/10/01  15:08:50  mbj]
[ ./server/tty/test/libc_us_xxx.c ]
Things from libc which are missing under the MACH3_US configuration.
[90/10/01  15:24:17  mbj]
[ ./server/tty/test/test_pty.c ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
[90/10/01  15:25:14  mbj]

Brought up to date with current tty_server naming structure.
[90/09/12  13:25:37  mbj]
[ ./server/tty/test/test_tty.c ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
[90/10/01  15:25:55  mbj]

Made it work again under MACH3_UNIX after Paul Neves' pure kernel
tty_server changes.
[90/09/12  13:31:43  mbj]
[ ./server/tty/test/tty_select_xxx.c ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
[90/10/01  15:26:13  mbj]
[ ./server/tty/test/tty_syscall_xxx.c ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
Convert to use tty_name.h instead of hacked tty_name_xxx.h.
[90/10/01  15:26:52  mbj]
[ ./server/tty/tty.c ]
Correctly indirect through the d_tty cdevsw entry.
[90/10/01  15:28:15  mbj]
[ ./server/tty/tty_cmupty.c ]
Track single server changes.
[90/10/01  15:29:25  mbj]
[ ./server/tty/tty_io.c ]
Pass dev rather than ptr to linesw l_select procedure.
[90/10/01  15:32:10  mbj]
[ ./server/tty/tty_name.c ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
Moved ns_create code to tty_name_create.c
Moved NTTYS computation to tty_name.h.
[90/10/01  15:34:03  mbj]
[ ./server/tty/tty_name_create.c ]
Moved ns_create code here tty from tty_name.c.
[90/10/01  15:35:36  mbj]
[ ./server/tty/tty_pty.c ]
Track single server changes.
[90/10/01  15:35:55  mbj]
[ ./server/tty/tty_server.c ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
Added ability to suspend tty_server with "-S" switch.
Made argument processing order independent.
[90/10/01  15:38:05  mbj]

Made it work again under MACH3_UNIX after Paul Neves' pure kernel
tty_server changes.
[90/09/12  13:22:58  mbj]
[ ./server/tty/tty_signal.c ]
Added psignal() routine.
[90/10/01  15:38:51  mbj]
[ ./server/tty/tty_threads.c ]
Made it work under any of MACH3_{UNIX,VUS,US} configurations.
[90/10/01  15:39:34  mbj]

Made it work again under MACH3_UNIX after Paul Neves' pure kernel
tty_server changes.
[90/09/12  13:24:02  mbj]
[ ./server/tty/zalloc.c ]
Modified for out-of-kernel use.
[89/01/17            dbg]
[ ./shadow_us.csh ]
Correctly handle absolute paths for {,shadow_}{source,object}_base.
[90/10/01  15:48:46  mbj]
[ ./utils/Makefile ]
Added ${LIBCS} to LIBS so fsadmin will have ci, etc.
[ ./local_include/macro_help.h ]
Change #ifndef conditional from _KERN_MACRO_HELP_H_ to MACRO_BEGIN to
match cthreads.h and dlong.h.
[ ./utils/umerge.csh ]
Recognize core files as garbage.
    
    
    
==========================================================================
   ***** US Version US29  (dpj) *****
    
    
New features:
--- --------

(1) xkernel

Released the first version of the xkernel server for network services.
Almost all the code is inherited from the x-kernel from the University
of Arizona, but it is packaged as a Mach task using cthreads. It
interacts directly with the Mach 3.0 network device interface, through
a special x-kernel protocol module named "mach3_ether". The basic
structure is similar to the "XSIMUL" configuration, but uses Mach
services instead; it is called "MACH3". The sources are in
./pkg/xkernel. Version 1.1 of the RCS archives is the original
distribution from the University of Arizona; versions 2.1 and above
are the CMU/Mach modifications, with "MACH3_MODS" conditionals to mark
the differences. See the README file in the base directory for
details.

At this time, the standard server is configured with only the IP,
ICMP, UDP and ARP modules. A TCP module is provided, but is not
compiled by default. Only the ARP service has been seriously tested,
and it is the only service currently exported, through a simple Mig
interface. I plan to work on exporting more services to fully
implement emulated sockets, but I do not plan to do more work on the
internal protocol implementations themselves. There is a lot of
potential in that area, both in terms of performance and
functionality; see the file ./pkg/xkernel/TODO for a list of
suggestions.

All Makefiles for the xkernel package have been converted to follow
the standard Mach3 multi-server format. The standard server is built
in the subdirectory named "STD", with the default Makefile and
configuration files copied from the "mach3" directory.

The xkernel server will only work on a Mach 3.0 kernel. It should be
started as

	xkernel -I <interface> -i <own IP address> -g <gateway IP address>

where <interface> is the network interface name known to the pure
kernel device_open() function (e.g. pc0 on a 386 or le0 on a Sun 3);
<own IP address> is the IP address to be used for the local host in
"a.b.c.d" format; <gateway IP address> is the IP address of a IP
gateway on the local network, for forwarding of non-local packets.
Other switches are available for debugging; see the sources or execute
"xkernel -help" for details. The xkernel ARP service is exported
through the netname service, so either the netmsgserver or the snames
server must be running before starting the xkernel server.

The xkernel server can operate alongside a single-server UNIX
emulator, in which case both servers will simply get a copy of each
incoming network packet. Note that this implies that each server will
see the other's packets, and reject them; this may generate spurious
packets in the case of TCP.

When running under the single-server emulator, the xkernel server must
be started by a user running as "root", or a member of group "kmem" to
obtain access to the host and device ports.


(2) netmsgserver

Released two versions of the Mach IPC netmsgserver for operation in a
3.0 environment: netmsgserver_unix and netmsgserver_sa.

netmsgserver_unix contains the minimal fixes needed to run under a
single-server UNIX emulator. It uses TCP UNIX sockets for IPC
transmissions, and UDP UNIX sockets to replace the MACH_NET interface
from 2.5 (original fix from Joe Barrera). It is fully compatible with
the 2.5 version of the netmsgserver, and can itself run under a 2.5
kernel if desired. It accepts the same switches as the 2.5
netmsgserver; execute "netmsgserver_unix -help" for info on additional
debugging switches.

netmsgserver_sa does not use any UNIX emulation support and can run
standalone directly under the 3.0 kernel. It uses the Mach 3.0 network
device interface for all network access, assisted by the xkernel
server for ARP service. The transport protocol module used for IPC
transmissions is the old delta-T from ancient netmsgservers.  It is
slower than the 2.5 standard (TCP), but it works. Delta-T support has
long ago been removed from the 2.5 netmsgervers, so special care must
be taken for cross-system communication (see below). This server
should be started as

	netmsgserver_sa -I <interface> -i <own IP address>

where <interface> is the network interface name known to the pure
kernel device_open() function (e.g. pc0 on a 386 or le0 on a Sun 3)
and <own IP address> is the IP address to be used for the local host
in "a.b.c.d" format. Other switches are available for debugging; see
the sources or execute "netmsgserver_sa -help" for details. The
xkernel server must be started after netmsgserver_sa for correct
initialization. When running under the single-server emulator,
netmsgserver_sa must be started by a user running as "root", or a
member of group "kmem" to obtain access to the host and device ports.

To set-up communication between a node running Mach 2.5 and a node
running netmsgserver_sa, the 2.5 node must run netmsgserver_unix
instead of the standard 2.5 netmsgserver. The "transport_default"
parameter in netmsgserver_unix must be set to "1" (delta-T) by using a
NETMSG_CONFIG file, the "nmcontrol" utility or the new "nmprotocol"
utility. While the transport_default on the 2.5 node is set to
delta-T, it is not possible to communicate with other nodes using the
TCP transport protocol. transport_default can be restored to "TCP" by
setting its value to "7".

There is a separate RCS archive for the netmsgservers under the Mach
3.0 multi-server source tree in ./pkg/netmsg, to allow for easy
updates within the Mach 3 development effort. The original 2.5 sources
will shortly contain a "MACH3" branch to track the Mach 3 development,
but will not be directly modified. The current state of the sources
includes all known bug fixes, as well as the MtXinu modifications.

All Makefiles in ./pkg/netmsg have been converted to follow the
standard Mach3 multi-server formats. Unlike in the 2.5 sources, the
server is not built from within the "server" subdirectory. Instead,
there are two build subdirectories named "MACH3_UNIX" and "MACH3_SA"
corresponding to the two different configurations. These directories
contain Makefiles copied from the template in the "conf" subdirectory,
using VPATH to access the sources in the "server" subdirectory. It
should be possible to build netmsgserver_unix for architectures other
than I386 and SUN3, but this has not been tried.

Many utilities from the 2.5 netmsgserver are also provided and
installed in ./release/bin: nmcontrol, nmtime, nmtest, nmxlog,
nmprotocol,...


(3) malloc tracer

Created a new library with functions to trace memory allocation and
detect memory leaks through malloc/free. The sources are in
./pkg/malloc; there is a library (libmalloc.a), a shell script to
analyze the traces (mallck) and a manual page (mallck.1).  See the man
page for instructions about usage.

This package was derived from a similar package circulated on USENET,
but it uses the malloc/free functions from the Mach cthreads library
instead. See the man page for details.


(4) automatic installation

Added default install rules in Makefile-common to copy all targets
from PROGRAM, LIBRARIES, OTHERS, etc. to the appropriate release
directory as specified by IDIR. Removed specialized install rules in
many Makefiles.

All build targets are now installed automatically by default. To
disable installation of a particular target "foo", specify an explicit
rule for "foo.install" in the Makefile. To disable all installations
from a particular Makefile, do not define IDIR.

Additional default rules will probably be added shortly to support
more sophisticated release procedures.

*** NOTE: all Makefiles should normaly always define an appropriate
IDIR variable. These definitions had been removed in some Makefiles to
satisfy special installation rules. Don't do that anymore.

Added several calls to "makepath" to improve bootstrap installation.


(5) diag system

Updated the diag class in ./lib/us to use the standard printf
functions from libmach3. This way, all diagnostics output goes through
a single channel, and can be redirected to various destinations (diag
server, console, UNIX stderr).

Updated libnw and the Makefile in ./lib/emul to operate correctly with
the new diag system. Updated fsadmin to direct its output to
stdout/stderr by default, and not to the diag server.

Updated the diag server to not lookup a secondary netmsgserver in the
local case. This allows the use of the "snames" server instead of the
netmsgserver.


(6) libmach3

Added numerous network-related functions, used by the xkernel and
netmsgservers.

Renamed all spin_lock operations to mach3_spin_lock, to avoid
conflicts with the cthreads version.

Added set_mach_privileged_host_port(), set_mach_device_server_port(),
mach_console_port() and set_mach_console_port(). Used in POE.

Added _exit(), cleaned-up abort() and _abort() calls.

Added exc_user.o in mach_sa section, from the pure kernel mainline.


(7) include files

Updated all files in mach_include_sa to track the state of the kernel
sources. Hopefully, this will soon be made unnecessary, through the
use of a common Mach 3 release area.

Created ./include/syscall_val.h by extracting some definitions out of
kern/syscall_emulation.h in the kernel sources, which is not exported
to applications.

Created ./local_include/unix_include/ioctl.h, needed by UNIX-specific
files in the emulation library. This should have a better solution,
once the pure kernel include files are cleaned-up.


[PMAX]

Picked-up branch jsb_XUS28, with a PMAX version of libmach3_sa and bug
fixes for PMAX version of mach3_syscall() in libmach3_vus.


Bug fixes:
--- -----

(1) libmach3

Added checks in mach3_flsbuf for write-only and string-based streams,
which should always return EOF.

Removed the initial message in mach3_init_diag(), which was sometimes
causing deadlocks.


(2) ./Makefile-common.m4

Renamed all internal variables to avoid conflicts with user-specified
variables in Makefiles: FOO -> _FOO_. 

Use explicit flags ahead of default for NROFFFLAGS and MIGFLAGS.

Fixed main entry point for SUN3 to be "start" and not "__start".

Added -lc to standard libs for MACH3_UNIX.

Fixed bug in Mig rules that was picking-up the whole list of
dependencies on the command line.


(3) ./pkg/sunrpc

Fixed librpc.a to deal more gracefully with socket descriptors greater
than 32 (i.e. abort or ignore them instead of crashing...). This
should help on the I386, but it has not been tested.


(4) libthreads

Picked-up changes from jms to avoid calls to getrlimit() and other
UNIX-specific functions.


(5) Other misc. bug fixes: see .BCSlog-TRUNK.


Organizational changes:
-------------- -------

(1) m3merge

This merge was performed using the "m3merge" script from the standard
/afs/cs.cmu.edu/project/mach/mach3/tools/bin/area, which is already
used for POE, UX and MK. The "umerge" script in ./utils is now
obsolete; it just calls "m3merge".


(2) support for new "make" program

Makefile-common, Makeconf and many Makefiles have been modified to
work with the new "make" program from MtXinu and CMU Facilities (alpha
release). All uses of the variables $(machine) and $(MACHINE) have
been replaced with $(target_machine) and $(TARGET_MACHINE), to follow
the convention now agreed-upon. The official names for the supported
machine types are I386 (i386) and SUN3 (sun3). Makeconf no longer
assigns the value of $(machine) to $(target_machine), etc. Various
files and subdirectories have been renamed to replace the "sun" or
"SUN" component with "sun3" or "SUN3"; symbolic links have been
established in the rcs, src/latest and src/merge trees for backward
compatibility.  The old "Makedep.at386" files are now named
"Makedep.i386". Just out of paranoia, most Makefiles now have
duplicate definitions for variables of the form "SUN_FILES" and
"SUN3_FILES".

The new "make" also requires the use of ".*" instead of "*" as a
regular expression in variable substitutions of the form
"${FOO/.*/&_bar}". To facilitate the conversion, all instances of such
subsitutions in all Makefiles now use the variable ${REGEXP_ALL}
instead of using the ".*" or "*" constructs directly (i.e.
"${FOO/${REGEXP_ALL}/&_bar}"). REGEXP_ALL is initialized to ".*" in a
single place, in Makeconf.


Special notes:
------- -----

Neither the xkernel nor the netmsgserver are started automatically by
the startup script, since they are not useful if not running the pure
kernel. They should be added after the 2.5 to 3.0 transition.


On a 3.0 kernel, the single-server UNIX, netmsgserver_sa and xkernel
all compete for the use of network packet filters; moreover, packet
filters are currently not garbage-collected when a server dies.
Unfortunately, the kernel has an internal limitation that normally
prevents a single incoming packet from being delivered to more than
two filters.  This can result in some filters systematically losing
packets. The current work-around is to patch the kernel to change the
variable "net_kmsg_ilist_min" from "2" to a higher value. I use "10",
but this wastes memory.


netmsgserver_unix happens to have many threads performing UNIX
functions, and runs into a resource shortage with the single-server
UNIX emulation library on the SUN3. The result is that it dies after
sending one message. This will be fixed in upcoming UX releases.
netmsgserver_unix appears to work fine on I386.


Due to a disk crash at an unfortunate time, I had to perform this
merge twice. As a result of the technique I used to recover my changed
files, many RCS log entries are duplicated. We'll clean them up as we
go in future releases. Computers never make mistakes...


******** CUT HERE ******** summary of log messages ******** CUT HERE ********

You've got to be kidding... There are 427 files in this merge; look at
.BCSlog-TRUNK if you really care about the gory details!


    
    
    
==========================================================================
   ***** US Version US30  (mbj) *****
    
    
New features:
--- --------

Fix minor problems discovered when building with the Mt Xinu (stump) user
environment on the i386.  I rebuilt the US tree from scratch on the i386 and
verified that it still works with the new build environment.

Bug fixes:
--- -----

Pick up setjmp definitions the legitimate way in cthreads.c.
Don't define struct rpcent twice if defined in netdb.h.

Special notes:
------- -----

Removed uses of "cc -ES" for preprocessing in favor of running "cpp" directly.
CMU introduced -ES to enable running cpp on files with arbitrary extensions.
It was used for things like "cc -ES -MD mach_traps.cs > mach_traps.s".
Mt Xinu's gnu cc driver currently only accepts a set of know extensions.  We
need to decide whether to have the driver upgraded to handle -ES or whether
to abandon -ES.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
30
[ ./lib/mach3/mach_sa/Makefile-include ]
Run "cpp" directly instead of using "cc -ES" CMU-ism.
[90/10/30  17:02:28  mbj]
[ ./lib/threads/cthreads.c ]
Pick up setjmp definitions from <setjmp.h>.
[90/10/30  17:02:52  mbj]
[ ./pkg/sunrpc/rpc/rpc_netdb.h ]
Define _RPCENT_DEFINED_ if declaring struct rpcent for the first time,
else if already defined don't redeclare it.  This allows us to
cooperate correctly with the declaration which now occurs in some
versions of /usr/include/netdb.h.  
[90/10/30  17:06:48  mbj]
    
    
    
==========================================================================
   ***** US Version US31  (dpj) *****
    
    
New features:
--- --------

Picked-up changes from neves@osf.org to clean-up or improve various
system calls. Highlights:
	- detect invalid I/O operations on tty's, pipes
	  and directories
	- new implementation for readv(), writev(), utimes(),
	  fchmod(), fchown()
The only difference from the original version (neves_emul_lib branch)
is that I replaced ns_set_attributes() with ns_set_times(). I'd like
to avoid having a single ns_set_attributes() method if possible.
Note: these changes should have been merged-in a while ago, but I got
confused as to their status after the disk crash of US29. My
apologies...


Added default definitions for LOCAL_RELDIR and REGEXP_ALL in
Makefile-common, just in case they are missing in Makeconf.


Added definitions for exit() and start_float() [SUN3] in libmach3 to
track changes in the pure kernel crt0.c.


Bug fixes:
--- -----

Fixed reference count bug in MachRemoteObject::msg_unpack(). Found by
loepere@osf.org.


Organizational changes:
-------------- -------

none


Special notes:
------- -----

none


******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
31
[ ./Makefile-common.m4 ]
Added default settings for LOCAL_RELDIR and REGEXP_ALL,
in case they are not found in Makeconf.
[90/11/08  22:14:38  dpj]
[ ./include/ns_methods.h ]
Replaced ns_set_attributes() with ns_set_times().
[90/11/08  22:15:23  dpj]

Added ns_set_attributes method.
[90/10/24  14:15:57  neves]
[ ./include/uxio_methods.h ]
Exported ux_readv and ux_writev methods.
[90/11/07  13:40:06  neves]

Added the ux_modify_protection method.
[90/10/17  12:32:44  neves]
[ ./lib/emul/bsd_emul_all ]
	Added readv, writev, and utimes entires.
[90/10/24  14:21:51  neves]

Added fchmod and fchown entries.
[90/10/17  12:34:55  neves]
[ ./lib/emul/emul_all.c ]
Ux_tty_obj variable is now initialized
to a uxio_tty object, making it possible
to detect invalid tty operations.
[90/10/17  12:38:12  neves]
[ ./lib/emul/emul_file.c ]
Replaced ns_set_attributes() with ns_set_times().
[90/11/08  22:16:01  dpj]

Added code for utimes system call emulation.
[90/10/24  14:25:04  neves]

Initialized local variable to prevent havoc.
[90/10/18  17:03:08  neves]

Added emul_fchmod and emul_fchown routines.
Collapsed [f]chmod, [f]chown, and chgrp routines.
Added code to detect invalid operations on uxio objects.
[90/10/17  12:42:53  neves]
[ ./lib/emul/emul_io.c ]
Added code implementing writev and readv syscalls.
[90/10/24  14:29:13  neves]

Added code to create appropriate uxio-like object.
[90/10/17  12:46:23  neves]
[ ./lib/emul/syscall_table.c ]
Added entries for readv, writev, and utimes syscalls.
[90/10/24  14:30:22  neves]

Added fchmod and fchown entry points.
[90/10/17  12:48:18  neves]
[ ./lib/mach3/mach3/mach3_exit.c ]
Enabled definition of exit() for all architectures under
MACH3_US and MACH3_SA, to track changes in the pure kernel crt0.c.
[90/11/08  22:17:11  dpj]
[ ./lib/mach3/mach_sa/Makefile-include ]
Added start_float.s for SUN3.
[90/11/09  22:11:41  dpj]
[ ./lib/machobj/MachRemoteObject.c ]
Fixed reference count bug in msg_unpack. Found by loepere@osf.org.
[90/11/08  22:17:56  dpj]
[ ./lib/us/access_table.c ]
Replaced ns_set_attributes() with ns_set_times().
[90/11/08  22:18:11  dpj]

Added a table entry for ns_set_attributes.
[90/10/24  15:31:13  neves]
[ ./lib/us/fs_agency.c ]
Replaced ns_set_attributes() with ns_set_times().
[90/11/08  22:18:34  dpj]

Added ns_set_attributes method.
[90/10/24  15:31:29  neves]
[ ./lib/us/fs_agency_ifc.h ]
Replaced ns_set_attributes() with ns_set_times().
[90/11/08  22:18:49  dpj]

Declared the ns_set_attributes method.
[90/10/24  15:31:40  neves]
[ ./lib/us/ns_methods.c ]
Replaced ns_set_attributes() with ns_set_times().
[90/11/08  22:19:01  dpj]

Added an ns_set_attributes method entry.
[90/10/24  15:31:56  neves]
[ ./lib/us/vol_agency.c ]
Replaced ns_set_attributes() with ns_set_times().
[90/11/08  22:19:16  dpj]

Added ns_set_attributes method.
[90/10/24  15:32:17  neves]
[ ./lib/us/vol_agency_ifc.h ]
Replaced ns_set_attributes() with ns_set_times().
[90/11/08  22:19:30  dpj]

Declared ns_set_attributes method.
[90/10/24  15:32:30  neves]
[ ./lib/ux/Makefile ]
Added uxio_pipe, uxio_dir, and uxio_tty.
[90/10/17  13:25:04  neves]
[ ./lib/ux/uxio.c ]
Added ux_readv and ux_writev methods.
[90/10/24  14:36:47  neves]

ux_ftruncate no longer ignores its length parameter.
[90/10/18  15:53:35  neves]

Added ux_modify_protection method.
Moved the ux_ioctl method to uxio_tty object.
[90/10/17  12:51:51  neves]
[ ./lib/ux/uxio_dir.c ]
Subclass of uxio representing directories.
[90/10/17  12:57:23  neves]
[ ./lib/ux/uxio_dir_ifc.h ]
Subclass of uxio representing directories.
[90/10/17  12:59:41  neves]
[ ./lib/ux/uxio_ifc.h ]
Added ux_readv and ux_writev methods.
[90/10/24  14:39:24  neves]

Added ux_modify_protection method.
Moved the ux_ioctl method to uxio_tty object.
Made instance variable obj publiclocal.
[90/10/17  12:53:54  neves]
[ ./lib/ux/uxio_pipe.c ]
Subclass of uxio representing pipes.
[90/10/17  13:11:25  neves]
[ ./lib/ux/uxio_pipe_ifc.h ]
Subclass of uxio representing pipes.
[90/10/17  13:19:47  neves]
[ ./lib/ux/uxio_tty.c ]
Subclass of uxio representing ttys.
[90/10/17  13:21:39  neves]
[ ./lib/ux/uxio_tty_ifc.h ]
Subclass of uxio representing ttys.
[90/10/17  13:23:11  neves]
[ ./lib/ux/uxstat.c ]
Fixed a typo causing stat to report incorrect 
file modification times.
[90/10/24  14:42:30  neves]
[ ./utils/skel.Makefile.lib ]
Removed example installation rules, since installation is now
taken care of in Makefile-common.
[ ./utils/skel.Makefile.prog ]
Removed example installation rules, since installation is now
taken care of in Makefile-common.
    
    
    
==========================================================================
   ***** US Version US32  (jms) *****
    
    
New features:
--- --------
This release contains changes required to run the taskmaster and 
emulation library on the mach3 pure kernel.

Setup to run on pure kernel by default (The earth moves).

The "startup" script now has a new switch "-e".  When given, kernel exceptions
are not redirected by the taskmaster but instead they "leak out".  The effect
of the is to permit sigtraps to get to gdb.

Bug fixes:
--- -----
mach/machine/vm_param.h NOT mach/vm_param.h !!!

Keep up with motion of the pure kernel.

Organizational changes:
-------------- -------

The US "Makefiles" have been modified so the a "MACH3_US" system is build by
default.  Notable exceptions to this are "diagserver" and the "ttyserver" 
which is built "MACH3_VUS" so that it can use ttys(windows) controlled by the
Mach3 uniserver (Don't really want to hang a extra tty off of my boxes).

More Makefiles changed to then new standard format.

The "lib/emul" area has had a number of subdirectries added to it in order to
build subportions of it a more organized fashion.
	bsd_htg:	htg stuff for the "MACH3_UNIX" version of the system
	emul_init_prog:	Where emul_init is built
	libu:		Lib for stuff used by emul_init and bsd_all.lib
	memory:		memory stuff for non-MACH3_UNIX versions (pulled from lib/mach)
	bsd_all:	the rest


Special notes:
------- -----
It was recently decided to spend no more time debuging the MACH3_UNIX (2.5)
version of the multi-server.  The system is structured such that it could be
build and all 2.5 dependent code has been put under compile switches (and should
continue to be in the future.)  There is a bug in the syscall calling sequence
on the i386 for MACH3_UNIX.  This release of the system has never been built
MACH3_UNIX on the sun3.

As a gesture of good faith, I am also copying binarys of gdb that
works on a uniserver mach to:
    /afs/cs.cmu.edu/project/mach-7/release/{i386_mach,sun3_mach}/latest/bin/gdb

There is an added feature to gdb.  It you can attach to a negative id value, it
will attach to the process with that machid as supplied by the machid server.

This version of gdb comes with many bugs and no guarantee of usefulness or
support.  I do actually use it productively.

The changes to gdb to cause it to work on the uniserver system was done by
Paul Roy and I.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
32
[ ./Makefile-common.m4 ]
Preserve debugging symbols in library. (ld: -x => -X)
[ ./include/tm_methods.h ]
Break the registration of forked tasks into to parts. "pre/post" because of
availability of pid/signal_obj at different times in MACH3_US
[90/11/19  22:22:33  jms]
[ ./include/tm_types.h ]
No change
[90/11/19  22:23:29  jms]

Create the TM_NO_MORE_TASK_IDS taskmaster error
[90/08/20  17:02:52  jms]
[ ./lib/emul/Makefile ]
Create bsd_all,bsd_htg,emul_init_prog,memory subdirectories to build the
different parts of the emulation library. Memory library contains memory code
for mach3_us only, part of libmach for mach3_unix.  Emul_init_prog is the
build location for the emul_init program.  Bsd_htg is a lib of the htg calls
for mach3_unix. Bsd_all is a lib for all the rest.

The default is now to build a MACH3_US emulation lib.
[90/11/19  22:28:54  jms]

Modify to new Makefile format.  Restructure to use subdirs to create sub
components (libu, bsd_all, bsd_htg, emul_init).  Build bsd_all.lib and
bsd_all.o here.
[90/08/20  17:05:20  jms]
[ ./lib/emul/bsd_all/Makefile ]
Change default to MACH3_US.  Misc KP.
[90/11/20  16:31:53  jms]
[ ./lib/emul/bsd_emul_all ]
Add: getpagesize (hack) and osigcleanup syscalls entries
[90/11/20  13:10:17  jms]
[ ./lib/emul/bsd_htg/Makefile ]
Add use of MACH3_CONFIGURATION env variable.  Misc format updates
[90/11/20  15:44:57  jms]
[ ./lib/emul/bsd_syscalls.cpp ]
Fix args to getpagesize
[90/11/20  17:02:56  jms]
[ ./lib/emul/emul_all.c ]
Merge some stuff from the trunk
[90/11/19  22:34:17  jms]

Prepare to merge some changes from US31
[90/11/12  16:34:33  jms]

About to add tty changes from trunk
[90/11/08  13:38:25  jms]

Merge in mbj/jjc changes
[90/08/20  17:15:23  jms]

Mach3 switch changes for the pure kernel version
[90/08/16  17:20:57  jms]
[ ./lib/emul/emul_base.h ]
No Change
[90/11/19  22:39:00  jms]

About to add tty changes from trunk
[90/11/08  13:38:36  jms]
[ ./lib/emul/emul_basic.c ]
Include mach/machine/vm_param.h not mach/vm_param.h
[90/11/19  22:40:15  jms]

About to add tty changes from trunk
[90/11/08  13:38:49  jms]
[ ./lib/emul/emul_init.c ]
Modify the "stop" switch to fit server norm.
[90/11/20  11:23:47  jms]

About to add tty changes from trunk
[90/11/08  13:38:54  jms]
[ ./lib/emul/emul_init_prog/Makefile ]
Change default to MACH3_US
[90/11/20  16:54:07  jms]
[ ./lib/emul/emul_io.c ]
Remove reference to "environ".  Merge some stuff from trunk. Misc.
[90/11/20  11:26:42  jms]

Prepare to merge some changes from US31
[90/11/12  16:34:44  jms]

About to add tty changes from trunk
[90/11/08  13:39:04  jms]

Change for pure debug printf stuff
[90/08/20  17:16:59  jms]
[ ./lib/emul/emul_memory.c ]
Add pure kernel memory allocation
[90/11/20  17:10:33  jms]
[ ./lib/emul/emul_misc.c ]
No Change
[90/11/20  11:29:38  jms]

About to add tty changes from trunk
[90/11/08  13:39:13  jms]

Merge in last mbj changes
[90/08/20  17:19:40  jms]

Restructure for running on pure kernel.
Add pure kernel code first pass
[90/08/16  17:19:05  jms]
[ ./lib/emul/emul_proc.c ]
Split forking into separate routines run in parent xor child for all configurations.
Add pure kernel forking.
[90/11/20  13:46:09  jms]

Setup for pure kernel execution by adding "MACH3_xxx" switches and arranging
child to start from a separate routine call as well as other "task_create"
changes in forking land.
[90/08/20  17:22:48  jms]
[ ./lib/emul/emul_signal.c ]
Bug Fix.
[90/11/20  12:54:39  jms]

Setup for pure kernel execution
Take out HTG_SIGNAL dook
[90/08/20  17:24:09  jms]
[ ./lib/emul/emul_time.c ]
No Change
[90/11/20  13:48:15  jms]
[ ./lib/emul/emul_user_init.c ]
Misc MACH3_US changes.  Minor.
[90/11/20  13:49:38  jms]
[ ./lib/emul/emul_user_lib.c ]
Use syscall_val.h not sys/syscall_emulation.h
[90/11/20  13:58:01  jms]
[ ./lib/emul/htg.h ]
NoChange
[90/11/20  13:58:34  jms]

Add a "htg_F" to get all of the info on the registers for the call to
"emul_fork"
[90/08/20  17:28:21  jms]
[ ./lib/emul/i386/emul_machdep.c ]
Modified to support pure kernel syscalls and forking.
[90/11/20  13:04:55  jms]

Add code to make emul_fork work under the pure kernel.
[90/08/20  17:06:50  jms]
[ ./lib/emul/i386/emul_vector.s ]
Add code caleed when starting a child to start it on the right way on the right
stack.
[90/11/20  13:06:48  jms]

Added child_fork to call the initial child routine after for forking.
[90/08/20  17:08:35  jms]
[ ./lib/emul/libu/Makefile ]
Change default to MACH3_US.
[90/11/20  16:28:29  jms]
[ ./lib/emul/memory/Makefile ]
Makefile for memory objects of !MACH3_UNIX
[90/11/20  17:06:06  jms]
[ ./lib/emul/sun3/emul_machdep.c ]
Enable pure kernel forking and syscalls.
[90/11/20  17:20:21  jms]
[ ./lib/emul/sun3/emul_vector.s ]
Conditionalize for MACH3_US
[90/11/20  17:19:13  jms]

Add changes for pure kernel syscalls and forking.
[90/11/20  14:06:27  jms]
[ ./lib/emul/syscall_common.c ]
Return val bugfixes
[90/11/20  14:07:22  jms]
[ ./lib/emul/syscall_table.h ]
NoChange
[90/11/20  14:07:53  jms]

New "fork" call mechinism
[90/08/20  17:29:32  jms]
[ ./lib/load/convert_to_macho.c ]
Add -stop switch
[90/11/20  14:09:07  jms]
[ ./lib/load/dyn_load_file.c ]
Take out logic to get path info from env.
[90/11/20  14:11:08  jms]

update to version compatible with cs5 include files
[89/05/15  12:14:28  dorr]
[ ./lib/mach3/unix/Makefile-include2 ]
Add ffs.c
[90/11/20  14:12:31  jms]
[ ./lib/mach3/unix/ffs.c ]
Needed it
[90/11/20  14:15:23  jms]
[ ./lib/machobj/Makefile ]
Make MACH3_US default configuration
[90/11/20  14:17:36  jms]
[ ./lib/us/Makefile ]
Make MACH3_US the default configuration.
Add use of MACH3_CONFIGURATION environment variable
[90/11/20  14:19:55  jms]
[ ./lib/us/access_table.c ]
ns_set_times access added.
[90/11/20  14:23:01  jms]

Prepare to merge some changes from US31
[90/11/12  16:34:52  jms]
[ ./lib/us/fs_dir.c ]
mach/machine.vm_param.h NOT mach/vm_param.h
[90/11/20  14:24:53  jms]
[ ./lib/us/mf_mem.c ]
mach/machine/vm_param.h NOT mach/vm_param.h
[90/11/20  14:26:05  jms]
[ ./lib/us/pager.c ]
Add new ipc "rights" fix from Paul Roy for pager_iop_get_port
[90/11/20  14:29:06  jms]
[ ./lib/us/testlib/Makefile ]
Grab from trunk
[90/11/20  14:30:40  jms]
[ ./lib/us/tm_methods.c ]
Change to pre/post register forked task
[90/11/20  14:35:43  jms]
[ ./lib/ux/Makefile ]
Mild Further Cleanup of NewVersion Makefile.  Default to MACH3_US.
[90/11/20  14:38:50  jms]

Prepare to merge some changes from US31
[90/11/12  16:35:00  jms]
[ ./lib/ux/kio.c ]
syscall_val.h NOT sys/syscall_emulation.h
[90/11/20  14:39:42  jms]
[ ./lib/ux/select.c ]
Use syscall_val.h NOT sys/syscall_emulation.h
[90/11/20  14:40:28  jms]
[ ./lib/ux/uxio.c ]
NoChange
[90/11/20  14:41:06  jms]

Prepare to merge some changes from US31
[90/11/12  16:35:05  jms]

Prepare to merge on stuff from trunk
[90/11/10  12:43:52  jms]
[ ./lib/ux/uxsignal.c ]
Misc PureKernel KP.
[90/11/20  14:42:43  jms]
[ ./server/name/Makefile ]
Make MACH3_US the default configuration.
Add use of MACH3_CONFIGURATION environment variable
[90/11/20  14:43:55  jms]
[ ./server/nfs/Makefile ]
Default to MACH3_VUS
[90/11/20  14:44:54  jms]
[ ./server/pipe/Makefile ]
Make MACH3_US the default configuration.
Add use of MACH3_CONFIGURATION environment variable
[90/11/20  14:45:36  jms]
[ ./server/tm/Makefile ]
Make MACH3_US the default configuration.
Add use of MACH3_CONFIGURATION environment variable
General Cleanup
[90/11/20  14:46:41  jms]

New makefile format woth CONFIGURATION
[90/08/20  17:34:41  jms]
[ ./server/tm/test/test_tm.c ]
Lobotomize this code
[90/11/20  14:47:17  jms]
[ ./server/tm/timer.c ]
Use pure kernel time mechinisms (from jjc)
[90/11/20  17:30:32  jms]
[ ./server/tm/tm_agency.c ]
Split forked task registration into pre/post forked forms.
Update listening for process death and kernel exceptions to work with new IPC.
Misc other 3.0 changes
[90/11/20  14:52:26  jms]

Generate task_ids when not supplied by emul_lib.
[90/08/20  17:39:29  jms]
[ ./server/tm/tm_agency_ifc.h ]
pre_regsiter_forked_task/post_regsiter_forked_task split
[90/11/20  14:53:53  jms]

Add "last_task_id" field to tm_agency_object
[90/08/20  17:40:37  jms]
[ ./server/tm/tm_main.c ]
Pull death watch code (move it to tm_agency.c.
Add -e switch.  Iff given, kernel exceptions are not managed by the task_master
and leak out of the Multi-server system.  Required for gdb breakpoints!
[90/11/20  14:57:09  jms]

take out testbed for pure kernel use.
[90/08/20  17:41:41  jms]
[ ./server/tm/tm_task.c ]
Modify task creation for the pre/post forms of registration of tasks.
[90/11/20  14:58:47  jms]

Put switches around MACH3_UNIX specific code
[90/08/20  17:42:40  jms]
[ ./server/tm/tm_task_ifc.h ]
Modify task setup for the pre/post fork forms of initialization.
[90/11/20  15:00:00  jms]
[ ./server/tty/Makefile ]
Make MACH3_VUS the default configuration.
Add use of MACH3_CONFIGURATION environment variable
[90/11/20  15:01:06  jms]
[ ./server/tty/bsd_tty.c ]
Get unix select_ttypes.h for MACH3_US not !MACH3_UNIX.
[90/11/20  15:06:26  jms]
[ ./server/ufs/Makefile ]
Make MACH3_US the default configuration.
Add use of MACH3_CONFIGURATION environment variable
[90/11/20  15:07:27  jms]
[ ./server/ufs/ufs_xxx.c ]
Add -stop switch (dpj)
[90/11/20  15:09:59  jms]
[ ./server/ufs/zalloc.c ]
mach/machine/vm_param.h NOT mach/vm_param.h
[90/11/20  15:10:54  jms]
[ ./utils/startup.sh ]
Add -e switch to allow kernel exceptions to pass through to gdb.
Add the "r" to the device name if missing for use by fisk.  Pure kernel expects
	device name without "r"
[90/11/20  15:13:18  jms]
    
    
    
==========================================================================
   ***** US Version US33  (jms) *****
    
    
New features:
--- --------
convert_to_macho (used by mlink to build the emulation lib) now works
on either a 2.[56] or 3.0 uniserver system independent of which of the systems
it was build under.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
33
[ ./lib/load/convert_to_macho.c ]
Fakeup map_fd so that the same executable works on both MACH3_UNIX and MACH3_US
systems.
[90/12/05  16:48:17  jms]
    
    
    
==========================================================================
   ***** US Version US34  (jms) *****
    
    
New features:
--- --------
smmap
munmap

Bug fixes:
--- -----

This release is mostly misc bug fixes from Paul Neves with minor additional
fixes by myself.

Special notes:
------- -----

Do Not Use "mach/vm_param.h" instead use "mach/machine/vm_param.h".  The
prior is out of date and does not exist on Suns.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
34
[ ./include/uxio_methods.h ]
Exported ux_map and ux_get_access methods.
[90/11/20  12:26:23  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:36:57  jms]
[ ./lib/emul/bsd_emul_all ]
 Added smmap and munmap entries.
[90/11/20  11:03:27  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:37:45  jms]
[ ./lib/emul/emul_basic.c ]
Fixed vm_allocate overlap problem in emul_obreak.
[90/11/19  18:06:34  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:37:50  jms]
[ ./lib/emul/emul_file.c ]
Initialized local variable for chmod problem.
[90/11/19  18:13:40  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:01  jms]
[ ./lib/emul/emul_io.c ]
Added emul_smmap and emul_munmap syscall code.
[90/11/20  12:28:34  neves]

Fixed the implementation of emul_fcntl.
[90/11/19  18:23:29  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:07  jms]
[ ./lib/emul/syscall_table.c ]
Added entries for smmap and munmap syscalls.
[90/11/20  11:08:36  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:14  jms]
[ ./lib/ux/ftab.c ]
Fixed an fcntl F_DUPFD max_open_file bug.
[90/11/20  13:21:41  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:20  jms]
[ ./lib/ux/uxio.c ]
Added ux_map and ux_get_access methods.
[90/11/20  13:35:15  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:24  jms]
[ ./lib/ux/uxio_ifc.h ]
Added ux_map and ux_get_access methods.
[90/11/20  13:36:10  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:29  jms]
[ ./lib/ux/uxio_pipe.c ]
Overrided superclass' ux_map implementation.
[90/11/20  14:01:13  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:33  jms]
[ ./lib/ux/uxio_pipe_ifc.h ]
Added ux_map method declaration.
[90/11/20  14:01:25  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:37  jms]
[ ./lib/ux/uxio_tty.c ]
Overrided superclass' ux_map implementation.
[90/11/20  14:25:12  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:40  jms]
[ ./lib/ux/uxio_tty_ifc.h ]
Added ux_map method declaration.
[90/11/20  14:25:34  neves]
Merge for Paul Neves of neves_US31
[90/12/06  17:38:44  jms]
    
    
    
==========================================================================
   ***** US Version US35  (jjc) *****
    
    
New features:
--- --------

1) Made {get,set}reuid, {get,set}regid, and {get,set}groups system calls work,
   rewriting lib/emul/emul_uid.c and lib/ux/uxident.c.

2) Added new methods to authentication server that will login a user, creating
   the user and group if they don't exist.  The invocations to these methods
   were added to ns_create_identity method in std_auth.

3) Made changes to lazily reauthenticate prefix table entries after changing
   identities, using an identity version counter that is incremented when you
   change ID (uid, gid, or groups) and an identity version stamp for each 
   prefix.  See lib/us/std_name.c for more details.

4) Defined user authids to start at 1000 and group authids to start at 2000.

5) Added command to fsadmin to set the authid map.

   a) Exported to fsadmin the fs_set_authid_map method which is used for 
      setting up a mapping between {u,g}ids and the authentication server's 
      ID space.

      NOTES:
      The method is exported through the fs_agency object which forwards to
      fs_access.
      To export this fs_set_authid_map to fsadmin, had to create fs_methods.h,
      fs_methods.c, add entry to access table, and add call to 
      fs_methods_setup() to fs_dir object.

   b) Added methods to check to see if the user is root or in a privileged
      group to Unix specific fs_access and OS independent std_prot object.
      Needed by fs_set_authid_map.


Bug fixes:
--- -----

*** Fixed bugs encountered in trying to get login to work ***

Fixed problem with the break system call failing because of random droppings
(eg. out of line messages) landing in its way by preallocating a contiguous
chunk of memory.

Fixed fs_auth_ns_translate_token() to setup group list correctly.  It didn't
copy all the groups into the group list.

[SUN3]

Fixed bug in fs_access_initialize() that tried passing a short pointer to
fs_authid_to_{uid,gid}() which expect an integer pointer.  Ran into this 
problem trying to get login working on the Sun 3.


Organizational changes:
-------------- -------


Special notes:
------- -----

Bumped into other bugs in getting login to work, but Paul Neves fixed most
of them.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
35
[ ./defs/auth.defs ]
Added as_create_token_group().
[90/12/05            jjc]
Added as_login_create().
[90/10/09            jjc]
[ ./include/fs_methods.h ]
Created.
[90/10/29            jjc]
[ ./lib/emul/emul_basic.c ]
Merged up to US34.
[90/12/05            jjc]
Changed emul_exec_load() to pre-allocate a chunk of memory
for obreak().
[90/11/21            jjc]
[ ./lib/emul/emul_uid.c ]
Removed some old debugging stuff.
[90/12/07            jjc]
Changed emul_setre{uid,gid} to return without doing any work
if uxident_set_re{uid,gid} indicate that the IDs are set
correctly already.
Also, modified them to tell the task master when the uids or
gids change.
[90/11/14            jjc]
Changed debugging statements.
[90/11/12            jjc]
Convert emulation errors to Unix ones before returning.
Changed emul_getgroups() to return number of groups gotten
if successful.
Cleaned up.
[90/09/14            jjc]
[ ./lib/us/Makefile ]
Merged up to US32.
[90/12/05            jjc]
Added fs_methods.o to list of object files to build.
[90/10/31            jjc]
[ ./lib/us/access_table.c ]
Merged up to US32.
[90/12/05            jjc]
Include fs_methods.h.
[90/11/12            jjc]
Forgot a comma.
[90/11/12            jjc]
Added fs_set_authid_map.
[90/10/29            jjc]
[ ./lib/us/fs_access.c ]
Fixed bug in fs_access_initialize() that tried to pass 
a short pointer to fs_authid_to_{uid,gid}() which expect
an integer pointer.
[90/12/03            jjc]
Defined USER_AUTHID and GROUP_AUTHID as starting user and group
authids, and use them to convert uids and gids to authids and
vice-a-versa by default.
Added fs_is_priv() which checks to see if the user is root or in a
privileged group.
Changed fs_set_authid_map() to re-evaluate priv_uid and priv_gid
after setting the authid map.
Include ns_internal.h for ns_get_cred_obj.
[90/10/29            jjc]
[ ./lib/us/fs_access_ifc.h ]
Added fs_is_priv() which checks to see if the user is root or in a
privileged group.
[90/10/29            jjc]
[ ./lib/us/fs_agency.c ]
Added test to fs_set_authid_map() to make sure that user is 
privileged before setting the authid map.
[90/10/30            jjc]
[ ./lib/us/fs_agency_ifc.h ]
Added fs_set_authid_map to list of exported methods above.
[90/10/30            jjc]
[ ./lib/us/fs_auth.c ]
Fixed fs_auth_ns_translate_token() to setup groups list
correctly.
[90/11/30            jjc]
[ ./lib/us/fs_dir.c ]
Merged up to US32.
[90/12/05            jjc]
Added call to fs_methods_setup() to setup_fs_dir_as_root().
[90/11/01            jjc]
[ ./lib/us/fs_methods.c ]
Created.
[90/10/29            jjc]
[ ./lib/us/std_auth.c ]
Changed std_auth_ns_create_identity() to call as_create_token_group()
which is the same as as_create_token() except that it will 
create any nonexistent groups that it encounters.
[90/12/05            jjc]
Changed ns_create_identity() to call as_login_create() to
login instead of as_login_priv().  as_login_create() will
create the user if he/she doesn't exist.
[90/10/09            jjc]
[ ./lib/us/std_name.c ]
Made changes to lazily reauthenticate prefix table entries after
changing identities:
	1) Created std_name_reauthenticate() using code for 
	   reauthenticating prefix table entries from ns_set_token().
	2) Added identity version counter to this module and added 
	   version stamp to prefix table entries, so we can tell when
	   an entry needs to be reauthenticated.
	3) Added call to std_name_reauthenticate() to ns_find_prefix().
	4) Initialize identity version counter in std_name_initialize()
	   and increment it in ns_set_token().
	5) Changed ns_set_{system,user,cache}_prefix() to update
	   identity version stamp when setting a newly authenticated
	   prefix.
[90/09/26            jjc]
[ ./lib/us/std_name_ifc.h ]
Added identity version counter.
[90/09/26            jjc]
[ ./lib/us/std_prot.c ]
Added ns_is_priv() to check to see whether the user is privileged.
[90/10/30            jjc]
[ ./lib/us/std_prot_ifc.h ]
Added ns_is_priv() which checks to see if the user is privileged.
[90/10/30            jjc]
[ ./lib/ux/uxident.c ]
Fixed bug in uxident_set_groups() where I forgot to use the
new groups to create the new identities.
[90/11/30            jjc]
Changed uxident_set_re{uid,gid} to return US_OBJECT_EXISTS
if the IDs are set already, so the caller can avoid doing
any work.
[90/11/14            jjc]
Fixed create_unix_identity() not to test for uid being added
to group list, since uid and gid spaces don't overlap.
[90/09/26            jjc]
Fixed uxident_setup() to initialize groups and ngroups.
Changed to keep track of only the real and effective identity objects.
Made routines to add and remove a group from the groups list.
Changed uxident_get_groups() to return number of groups.
Cleaned up.
[90/08/29            jjc]
[ ./lib/ux/uxident_ifc.h ]
Only keep track of two IDs (real and effective)
[90/08/29            jjc]
[ ./local_include/fs_internal.h ]
Added fs_is_priv().
[90/10/31            jjc]
[ ./server/as/c_auth.defs ]
Added cas_login_create() to login a user and create the user
if the user does not exist yet.
[90/10/09            jjc]
[ ./server/as/cas_procs.c ]
Created cas_create_group_rec() to make a group record and
insert it into the hash table.
Changed cas_login_create() to use it to create the user 
and/or group.
Changed cas_register_token() to take an additional argument
that says whether to create any nonexistent groups in the
given group list rather than give up.
[90/12/05            jjc]
Added cas_login_create() to login a user and create the user
and group if either does not exist yet.
[90/10/09            jjc]
[ ./server/as/clas_procs.c ]
Changed as_create_token() to call cas_register_token() with
an extra argument saying not to create nonexistent groups.
Created as_create_token_group() which is like as_create_token()
except that it will create any nonexistent groups that it
finds in the group list.
[90/12/05            jjc]
Added as_login_create() to login a user and create the user
if the user does not exist yet.
[90/10/09            jjc]
[ ./server/as/las_procs.c ]
Changed as_create_token() to call cas_register_token() with
an extra argument saying not to create nonexistent groups.
Created as_create_token_group() which is like as_create_token()
except that it will create any nonexistent groups that it
finds in the group list.
[90/12/05            jjc]
Added as_login_create() to login a user and create the user
if the user does not exist yet.
[90/10/09            jjc]
[ ./utils/fsadmin.c ]
Added set_authid_map command and included fs_methods.h.
Added call to fs_methods_setup() to setup fs_set_authid_map
method.
[90/10/31            jjc]
    
    
    
==========================================================================
   ***** US Version US36  (jms) *****
    
    
New features:
--- --------
Paul Roy made the UFS server faster, stronger, ....  Added some vnode stuff.

Bug fixes:
--- -----
Paul Neves did some misc. syscall bug fixes.

Special notes:
------- -----
Merry Christmas, Happy Holidays, Prosperious New Year.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
36
[ ./lib/emul/emul_signal.c ]
Fixed emul_sigsetmask - Too many arguments.
[90/12/17  14:59:26  neves]

Fixed default signal handlers to return proper exit code.
[90/12/17  14:55:04  neves]
merge for roy/neves @osf
[90/12/20  13:15:26  jms]
[ ./lib/emul/emul_time.c ]
Clear old timer in emul_setitimer for very first timer.
[90/12/17  17:47:00  neves]

Fixed emul_setitimer problem returning old timer values.
[90/12/17  15:41:36  neves]

Emul_getitimer now checks for null argument.
[90/12/17  15:28:37  neves]

Added check for invalid interval in emul_setitimer.
[90/12/17  15:20:45  neves]
merge for roy/neves @osf
[90/12/20  13:15:43  jms]
[ ./lib/emul/i386/emul_machdep.c ]
Fixed setup of a forked child's entry point.
[90/12/17  14:28:34  neves]
merge for roy/neves @osf
[90/12/20  13:16:00  jms]
[ ./lib/emul/i386/emul_vector.s ]
Fixed child_fork routine to complete fork syscall return.
Return values were not being set properly.
[90/12/17  14:28:51  neves]
merge for roy/neves @osf
[90/12/20  13:16:27  jms]
[ ./lib/mach3/mach3/mach3_flsbuf.c ]
Merge forward.
[90/12/15  14:19:36  roy]
merge for roy/neves @osf
[90/12/20  13:17:10  jms]
[ ./lib/us/Makefile ]
Added fs_methods.o.
[90/12/20  12:08:43  roy]

Really remove agency_mgr.o this time.
[90/12/15  15:05:07  roy]

Added vn_file.o, vn_dir.o, vn_symlink.o, vn_mgr.o, aot.o.
Removed fs_file.o, fs_dir.o, fs_symlink.o, agency_mgr.o.
[90/12/15  14:53:26  roy]
merge for roy/neves @osf
[90/12/20  13:17:38  jms]
[ ./lib/us/aot.c ]
Use new ENTRY_ macros.  Gather statistics on
destroying and cleaning.
[90/12/18  16:29:21  roy]

Initial revision.  
(Reuses some code from a previous module written by Dan Julin.)
[90/12/15  14:59:14  roy]
merge for roy/neves @osf
[90/12/20  13:18:51  jms]
[ ./lib/us/aot_int.h ]
Added more macros.
[90/12/18  16:24:56  roy]

Initial revision.
[90/12/15  15:01:40  roy]
merge for roy/neves @osf
[90/12/20  13:19:24  jms]
[ ./lib/us/fs_fio.c ]
Added io_pagein(), io_pageout().
[90/12/15  15:09:37  roy]
merge for roy/neves @osf
[90/12/20  13:19:33  jms]
[ ./lib/us/fs_fio_ifc.h ]
Added io_pagein(), io_pageout().
[90/12/15  15:10:13  roy]
merge for roy/neves @osf
[90/12/20  13:19:51  jms]
[ ./lib/us/pager.c ]
Add a new state to the pager object to fix a race 
condition between iop_deactivate() and mo_init().  This
functionality to be replaced with use of no-more-senders.
[90/12/19  11:51:54  roy]

Add statistics gathering.
[90/12/18  12:03:50  roy]

Initial state of a pager object is frozen.  Becomes ready
when it receives the memory_object_init() message.
[90/12/15  15:07:11  roy]
merge for roy/neves @osf
[90/12/20  13:20:10  jms]
[ ./lib/us/pager_ifc.h ]
Add a new state to paging objects.  Eventually, use of
no-more-senders will obviate this functionality.
[90/12/19  11:56:42  roy]
merge for roy/neves @osf
[90/12/20  13:20:41  jms]
[ ./lib/us/vn_dir.c ]
Added call to fs_methods_setup() in setup_fs_dir_as_root().
[90/12/20  12:06:28  roy]

Initial revision.
(Equivalent functionality to old fs_dir object.)
[90/12/15  15:12:57  roy]
merge for roy/neves @osf
[90/12/20  13:20:49  jms]
[ ./lib/us/vn_file.c ]
Destroy the io_mgr when file is being deactivated.
[90/12/18  12:06:03  roy]

Initial revision.
(Equivalent functionality to old fs_file object.)
[90/12/15  15:11:45  roy]
merge for roy/neves @osf
[90/12/20  13:21:12  jms]
[ ./lib/us/vn_mgr.c ]
Increase destroy rate.
[90/12/18  12:01:54  roy]

Initial revision.
(Equivalent functionality to old agency_mgr object.)
[90/12/15  15:16:00  roy]
merge for roy/neves @osf
[90/12/20  13:21:48  jms]
[ ./lib/ux/uxsignal.c ]
Fixed uxsignal_signal_set_mask: Too few arguments.
[90/12/17  16:17:31  neves]

Added code to prevent handlers for SIGKILL and SIGSTOP
to be set using the uxsignal_signal_set_vec routine.
[90/12/17  16:12:46  neves]
merge for roy/neves @osf
[90/12/20  13:16:38  jms]
[ ./local_include/io_internal.h ]
Added io_pagein(), io_pageout().
[90/12/15  14:45:42  roy]
merge for roy/neves @osf
[90/12/20  13:23:14  jms]
[ ./server/tm/timer.c ]
Undo last change and wait for the real fix.
[90/12/19  14:34:14  neves]

Do some interval timer cleanup.
[90/12/17  14:46:46  neves]

Fixed timer_abs_to_rel and timer_rel_to_abs under MACH3_US.
[90/12/17  14:37:09  neves]
merge for roy/neves @osf
[90/12/20  13:16:53  jms]
[ ./server/ufs/ufs_bio.c ]
Remove debug statements.
[90/12/18  11:57:46  roy]

Merge forward.
[90/12/15  14:20:19  roy]
merge for roy/neves @osf
[90/12/20  13:34:12  jms]
[ ./server/ufs/ufs_export.c ]
Merge forward.
[90/12/15  14:21:02  roy]
merge for roy/neves @osf
[90/12/20  13:28:05  jms]
[ ./server/ufs/ufs_xxx.c ]
Bump inode count again for now.
[90/12/18  11:56:59  roy]

Merge forward.
[90/12/15  14:20:37  roy]
merge for roy/neves @osf
[90/12/20  13:28:20  jms]
[ ./utils/Makefile ]
No change.
[90/12/15  14:13:18  roy]
merge for roy/neves @osf
[90/12/20  13:28:39  jms]
[ ./utils/fsadmin.c ]
Merge to 1.17.
[90/12/20  12:04:10  roy]

Merge forward.
[90/12/15  14:15:59  roy]
merge for roy/neves @osf
[90/12/20  13:29:03  jms]
[ ./lib/us/aot_ifc.h ]
Initial revision.
[90/12/15  15:00:32  roy]
merge for roy/neves @osf
[90/12/20  13:19:10  jms]
[ ./lib/us/vn_dir_ifc.h ]
merge for roy/neves @osf
[90/12/20  13:21:05  jms]
[ ./lib/us/vn_symlink_ifc.h ]
Initial revision.
[90/12/15  15:15:03  roy]
merge for roy/neves @osf
[90/12/20  13:22:40  jms]
[ ./lib/us/vn_mgr_ifc.h ]
Initial revision.
[90/12/15  15:16:22  roy]
merge for roy/neves @osf
[90/12/20  13:22:03  jms]
[ ./lib/us/vn_file_ifc.h ]
Initial revision.
[90/12/15  15:12:19  roy]
merge for roy/neves @osf
[90/12/20  13:21:22  jms]
[ ./lib/us/vn_symlink.c ]
Initial revision.
(Equivalent to old fs_symlink object.)
[90/12/15  15:14:21  roy]
merge for roy/neves @osf
[90/12/20  13:22:18  jms]
[ ./local_include/queue.h ]
Move this file to standard include directory.
[90/12/15  14:43:50  roy]
[ ./local_include/act_obj_internal.h ]
Initial revision.
[90/12/15  14:47:33  roy]
merge for roy/neves @osf
[90/12/20  13:22:50  jms]
    
    
    
==========================================================================
   ***** US Version US37  (jms) *****
    
    
New features:
--- --------
Mach ids can be "attached" to useing a negitive pid for the machid.
Must be running the machid server and the name server of your choice.

Bug fixes:
--- -----
Misc GDB fixes (to the GDB in multi server land) to do with task termination.

Note:
----
Construction of GDB is NOT integrated into the standard build in any way,
but the sources are now checked into the trunk.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
37
[ ./pkg/gdb/Makefile ]
JMS fixes
[91/01/15  10:54:17  jms]
[ ./pkg/gdb/Makefile.dist ]
JMS fixes
[91/01/15  11:07:55  jms]
[ ./pkg/gdb/m-i386mach.h ]
JMS fixes
[91/01/15  10:58:19  jms]
[ ./pkg/gdb/m-sun3mach.h ]
JMS fixes
[91/01/15  11:00:15  jms]
[ ./pkg/gdb/mach_os.c ]
JMS fixes
[91/01/15  11:02:06  jms]
[ ./pkg/gdb/sun3mach-dep.c ]
JMS fixes
[91/01/15  11:03:17  jms]
    
    
    
==========================================================================
   ***** US Version US38  (jjc) *****
    
    
New features:
--- --------

Multi-server runs on POE on the Sun 3 and 386.

Added support for POSIX thread specific data which just multiplexes a thread
"global" variable like cthread_data into many thread "global" variables
referenced by a "key".


Bug fixes:
--- -----

Fixed Makefile for libus to build libus_test.a by default.

Fixed emul_init to allocate a stack big enough to make C threads happy.
Cthreads expects its stack to be at least 3 pages long because it puts a red
zone between its current page and its proposed stack.

Fixed libload to probe to figure out how big the stack is.

Fixed tty_server.


Special notes:
------- -----

Currently, you must run the multi-server by hand because POE dies if you try
to run anything in the background from a shell script.

The US version of the tty_server works on POE.  The VUS version works too, but
has support for <tty>_htg which doesn't make sense to use on POE.

On the 386, a version of mount and umount that don't try to do NFS mounts is
needed to run the multi-server on POE.  The binaries are in 
/../plopov/mach_servers/{,u}mount.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
38
[ ./lib/us/Makefile ]
Uncommented out testlib subdirs, so libus_test.a will be
made by default for debugging purposes.
[91/03/22            jjc]
[ ./doc/status.txt ]
<<<log message for ./doc/status.txt>>>
[ ./lib/emul/emul_misc.c ]
Hardwired initial emulation stack to be 512K in 
emul_initial_stack_setup().
[91/02/05            jjc]
[ ./lib/load/i386/dyn_thread.c ]
Changed dyn_object_get_stack_info() to probe stack to determine
stack bottom and size.
[91/02/26            jjc]
[ ./lib/load/sun3/dyn_thread.c ]
Changed dyn_object_get_stack_info() to probe stack to determine
stack bottom and size.
[91/01/30            jjc]
[ ./lib/threads/Makefile ]
Changed COMMONFLAGS to define CTHREAD_DATA to turn on cthread_data
compatibility.
[91/03/18            jjc]
Added cthread_data.c which implements POSIX threads specification
for thread specific data to common sources.
[91/03/14            jjc]
[ ./lib/threads/cthread_data.c ]
For compatibility with cthread_data:
	1) Added routines, cthread_data and cthread_set_data,
	   which use the new routines in here.
	2) Defined CTHREAD_KEY_RESERVED as the key used to
	   access cthread_data.
	3) Changed the first free key from CTHREAD_KEY_NULL
	   to CTHREAD_KEY_FIRST.
[91/03/18            jjc]
Made simple implementation from POSIX threads specification for
thread specific data.
[91/03/07            jjc]
[ ./lib/threads/cthreads.h ]
For compatibility with cthread_data:
	1) Added private_data field to cthread structure
	   for use by POSIX thread specific data routines.
	2) Conditionalized old data field used by cthread_data
	   under CTHREAD_DATA for binary compatibility.
	3) Changed macros, cthread_set_data and cthread_data, 
	   into routines which use the POSIX routines for 
	   source compatibility.
	   Also, conditionalized under CTHREAD_DATA.
[91/03/18            jjc]
Added support for multiplexing the thread specific global
variable, cthread_data, using the POSIX threads interface
for thread private data.
[91/03/14            jjc]
[ ./lib/threads/stack.c ]
Changed stack_init() to probe for the bottom of the initial stack
instead of assuming the stack is 512K.
[90/01/21            jjc]
[ ./server/tty/mach_synch.c ]
Put priority level in C thread specific global variable.
[91/03/06            jjc]
[ ./server/tty/tty_agency.c ]
Changed tty_agency_ns_register_agent() to convert the access to 
flags when passing it to tty_open_proc().
[91/02/18            jjc]
[ ./server/tty/tty_io.c ]
Modified tty_open() to grab console away from POE and 
tty_close() to give it back.
Fixed tty_open() to allocate a reply port for device_* messages
in the tty structure if it is null (not just if we're opening
the tty for reading).
[90/01/22            jjc]
[ ./server/tty/tty_io_procs.c ]
Added ns_access_to_flags() to convert NSR_READ | NSR_WRITE
to FREAD | FWRITE for tty_open_proc().
[91/02/18            jjc]
    
    
    
==========================================================================
   ***** US Version US39  (jjc) *****
    
    
New features:
--- --------

Merged changes from Paul Neves with some changes:

	1) Installed framework for copying arguments in and out of emulated
	   system calls instead of calling vm_region to check the addresses
	   of arguments.  Implemented as macros that just check to make sure
	   that address is between VM_MIN_ADDRESS and VM_MAX_ADDRESS.  Macros
	   can be changed later to really copy the arguments or just touch
	   pages to make sure that something is really there.

	2) Made version of path() that checks path lengths as it goes and
	   fixed ns_resolve_obj() to check too instead of calling
	   path_length_ok routine before calling path() or ns_resolve_obj().
	   Tossed path_length_ok().


Bug fixes:
--- -----

"Fixed" Paul Neves' rewritten version of copen() to set read access for 
write-only files because write-only files don't work.

Added missing pair of brackets { } to copen().

[I386]	Paul Neves fixed emul_syscall() to convert its error return value
	from an emulation error to a Unix one before returning.  This means 
	that you'll start getting meaningful errno values from emulated system
	calls!

[SUN3]	Applied above change.


Special notes:
------- -----

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
39
[ ./lib/emul/emul_base.h ]
Replaced Paul Neves' EFAULT handling with macros for copying
arguments in and out of system calls to figure out whether
they're good or not.
[91/04/01            jjc]
Picked up Paul Neves' changes.
[91/03/29  15:42:22  jjc]
[ ./lib/emul/emul_file.c ]
Made some improvements/modifications to Paul Neves' changes:
	1) Replaced Paul Neves' EFAULT handling with macros for copying
	   arguments in and out of system calls to figure out whether
	   they're good or not.
	2) Use emul_path() in place of path_lengths_ok() and path()
	   to check path name length and split the path name into 
	   directory and leaf names.
	3) Need not check for long path names before calling
	   ns_resolve_obj() because ns_resolve_obj() has been fixed 
	   to check.
[91/04/01            jjc]
Picked up Paul Neves' changes
[91/03/29  15:46:39  jjc]
[ ./lib/emul/emul_io.c ]
Made some improvements/modifications to Paul Neves' changes:
	1) Replaced Paul Neves' EFAULT handling with macros for copying
	   arguments in and out of system calls to figure out whether
	   they're good or not.
	2) Use emul_path() in place of path_lengths_ok() and path()
	   to check path name length and split the path name into 
	   directory and leaf names.
	3) Need not check for long path names before calling
	   ns_resolve_obj() because ns_resolve_obj() has been fixed 
	   to check.
	4) Changed Paul Neves' new version of copen() to set read
	   access for files opened write only because writes will fail
	   without read access when you try to get the mapped file 
	   state.
	5) Changed copen() to test to make sure that a file opened
	   in truncate or append mode is writeable.
[91/04/01            jjc]
Picked up Paul Neves' changes
[91/03/29  15:47:56  jjc]
[ ./lib/emul/emul_misc.c ]
Replaced path_length_ok() with emul_path() which checks path
lengths and splits the pathname into directory and file names.
[91/04/02            jjc]
Picked up Paul Neves' changes
[91/03/29  15:48:12  jjc]
[ ./lib/emul/emul_proc.c ]
Replaced Paul Neves' EFAULT handling with macros for copying
arguments in and out of system calls to figure out whether
they're good or not.
[91/04/01            jjc]
Picked up Paul Neves' changes
[91/03/29  15:48:27  jjc]
[ ./lib/emul/emul_signal.c ]
Replaced Paul Neves' EFAULT handling with macros for copying
arguments in and out of system calls to figure out whether
they're good or not.
[91/04/01            jjc]
Picked up Paul Neves' changes
[91/03/29  15:48:38  jjc]
[ ./lib/emul/emul_time.c ]
Replaced Paul Neves' EFAULT handling with macros for copying
arguments in and out of system calls to figure out whether
they're good or not.
[91/04/01            jjc]
Picked up Paul Neves' changes
[91/03/29  15:48:45  jjc]
[ ./lib/emul/emul_uid.c ]
Replaced Paul Neves' EFAULT handling with macros for copying
arguments in and out of system calls to figure out whether
they're good or not.
[91/04/01            jjc]
Picked up Paul Neves' changes
[91/03/29  15:48:53  jjc]
[ ./lib/emul/i386/emul_machdep.c ]
Removed valid_vm_address() because we're using COPYIN and
COPYOUT instead.
[91/04/01            jjc]
Picked up Paul Neves' changes
[91/03/29  15:49:01  jjc]
[ ./lib/emul/sun3/emul_machdep.c ]
Fixed emul_syscall() to convert its error return value from
an emulation error to a Unix one before returning.
[91/04/01            jjc]
[ ./lib/us/fs_access.c ]
Picked up Paul Neves' changes
[91/03/29  15:49:11  jjc]
[ ./lib/us/std_name.c ]
Changed CLEAN_PATH to make sure that each component of the path
and the whole path are less than their respective size limits.
[91/04/02            jjc]
[ ./lib/ux/uxio.c ]
Picked up Paul Neves' changes
[91/03/29  15:49:18  jjc]
    
    
    
==========================================================================
   ***** US Version US40  (dpj) *****
    
    
Executive summary:
--------- -------

	- new or extended interfaces and support classes for I/O,
	  network access, naming

	- two new servers: x-kernel (UDP) and pipenet

	- socket system calls emulation (INET/UDP and UNIX-domain)

	- Gosling's emacs works (GNU-emacs coming soon...)

	- Bug fixes, bug fixes, bug fixes


New features:
--- --------

(1) new high-level (client-to-server) I/O interface

The I/O interface has been considerably extended, according to the
discussions held with OSF/TIS. Main ideas:
	- regular treatment of random-access and sequential-access
operations: io_read() vs. io_read_seq(), etc.
	- byte-level and record-level I/O operations, with 64-bit byte
offsets and record numbers used as data identifiers.
	- support for data manipulation by reference instead of
copying, ala mbuf, mblk/dblk, etc.

With these extensions, the I/O interface should now be sufficient to
deal with all "normal" uses of I/O (including networking), and to
allow for standard implementations of I/O facilities inside servers
and for client-server communication (including shared memory buffers).
Still missing (but planned): PEEK, out-of-band data.

To keep the system reasonably simple and manageable, the I/O interface
is divided between a "basic" and an "extended" interface. The basic
interface defines the calls that copy data to/from contiguous user
buffers; it is exported to all clients. The extended interface defines
calls to manipulate data through pointers to system-defined block
(io_block_t) and record (io_record_t) data structures. The extended
interface is currently used only internally to various servers, but
not exported to clients; it may be exported to "smart" clients at a
later date.

The two parts of the I/O interface are defined in files
	- ./include/io_types.h, ./include/io_methods.h (basic)
	- ./include/io_types2.h, ./include/io_methods2.h (extended)

(2) I/O support classes

Several classes in ./lib/us have been modified or created to support
the new I/O interface:

Classes "bytestream" and "recordstream" implement standard
reader-writer FIFO buffers for bytes and records, respectively. The
old version of "bytestream" was extended for the new I/O primitives,
and the hack that allowed writing past the high-water-mark without
blocking was removed. "recordstream" is new.

All the data inside a standard server can be manipulated using
io_block_t and io_record_t data structures. These data structures are
allocated by an instance of an "iobuf_mgr", which is responsible for
keeping track of the underlying memory management. Currently, there
are three iobuf_mgr classes:
	- ./lib/us/default_iobuf_mgr: allocates data buffers in
contiguous, private memory inside a server's address space.
	- ./lib/us/user_iobuf_mgr: keeps track of data buffers in
memory supplied by the caller instead of being internally allocated.
	- ./pkg/xkernel/user/usx_iobuf_mgr: maps standard io_record_t
structures into x-kernel messages, without copying.
In the future, there should be other types of iobuf_mgr's, notably to
handle data buffers in memory shared between multiple address spaces.
Standard class "iobuf_user" can be used as a base class for any I/O
object that wants to exports the block and record allocation methods
supplied by an iobuf_mgr object.

The old "stream_mgr" class, which implemented a first approximation of
the function of iobuf_mgr's, is now gone.

(3) network access interface and support classes:

Defined a standard interface for access to all network functions. Most
of the primitives in this interface are similar to the primitives
defined in XTI, with three main differences :
	- the I/O functions are taken from the standard I/O
interface, with just a few extended, additional primitives where
additional information must be specified (address, options, etc.)
	- transport endpoints are immutable and entered into a the
standard, uniform name space. The "bind" and "connect" operations do
not modify an endpoint; they apply to an existing endpoint or
directory and create a new endpoint. This approach simplifies sharing
of endpoints, while allowing a simple implementation of mutable
endpoints as a layer above immutable endpoints.
	- most arguments to the network primitives are treated as
opaque data types with multiple "flavors": network addresses, service
options, etc.

The new standard item types are:
	- NST_COTS_RECS: connection-oriented service, record-level I/O
(a.k.a. SOCK_SEQPACKET)
	- NST_COTS_BYTES: connection-oriented service, byte-level I/O
(a.k.a. SOCK_STREAM)
	- NST_CLTS_RECS: connection-less service, record-level I/O
(a.k.a. SOCK_DGRAM)
	- NST_CLTS_BYTES: just for completeness, not really useful?
	- NST_CONNECTOR: endpoint for connection-oriented service,
that has not yet been actively connected or is listening for
connection requests.

The net interface is defined in files ./include/net_types.h,
./include/net_methods.h and ./include/net_methods2.h (for I/O
operations derived from the extended I/O interface).  Currently, the
opaque data types used in this interface are implemented as macros
(./include/net_types.h) and C functions (./lib/us/net_types.c).

The classes ./lib/us/net_endpt_base and ./lib/us/net_dir_base are
standard base classes for the implementation of network endpoints and
directories containing network endpoints, respectively.  

(4) transparent symlinks

The standard name service interface now implements a notion of
"transparent symlink". This is a new item type
(NST_TRANSPARENT_SYMLINK) that behaves exactly like a regular symlink
except that the name service interface specifies that it should be
followed when the NSF_TFOLLOW mode bit is on (instead of NSF_FOLLOW).
Every server implementing the full name service interface is required
to support transparent symlinks.  Transparent symlinks can be used to
place a forwarding point anywhere in the name space pointing to an
item in any other server, thereby achieving the effect of inserting an
arbitrary item in the name space of a server that does not normally
support that item type.  Regular clients always enable NSF_TFOLLOW so
that transparent symlinks are always followed and are never visible to
the user.

The root name server and the standard classes used to implement the
UFS and NFS servers (vn_* and fs_*) have been modified to support
transparent symlinks.

The emulation library has been modified to always enable NSF_TFOLLOW.

The standard prefix table (./lib/us/std_name) has been modified to
deal with the situation when the user specifies NSF_TFOLLOW, but the
transparent symlink is found to point to an invalid location in the
name space. This is necessary because UNIX programs are not themselves
prepared to deal with this problem, as they are when they encounter an
invalid "regular" symlink.

Transparent symlinks are used to insert UNIX-domain sockets in the UFS
name space.

(5) temporary entries in the name space

Defined a new facility to support items that exist only while they are
actively referenced by outside clients (e.g. pipes, transport
endpoints, etc.), and that appear in the uniform name space for as
long as they exist and disappear when not in use.

Such "temporary" items must derive from class ./lib/us/tmp_agency
(itself derived from ./lib/us/vol_agency). tmp_agency keeps track of 4
types of references to an item:
	- agent references: references from an agent (external
client). Manipulated (transparently) with ns_register_agent() and
ns_unregister_agent().
	- stronglinks: references other than agents that should also
count as an active use of the item. Manipulated with
ns_register_stronglink() and ns_unregister_stronglink().
	- MachObjects references: simple references created with
mach_object_reference(), that should not count as a reason to keep the
item in the name space.
	- tmplinks: established automatically by the standard
./lib/us/dir class for the parent directory. Removed automatically
(along with the directory entry) when the item becomes inactive.

A "temporary" item is deactivated and removed from the name space when
all agent references and all stronglinks are removed. The method
"tmp_cleanup_for_shutdown()" is invoked on the item when this
deactivation occurs, to allow for user-defined cleanup actions. Note
that the MachObject instance itself may persist after shutdown (if
there are other, pure MachObjects references), but it is no longer
visible in the name space and should not be made accessible to
clients.

The standard ./lib/us classes "dir" and "vol_agency" have been
modified to deal with the "tmp_agency" facility. See the comments in
./lib/us/tmp_agency.c for more details.

The old "temporay" class, which implemented a first approximation of
the function of "tmp_agency", is now gone.

(6) x-kernel server -- UDP service

Implemented a high-level interface layer for the x-kernel server,
exporting UDP service with the standard network access interface. The
x-kernel server now comes-up and creates a subtree in the global name
space under "/net". There is currently a single subdirectory named
"udp", holding all the active UDP endpoints. To create a new UDP
endpoint (NST_CLTS_RECS), invoke "net_create()" on the "udp"
directory, etc.  Pseudo-connected UDP endpoints are also supported, by
invoking "net_connect()" on a regular UDP endpoints (creates a new
NST_COTS_RECS endpoint). 

As before, the base directory in the x-kernel server also implements
the Mig ARP interface for use by netmsgserver_sa.

The x-kernel is now started automatically with the rest of the system,
from the ./utils/startup.sh script. There is a cover script
(./utils/startxkernel.csh) to figure-out the correct network interface
name, local IP address and gateway, by reading the standard MSD 2.6
files (/etc/NETWORKS and /etc/GATEWAYS). This script also works in a
CMU-Facilities environment, except that the /etc/GATEWAYS file may be
bad or nonexistent, in which case the gateway defaults to 128.2.256.36.

There are occasional problems when running the x-kernel server in
conjunction with the UNIX single-server network code, where one server
decides to send ICMP's in reaction to the other's packets. To avoid
this, I recommend either shutting-down the network in the
single-server ("/etc/ifconfig <interface> down") or running the
x-kernel with a different IP address. The startxkernel.csh script
looks for a file named "/etc/NETWORKS.US" that may contain such an
alternate IP address.

There also appears to be a bug in the Mach 3.0 kernel packet filter
for version MK43 and above, which may cause incoming packets to be
corrupted. This does not seem to affect the single-server, so it is
probably related to using more than one active filter at a time. It is
being worked on, but has not yet been found yet...

With all these caveats, /usr/ucb/tftp works from the emulated shell.

(7) pipenet server -- UNIX-domain sockets and pipes

Implemented a new server in ./server/pipenet, to support a standard
collection of uni- and bi-directional FIFO queues, used for
UNIX-domain sockets and pipes.

This servers comes-up and creates a subtree in the global name space
under "/pipenet". It currently has three subdirectories: CLTS_RECS,
COTS_BYTES and UPIPE_BYTES. The first two support "local" transport
endpoints with the obvious semantics implied by their names; the last
implement unidirectional pipes similar to the ones previously found in
the pipe server. Other subdirectories and services will be added as
needed. 

The pipenet server is implemented with a collection of relatively
general-purpose classes. It is hoped that these same classes will be
useful in implementing local IPC for other flavors of OS interfaces.
The class hierarchy is described in ./server/pipenet/CLASSES.txt.

(8) emulated sockets

The emulation library now emulates most socket operations, with
INET/UDP and UNIX-domain sockets (SOCK_STREAM and SOCK_DGRAM). It
looks-up entries in the /net and /pipenet subtrees and uses the
standard network access interface to manipulate the endpoints. Most of
the idiosyncrasies of the socket interface are dealt with in the
emulation library, not the servers.  Class ./lib/ux/uxio_socket
(derived from ./lib/ux/uxio) does most of the work.

The emulation of UNIX-domain sockets is weird, but then again, so is
the original...

(9) uxio class

The base class for UNIX descriptors (./lib/ux/uxio) has been modified
to use the new sequential I/O operations when appropriate. This
behavior is controlled by the "FILE_SEQUENTIAL" attribute, set by the
various specialized derived classes.

uxio also support re-opening and specifying a new proxy, to allow
chnages in underlying (immutable) endpoints during the lifetime of a
socket.

(10) debugging output

Changed a bunch of debug levels for emulation entry points, obreak,
resolving loop, io_deactivate(), ...

Defined a new macro "us_internal_error()" in ./local_include/debug.h,
to be used any time a server or library runs into a situation that is
supposedly impossible. This macro prints a file name, line number,
user message and mach_error_t translation. Its output cannot be
disabled. It is more convenient to use than "ERROR()". All new classes
created with this release use it.

(11) test programs

Created a ./test directory for test programs that can be used from the
emulated shell. Current contents:
	- ttyname: calls the ttyname() libc function
	- sockudp: interactive program to play with UDP sockets
	- sockunix: interactive program to play with UNIX-domain sockets

As far as I know, all three programs work fine with the new system.


Bug fixes:
--- -----

Changed the formal parameters to the COPYIN/COPYOUT macros in
./lib/emul/emul_base.h to avoid conflicts with existing identifiers.

Fixed a number of problems with the code path in
./lib/emul/${MACHINE}/emul_machdep.c that deals with error returns.
Fixed exec() emulation to report "File not found" instead of "Error 0"
as appropriate.  Changed the translation of US_INVALID_ACCESS from
EROFS to EACCES.

Fixed vm_allocate() arguments bug in ./lib/emul/emul_error.c (from
Paulo Guedes @ OSF).

Picked-up several UFS fixes from Paul Roy @ OSF. Affected files:
	./lib/us/aot.c
	./lib/us/pager.c
	./server/ufs/ufs_inode.c
	./server/ufs/ufs_subr.c
	./server/ufs/ufs_xxx.c

Removed NSR_INSERT and NSR_DELETE from resolve operation in
emul_truncate().

Re-enabled the cleanup code in exit() (was "#ifdef analretentive").

Shortened LPATH in ./lib/emul/memory/Makefile. Necessary with the SUN
compiler.

Start automatic generation of MachObjects method ID's at 0x10000000
instead of 1234 to avoid confusion in RPC package.

Fixed incorrect comparison of mgr_id in ns_insert_entry() in
./lib/us/dir.c.

Replaced invoke_super() with invoke_super_with_base() in many ./lib/us
classes, to avoid losing the Base (and credentials) information.

Fixed extraneous "/" at the beginning of the canonpath in
./lib/us/std_name.c.ns_resolve_simple(), which was sometimes causing
confusion with the "usedlen" return from ns_resolve().

Fixed ./lib/ux/select.c to derive from "base" instead of
"top_level_class". Note that this file is not currently used, but it
seemed safer to fix this bug anyway in case we re-enable this file
later.

Fixed broken cloning logic in ./lib/ux/uxsignal.c (from Rich Draves @
CMU).

Fixed a number of servers to be able to start more RPC handler threads
when needed.

Fixed the emulation library to start with only one signal thread, not
two (from Rich Draves @ CMU).

Many bug fixes to make the UDP module in the x-kernel work. Too many
to list here.

Do not actually open TTY's when just doing a stat(). Otherwise, stat()
may hang waiting for a response on inactive TTY's.

Fixed pointer bug in ./server/tty/tty_cmupty.c, which caused a
tty_server crash once.


Organizational changes:
-------------- -------

Cleaned-up ./lib/emul/Makefile and subdirectories to reduce confusion.

Fixed many libraries to avoid long names for members.

The pipe server is no longer started with the standard system and its
sources have been removed (defunct'ed), since its function has been
folded into the pipenet server. Two new servers get started
automatically:
	- pipenet (under /pipenet)
	- x-kernel (under /net)


Special notes:
------- -----

The following files have been made defunct:
	./lib/emul/bsd_all/Makefile
	./lib/emul/bsd_htg/Makefile
	./lib/emul/libu/Makefile
	./lib/us/msgstream.c
	./lib/us/msgstream_ifc.h
	./lib/us/net_agent.c
	./lib/us/net_agent_ifc.h
	./lib/us/net_proxy.c
	./lib/us/net_proxy_ifc.h
	./lib/us/stream_mgr.c
	./lib/us/stream_mgr_ifc.h
	./lib/us/temporary.c
	./lib/us/temporary_ifc.h
	./lib/ux/socket.c
	./lib/ux/socket_ifc.h
	./server/pipe/Makefile
	./server/pipe/pipe_agency.c
	./server/pipe/pipe_agency_ifc.h
	./server/pipe/pipe_dir.c
	./server/pipe/pipe_dir_ifc.h
	./server/pipe/pipe_init.c

In many shadows, ./pkg/xkernel/user/net_types.h is either an old file,
or a symlink to ./include/net_types.h. It should be removed to avoid
problems in the future.

Remove ./server/pipe from your shadows.

With all the fixes and new features, Gosling's emacs now works
(GNU-emacs coming soon...). To use it, remember to
	- set term=??? (and get a good /etc/termcap)
	- stty rows ??
	- setenv HOME ???
In particular, if HOME is not set, emacs just dumps core with no
explanations...


******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
40
[ ./lib/emul/bsd_all/Makefile ]
Making defunct
[ ./lib/emul/bsd_htg/Makefile ]
Making defunct
[ ./lib/emul/libu/Makefile ]
Making defunct
[ ./lib/us/msgstream.c ]
Making defunct
[ ./lib/us/msgstream_ifc.h ]
Making defunct
[ ./lib/us/net_agent.c ]
Making defunct
[ ./lib/us/net_agent_ifc.h ]
Making defunct
[ ./lib/us/net_proxy.c ]
Making defunct
[ ./lib/us/net_proxy_ifc.h ]
Making defunct
[ ./lib/us/stream_mgr.c ]
Making defunct
[ ./lib/us/stream_mgr_ifc.h ]
Making defunct
[ ./lib/us/temporary.c ]
Making defunct
[ ./lib/us/temporary_ifc.h ]
Making defunct
[ ./lib/ux/socket.c ]
Making defunct
[ ./lib/ux/socket_ifc.h ]
Making defunct
[ ./server/pipe/Makefile ]
Making defunct
[ ./server/pipe/pipe_agency.c ]
Making defunct
[ ./server/pipe/pipe_agency_ifc.h ]
Making defunct
[ ./server/pipe/pipe_dir.c ]
Making defunct
[ ./server/pipe/pipe_dir_ifc.h ]
Making defunct
[ ./server/pipe/pipe_init.c ]
Making defunct
[ ./TODO ]
More notes...
[ ./include/io_error.h ]
Merged up to US39
[91/05/04  09:43:14  dpj]

Added IO_INVALID_RECNUM and IO_NOT_ENOUGH_DATA.
[91/04/28  09:18:29  dpj]
[ ./include/io_methods.h ]
Merged up to US39
[91/05/04  09:43:17  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
[91/04/28  09:20:35  dpj]

First pass at unified I/O interface for byte- and record-level operations.
[91/02/25  10:20:27  dpj]
[ ./include/io_methods2.h ]
Merged up to US39
[91/05/04  09:43:21  dpj]

First working version.
[91/04/28  09:21:20  dpj]
[ ./include/io_types.h ]
Merged up to US39
[91/05/04  09:43:24  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
[91/04/28  09:21:58  dpj]

First pass at unified I/O interface for byte- and record-level operations.
[91/02/25  10:20:59  dpj]
[ ./include/io_types2.h ]
Merged up to US39
[91/05/04  09:43:27  dpj]

First working version.
[91/04/28  09:22:26  dpj]
[ ./include/net_error.h ]
Merged up to US39
[91/05/04  09:43:29  dpj]

First working version.
[91/04/28  09:22:51  dpj]
[ ./include/net_methods.h ]
Merged up to US39
[91/05/04  09:43:32  dpj]

First working version.
[91/04/28  09:23:50  dpj]

First pass.
[91/02/25  10:21:19  dpj]
[ ./include/net_methods2.h ]
Merged up to US39
[91/05/04  09:43:38  dpj]

First working version.
[91/04/28  09:24:34  dpj]
[ ./include/net_types.h ]
Merged up to US39
[91/05/04  09:43:40  dpj]

Modified to manipulate all abstract data types by reference.
Added NET_ADDR_PIPE.
[91/04/28  09:26:29  dpj]

First version.
[91/02/25  10:21:39  dpj]
[ ./include/ns_error.h ]
Merged up to US39
[91/05/04  09:43:43  dpj]

Added NS_INVALID_LINK_COUNT, NS_TFORWARD_FAILURE.
[91/04/28  09:27:23  dpj]
[ ./include/ns_methods.h ]
Merged up to US39
[91/05/04  09:43:46  dpj]

Added ns_create_transparent_symlink().
[91/04/28  09:27:58  dpj]
[ ./include/ns_types.h ]
Merged up to US39
[91/05/04  09:43:52  dpj]

Added NSF_TFOLLOW, NSA_TFORWARD and NST_* for pipes and
network-related items.  
[91/04/28  09:30:28  dpj]

Added NST_CLTS and NST_COTS for network support.
[91/02/25  10:22:41  dpj]
[ ./include/uxio_methods.h ]
Merged up to US39
[91/05/04  09:43:55  dpj]

Added methods for the socket-related syscalls.
[91/04/28  09:32:21  dpj]
[ ./lib/emul/Makefile ]
Merged up to US39
[91/05/04  09:43:59  dpj]

Completely reorganized to be simpler and with fewer subdirectories. 
[91/04/28  09:33:40  dpj]
[ ./lib/emul/emul_all.c ]
Merged up to US39
[91/05/04  09:49:46  dpj]

Use only one signal thread, not two.
Follow transparent symlinks.
[91/04/28  09:35:46  dpj]
[ ./lib/emul/emul_base.h ]
Changed the formal parameters to the COPY* macros to avoid
conflicts with existing identifiers.
Merged up to US39.
[91/04/30            dpj]
Refined debugging control for syscall entry/exit.
[91/04/28  09:36:27  dpj]
[ ./lib/emul/emul_basic.c ]
Merged up to US39
[91/05/04  09:49:58  dpj]

Follow transparent symlinks.
Fixed vm_allocate() arguments bug (from Paulo Guedes @ OSF).
Increased the debug level for obreak warning.
[91/04/28  09:37:56  dpj]
[ ./lib/emul/emul_error.c ]
Merged up to US39
[91/05/04  09:50:02  dpj]

US_INVALID_ACCESS corresponds to EACCES, not EROFS.
Added missing default "EFAULT" return in US_MODULE.
Added network-related codes.
[91/04/28  09:40:42  dpj]
[ ./lib/emul/emul_file.c ]
Removed NSR_INSERT and NSR_DELETE from resolve operation
in emul_truncate().
Merged up to US39.
[91/04/30            dpj]
Follow transparent symlinks.
Added transparent symlink and new pipes to open() logic.
[91/04/28  09:42:38  dpj]
[ ./lib/emul/emul_init.c ]
Merged up to US39
[91/05/04  09:50:23  dpj]

Follow transparent symlinks.
[91/04/28  09:43:04  dpj]
[ ./lib/emul/emul_init_prog/Makefile ]
Merged up to US39
[91/05/04  09:50:29  dpj]

Cleaned-up and simplified.
[91/04/28  12:41:10  dpj]
[ ./lib/emul/emul_io.c ]
Merged up to US39
[91/05/04  09:50:40  dpj]

Follow transparent symlinks.
Added new pipes and sockets in stat() logic.
Modified pipe() to use the pipenet server.
Added a very stupid select() copied from POE.
[91/04/28  09:45:20  dpj]
[ ./lib/emul/emul_misc.c ]
Merged up to US39
[91/05/04  09:51:01  dpj]

Added extra definition of MEMORY_OBJECT_NULL to make compilation
easier.  
Changed emul_debug and syscall trace for new tracing scheme.
Re-enabled the cleanup code in exit() (was "#ifdef analretentive").
[91/04/28  09:47:15  dpj]
[ ./lib/emul/emul_socket.c ]
Merged up to US39
[91/05/04  09:51:12  dpj]

Completely redone to use the standard "uxio" base objects and the new
network and I/O interfaces.
[91/04/28  09:48:45  dpj]
[ ./lib/emul/i386/emul_machdep.c ]
Fixed error reporting for execv() and friends.
[91/04/29            dpj]
Corrected an error code translation bug around E_JUSTRETURN.
Place the UNIX error code in eax on exit.
[91/04/28  09:50:25  dpj]
[ ./lib/emul/memory/Makefile ]
Shortened LPATH. Necessary with the SUN compiler.
[91/04/30            dpj]
Cleaned-up and simplified.
[91/04/28  12:41:34  dpj]
[ ./lib/emul/sun3/emul_machdep.c ]
Fixed error reporting for execv() and friends.
[91/04/29            dpj]
Corrected an error code translation bug around E_JUSTRETURN.
Place the UNIX error code in d0 on exit.
[91/04/28  09:52:22  dpj]
[ ./lib/mach3/mach3/err_server.sub ]
Merged up to US39
[91/05/04  09:51:51  dpj]

More network, I/O and NS codes.
[91/04/28  12:41:58  dpj]
[ ./lib/machobj/mach_object.c ]
Merged up to US39
[91/05/04  09:51:56  dpj]

Start method ID's at 0x10000000 instead of 1234.
[91/04/28  09:53:53  dpj]
[ ./lib/threads/Makefile ]
Merged up to US39
[91/05/04  09:52:11  dpj]

Removed DEBUG flag from standard compile line.
[91/04/28  09:54:41  dpj]
[ ./lib/threads/stack.c ]
Merged up to US39
[91/05/04  09:52:17  dpj]

Made cthread_stack_size visible to the outside (i.e. not "private"). 
[91/04/28  09:55:29  dpj]
[ ./lib/us/Makefile ]
Merged up to US39
[91/05/04  09:52:23  dpj]

Added classes for new I/O and network support.
[91/04/28  09:56:23  dpj]

Added shortnames for some library members.
Added network and iobuf classes.
[91/02/25  10:23:45  dpj]
[ ./lib/us/access_table.c ]
Merged up to US39
[91/05/04  09:52:27  dpj]

Added all network-related methods, new I/O interface and
ns_create_transparent symlink. 
[91/04/28  09:57:37  dpj]
[ ./lib/us/agency.c ]
Merged up to US39
[91/05/04  09:52:31  dpj]

Added ns_create_agent_same_cred().
[91/04/07            dpj]
[ ./lib/us/agency_ifc.h ]
Merged up to US39
[91/05/04  09:52:38  dpj]

Added ns_create_agent_same_cred().
[91/04/07            dpj]
[ ./lib/us/aot.c ]
Picked-up a fix from roy@osf.org: race for newly-created entries?
[91/04/29            dpj]
[ ./lib/us/bytestream.c ]
Merged up to US39
[91/05/04  09:52:50  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
[91/04/28  09:58:27  dpj]

Fixed include files.
[91/02/25  10:25:29  dpj]
[ ./lib/us/bytestream_ifc.h ]
Merged up to US39
[91/05/04  09:52:55  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
[91/04/28  09:58:54  dpj]
[ ./lib/us/default_iobuf_mgr.c ]
Merged up to US39
[91/05/04  09:52:58  dpj]

Removed support for user-defined blocks.
Removed explicit user info in records (now implicit).
[91/04/28  10:00:09  dpj]

First version.
[91/02/25  10:25:51  dpj]
[ ./lib/us/default_iobuf_mgr_ifc.h ]
Merged up to US39
[91/05/04  09:53:01  dpj]

Removed support for user-defined blocks.
Removed explicit user info in records (now implicit).
[91/04/28  10:00:59  dpj]

First version.
[91/02/25  10:26:07  dpj]
[ ./lib/us/diag.c ]
Merged up to US39
[91/05/04  09:53:09  dpj]

Added diag_us_internal_error() and support variables.
[91/04/28  10:01:42  dpj]
[ ./lib/us/dir.c ]
Merged up to US39
[91/05/04  09:53:15  dpj]

Reworked to support explicit link count, temporary and strong links. 
Support transparent symlinks.
[91/04/28  10:05:33  dpj]

Fixed incorrect comparison of mgr_id in ns_insert_entry().
[91/02/25  10:26:55  dpj]
[ ./lib/us/dir_ifc.h ]
Merged up to US39
[91/05/04  09:53:23  dpj]

Reworked to support explicit link count, temporary and strong links.  
[91/04/28  10:06:17  dpj]
[ ./lib/us/fs_dir.c ]
Merged up to US39
[91/05/04  09:53:27  dpj]

Support transparent symlinks.
[91/04/28  10:07:17  dpj]
[ ./lib/us/fs_dir_ifc.h ]
Merged up to US39
[91/05/04  09:53:31  dpj]

Support transparent symlinks.
[91/04/28  10:07:34  dpj]
[ ./lib/us/fs_file.c ]
Merged up to US39
[91/05/04  09:53:39  dpj]

Replace invoke_super() with invoke_super_with_base().
[91/04/28  10:08:18  dpj]
[ ./lib/us/fs_tsymlink.c ]
Merged up to US39
[91/05/04  09:53:43  dpj]

First working version.
[91/04/28  10:08:40  dpj]
[ ./lib/us/fs_tsymlink_ifc.h ]
Merged up to US39
[91/05/04  09:53:46  dpj]

First working version.
[91/04/28  10:09:01  dpj]
[ ./lib/us/io_methods.c ]
Merged up to US39
[91/05/04  09:53:51  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
[91/04/28  10:09:45  dpj]
[ ./lib/us/io_types.c ]
Merged up to US39
[91/05/04  09:53:54  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
Added iorec_read().
[91/04/28  10:10:22  dpj]

First version.
[91/02/25  10:27:16  dpj]
[ ./lib/us/iobuf_user.c ]
Merged up to US39
[91/05/04  09:53:59  dpj]

Removed support for user-defined blocks.
Removed explicit user info in records (now implicit).
[91/04/28  10:11:32  dpj]

First version.
[91/02/25  10:27:51  dpj]
[ ./lib/us/iobuf_user_ifc.h ]
Merged up to US39
[91/05/04  09:54:02  dpj]

Removed support for user-defined blocks.
Removed explicit user info in records (now implicit).
[91/04/28  10:11:51  dpj]

First version.
[91/02/25  10:28:07  dpj]
[ ./lib/us/mf_mgr.c ]
Merged up to US39
[91/05/04  09:54:10  dpj]

Increased the debug level for the "io_deactivate: not idle" message. 
[91/04/28  10:12:31  dpj]
[ ./lib/us/mountpt.c ]
Merged up to US39
[91/05/04  09:54:13  dpj]

Replace invoke_super() with invoke_super_with_base().
[91/04/28  10:12:48  dpj]
[ ./lib/us/net_dir_base.c ]
Merged up to US39
[91/05/04  09:57:08  dpj]

First working version.
[91/04/28  10:13:07  dpj]
[ ./lib/us/net_dir_base_ifc.h ]
Merged up to US39
[91/05/04  09:57:13  dpj]

First working version.
[91/04/28  10:13:27  dpj]
[ ./lib/us/net_endpt_base.c ]
Merged up to US39
[91/05/04  09:57:15  dpj]

First working version.
[91/04/28  10:13:43  dpj]
[ ./lib/us/net_endpt_base_ifc.h ]
Merged up to US39
[91/05/04  09:57:18  dpj]

First working version.
[91/04/28  10:14:03  dpj]
[ ./lib/us/net_internal.c ]
Merged up to US39
[91/05/04  09:57:22  dpj]

First working version.
[91/04/28  10:14:28  dpj]
[ ./lib/us/net_methods.c ]
Merged up to US39
[91/05/04  09:57:25  dpj]

Added many more methods.
Manipulate all abstract data types by reference.
[91/04/28  10:15:37  dpj]

First version.
[91/02/25  10:29:01  dpj]
[ ./lib/us/net_types.c ]
Merged up to US39
[91/05/04  09:57:38  dpj]

Modified to manipulate all abstract data types by reference.
Added NET_ADDR_PIPE.
[91/04/28  10:16:34  dpj]

First version.
[91/02/25  10:29:49  dpj]
[ ./lib/us/ns_methods.c ]
Merged up to US39
[91/05/04  09:57:42  dpj]

Added ns_create_transparent_symlink().
[91/04/28  10:17:12  dpj]
[ ./lib/us/pager.c ]
From roy@osf.org: disabled caching.
[91/04/29            dpj]
[ ./lib/us/recordstream.c ]
Merged up to US39
[91/05/04  09:57:53  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
[91/04/28  10:17:37  dpj]

First version.
[91/02/25  10:30:11  dpj]
[ ./lib/us/recordstream_ifc.h ]
Merged up to US39
[91/05/04  09:57:57  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
[91/04/28  10:18:02  dpj]

First version.
[91/02/25  10:30:24  dpj]
[ ./lib/us/shcond.c ]
Merged up to US39
[91/05/04  09:58:00  dpj]

Removed definition of setup_method_with_args().
[91/04/28  10:18:35  dpj]
[ ./lib/us/std_name.c ]
Fixed extraneous "\" at the beggining of the canonpath in
ns_resolve_simple(), which was sometimes causing confusion
with the "usedlen" return from ns_resolve().
[91/05/05            dpj]

Merged up to US39
[91/05/04  09:58:09  dpj]

Support transparent symlinks.
Cleaned-up debugging control.
[91/04/28  10:19:33  dpj]
[ ./lib/us/std_prot.c ]
Merged up to US39
[91/05/04  09:58:19  dpj]

Corrected computation of protlen.
[91/04/28  10:20:00  dpj]
[ ./lib/us/symlink.c ]
Merged up to US39
[91/05/04  09:58:32  dpj]

Replace invoke_super() with invoke_super_with_base().
[91/04/28  10:20:18  dpj]
[ ./lib/us/test/Makefile ]
Merged up to US39
[91/05/04  09:58:46  dpj]

Cleaned-up.
[91/02/25  10:32:01  dpj]
[ ./lib/us/test/test_driver.c ]
Merged up to US39
[91/05/04  09:58:49  dpj]

Added network-related (CLTS) methods.
[91/02/25  10:32:24  dpj]
[ ./lib/us/test/test_net.c ]
Merged up to US39
[91/05/04  09:58:55  dpj]

New network interface.
[91/04/28  10:20:54  dpj]

First version.
[91/02/25  10:32:38  dpj]
[ ./lib/us/test/test_us.c ]
Merged up to US39
[91/05/04  09:58:58  dpj]

Remove net_proxy.
[91/04/28  10:21:14  dpj]

Implemented real command-line argument parsing module. 
Support for output channels and -stop option.
[91/02/25  10:33:55  dpj]
[ ./lib/us/testlib/Makefile ]
Merged up to US39
[91/05/04  09:59:02  dpj]

Added test_net.
[91/02/25  10:34:09  dpj]
[ ./lib/us/tmp_agency.c ]
Merged up to US39
[91/05/04  09:59:09  dpj]

First working version.
[91/04/28  10:21:29  dpj]
[ ./lib/us/tmp_agency_ifc.h ]
Merged up to US39
[91/05/04  09:59:13  dpj]

First working version.
[91/04/28  10:21:47  dpj]
[ ./lib/us/tsymlink.c ]
Merged up to US39
[91/05/04  09:59:16  dpj]

First working version.
[91/04/28  10:22:04  dpj]
[ ./lib/us/tsymlink_ifc.h ]
Merged up to US39
[91/05/04  09:59:20  dpj]

First working version.
[91/04/28  10:22:26  dpj]
[ ./lib/us/user_iobuf_mgr.c ]
Merged up to US39
[91/05/04  09:59:24  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
Removed explicit user info in records (now implicit).
[91/04/28  12:42:28  dpj]

First version.
[91/02/25  10:34:23  dpj]
[ ./lib/us/user_iobuf_mgr_ifc.h ]
Merged up to US39
[91/05/04  09:59:27  dpj]

First version.
[91/02/25  10:34:39  dpj]
[ ./lib/us/vn_dir.c ]
Merged up to US39
[91/05/04  09:59:33  dpj]

Support transparent symlinks.
[91/04/28  10:24:27  dpj]
[ ./lib/us/vn_dir_ifc.h ]
Merged up to US39
[91/05/04  09:59:42  dpj]

Support transparent symlinks.
[91/04/28  10:24:46  dpj]
[ ./lib/us/vn_file.c ]
Merged up to US39
[91/05/04  09:59:45  dpj]

Replace invoke_super() with invoke_super_with_base().
[91/04/28  10:25:04  dpj]
[ ./lib/us/vn_tsymlink.c ]
Merged up to US39
[91/05/04  09:59:49  dpj]

First working version.
[91/04/28  10:25:25  dpj]
[ ./lib/us/vn_tsymlink_ifc.h ]
Merged up to US39
[91/05/04  09:59:52  dpj]

First working version.
[91/04/28  10:25:43  dpj]
[ ./lib/us/vol_agency.c ]
Merged up to US39
[91/05/04  09:59:56  dpj]

Reworked to support explicit link count, temporary and strong links. 
[91/04/28  10:26:16  dpj]
[ ./lib/us/vol_agency_ifc.h ]
Merged up to US39
[91/05/04  09:59:59  dpj]

Reworked to support explicit link count, temporary and strong links. 
[91/04/28  10:26:34  dpj]
[ ./lib/ux/Makefile ]
Merged up to US39
[91/05/04  10:00:10  dpj]

Removed socket.o. Added uxio_socket.o.
[91/04/28  10:27:36  dpj]
[ ./lib/ux/select.c ]
Merged up to US39
[91/05/04  10:00:16  dpj]

Derive from "base", not "top_level_class".
[91/04/28  10:28:08  dpj]
[ ./lib/ux/select_ifc.h ]
Merged up to US39
[91/05/04  10:00:19  dpj]

Derive from "base", not "top_level_class".
[91/04/28  10:28:52  dpj]
[ ./lib/ux/uxio.c ]
Merged up to US39
[91/05/04  10:01:52  dpj]

Use sequential versions of I/O operations when appropriate.
Added code to close and replace underlying item.
[91/04/28  10:31:12  dpj]
[ ./lib/ux/uxio.h ]
Merged up to US39
[91/05/04  10:01:58  dpj]

Use sequential versions of I/O operations when appropriate.
[91/04/28  10:31:34  dpj]
[ ./lib/ux/uxio_ifc.h ]
Merged up to US39
[91/05/04  10:02:01  dpj]

Use sequential versions of I/O operations when appropriate.
Added code to close and replace underlying item.
[91/04/28  10:32:02  dpj]
[ ./lib/ux/uxio_pipe.c ]
Merged up to US39
[91/05/04  10:02:08  dpj]

Use sequential versions of I/O operations when appropriate.
[91/04/28  10:32:20  dpj]
[ ./lib/ux/uxio_pipe_ifc.h ]
Merged up to US39
[91/05/04  10:02:13  dpj]

Added initialize() method.
[91/04/28  10:32:44  dpj]
[ ./lib/ux/uxio_socket.c ]
Merged up to US39
[91/05/04  10:02:18  dpj]

First working version.
[91/04/28  10:33:03  dpj]
[ ./lib/ux/uxio_socket_ifc.h ]
Merged up to US39
[91/05/04  10:02:24  dpj]

First working version.
[91/04/28  10:33:30  dpj]
[ ./lib/ux/uxsignal.c ]
Merged up to US39
[91/05/04  10:02:31  dpj]

Fixed broken cloning logic (from Rich Draves @ CMU).
[91/04/28  10:34:15  dpj]
[ ./lib/ux/uxsignal_ifc.h ]
Merged up to US39
[91/05/04  10:02:41  dpj]

Fixed broken cloning logic (from Rich Draves @ CMU).
[91/04/28  10:35:03  dpj]
[ ./lib/ux/uxstat.c ]
Merged up to US39
[91/05/04  10:02:47  dpj]

Support transparent symlinks, new pipes, network endpoints (sockets). 
[91/04/28  10:36:17  dpj]
[ ./local_include/debug.h ]
Merged up to US39
[91/05/04  10:02:52  dpj]

Added us_internal_error().
[91/04/28  10:36:42  dpj]
[ ./local_include/io_internal.h ]
Merged up to US39
[91/05/04  10:02:57  dpj]

Reorganized for split between basic interface (io_methods) and
extended interface (io_methods2).
[91/04/28  10:37:18  dpj]

Cleaned-up in conjunction with the conversion to the unified
I/O interface for byte- and record-level operations.
[91/02/25  10:35:49  dpj]
[ ./local_include/net_internal.h ]
Merged up to US39
[91/05/04  10:03:03  dpj]

Added net_recinfo_clts_t and support functions.
[91/04/28  10:38:43  dpj]

First version.
[91/02/25  10:36:04  dpj]
[ ./local_include/ns_internal.h ]
Merged up to US39
[91/05/04  10:03:13  dpj]

Added functions for manipulation of temporary and strong links. 
Added ns_create_agent_same_cred().
[91/04/28  10:39:58  dpj]
[ ./pkg/netmsg/MACH3_SA/Makefile ]
Merged up to US39
[91/05/04  10:03:22  dpj]

First working version.
[90/10/21  21:42:50  dpj]
[ ./pkg/netmsg/server/debug.h ]
Merged up to US39
[91/05/04  10:03:28  dpj]

Added ASSERT definition.
[91/02/25  10:36:34  dpj]
[ ./pkg/xkernel/STD/Makefile ]
Merged up to US39
[91/05/04  10:03:38  dpj]

Added usudp_cots.o and usx_internal.o.
[91/04/28  10:40:46  dpj]

Added user-level UDP interface.
Added DEBUG definition in CFLAGS.
[91/02/25  10:37:10  dpj]
[ ./pkg/xkernel/STD/graph.comp ]
Added usudp protocol.
[ ./pkg/xkernel/mach3/Makefile.template ]
Added idmapper6.o
[91/05/04  10:30:01  dpj]

Merged up to US39
[91/05/04  10:03:48  dpj]

Added DEBUG definition in CFLAGS.
[91/02/25  10:37:46  dpj]
[ ./pkg/xkernel/mach3/init.c ]
Merged up to US39
[91/05/04  10:03:53  dpj]

Run the initialization code under protection of the XKERNEL_MASTER
lock. Without it, service threads might run too soon and get in
trouble... 
[91/04/28  10:42:10  dpj]
[ ./pkg/xkernel/mach3/localinit.c ]
Merged up to US39
[91/05/04  10:04:00  dpj]
[ ./pkg/xkernel/mach3/machine.c ]
Merged up to US39
[91/05/04  10:04:08  dpj]

Added a printout of error code in the clock loop.
[91/02/25  10:38:09  dpj]
[ ./pkg/xkernel/mach3/process.c ]
Added code in CreateProcess() to sleep for a while (500 msec)
when there are too many threads, to give the active threads a
chance to calm down.
Changed CreateProcess() to return a success/failure code.
[91/05/04            dpj]

Merged up to US39
[91/05/04  10:04:13  dpj]

Added a limit on the maximum number of threads.
[91/04/28  10:43:20  dpj]

Fixed VAll() for case when the count is already positive.
[91/02/25  10:38:38  dpj]
[ ./pkg/xkernel/protocols/ip.c ]
Added check in ip_demux() to protect against bogus ip_len values.
[91/05/01            dpj]
Fixed IP checksum code.
Fixed reference-count bug in ip_open().
Fixed debugging code that dumps headers.
Re-worked tracing levels.
[91/02/25  10:39:59  dpj]
[ ./pkg/xkernel/protocols/mach3_ether.c ]
Added a check for bogus incoming packets (under CHECK_BOGUS_PKTS).
[91/04/30            dpj]
Added mach3_ether_start().
[91/04/28  10:43:51  dpj]

Added PEERADDR command in controlsessn.
Added code to deal with overflow when receiving
from the packet filter (LOOK_FOR_OVERFLOW, enabled).
Added code the feed-back outgoing packets sent to ourselves
into the incoming-packet code (DEBUG_LOOPBACK, disabled).
[91/02/25  10:42:35  dpj]
[ ./pkg/xkernel/protocols/udp.c ]
Added check in udp_demux() to protect against bogus udp_ulen
values.
[91/05/01            dpj]
Added udp_opendisable.
Fixed byte-ordering bug in controlsessn(MYADDR and PEERADDRR).
[91/04/28  10:44:55  dpj]

Cleaned-up handling of own and peer IP address in session state
and udp_demux().
[91/02/25  10:44:43  dpj]
[ ./pkg/xkernel/protocols/udp.h ]
Merged up to US39
[91/05/04  10:04:41  dpj]

u_short -> unsigned short.
[91/02/25  10:45:04  dpj]
[ ./pkg/xkernel/protocols/udp_internal.h ]
Merged up to US39
[91/05/04  10:04:44  dpj]

Removed "myipaddr" field from the protocol state.
[91/02/25  10:45:43  dpj]
[ ./pkg/xkernel/test/Makefile ]
Merged up to US39
[91/05/04  10:04:49  dpj]

Removed sockudp. It is now in the master test directory.
[91/04/28  10:45:26  dpj]

Added sockudp.
[91/02/25  10:46:02  dpj]
[ ./pkg/xkernel/user/net_dir.c ]
Merged up to US39
[91/05/04  10:04:55  dpj]

Removed net_proxy.
Added default protection.
[91/04/28  10:46:05  dpj]

Added usudp subdirectory.
[91/02/25  10:46:42  dpj]
[ ./pkg/xkernel/user/net_dir_ifc.h ]
Merged up to US39
[91/05/04  10:05:02  dpj]

Include upi.h instead of userupi.h.
[91/02/25  10:47:15  dpj]
[ ./pkg/xkernel/user/net_init.c ]
Merged up to US39
[91/05/04  10:05:10  dpj]

Create more than one MachObjects handler thread.
[91/04/28  10:46:39  dpj]

Fixed parsing of "-d" switch.
[91/02/25  10:47:34  dpj]
[ ./pkg/xkernel/user/usudp_clts.c ]
Merged up to US39
[91/05/04  10:05:14  dpj]

First really working version.
[91/04/28  10:48:20  dpj]

First version.
[91/02/25  10:47:53  dpj]
[ ./pkg/xkernel/user/usudp_clts_ifc.h ]
Merged up to US39
[91/05/04  10:05:20  dpj]

First really working version.
[91/04/28  10:49:00  dpj]

First version.
[91/02/25  10:48:08  dpj]
[ ./pkg/xkernel/user/usudp_cots.c ]
Merged up to US39
[91/05/04  10:05:24  dpj]

First working version.
[91/04/28  10:49:18  dpj]
[ ./pkg/xkernel/user/usudp_cots_ifc.h ]
Merged up to US39
[91/05/04  10:05:28  dpj]

First working version.
[91/04/28  10:49:33  dpj]
[ ./pkg/xkernel/user/usudp_dir.c ]
Merged up to US39
[91/05/04  10:05:32  dpj]

First really working version.
[91/04/28  10:49:53  dpj]

First version.
[91/02/25  10:48:22  dpj]
[ ./pkg/xkernel/user/usudp_dir_ifc.h ]
Merged up to US39
[91/05/04  10:05:42  dpj]

First really working version.
[91/04/28  10:50:29  dpj]

First version.
[91/02/25  10:48:37  dpj]
[ ./pkg/xkernel/user/usudp_protocol.c ]
Merged up to US39
[91/05/04  10:05:46  dpj]

First version.
[91/02/25  10:48:59  dpj]
[ ./pkg/xkernel/user/usx_internal.c ]
Merged up to US39
[91/05/04  10:05:50  dpj]

First working version.
[91/04/28  10:50:47  dpj]
[ ./pkg/xkernel/user/usx_internal.h ]
Merged up to US39
[91/05/04  10:05:54  dpj]

First really working version.
[91/04/28  10:51:18  dpj]

First version.
[91/02/25  10:49:17  dpj]
[ ./pkg/xkernel/user/usx_iobuf_mgr.c ]
Merged up to US39
[91/05/04  10:05:59  dpj]

Removed explicit user info in records (now implicit).
[91/04/28  10:51:49  dpj]

First version.
[91/02/25  10:49:38  dpj]
[ ./pkg/xkernel/user/usx_iobuf_mgr_ifc.h ]
Merged up to US39
[91/05/04  10:06:09  dpj]

First version.
[91/02/25  10:49:52  dpj]
[ ./server/Makefile ]
Merged up to US39
[91/05/04  10:06:14  dpj]

Removed "pipe". Added "pipenet".
[91/04/28  10:52:15  dpj]
[ ./server/name/name_init.c ]
Merged up to US39
[91/05/04  10:06:19  dpj]

Use more than one MachObjects handler thread.
[91/04/28  10:52:50  dpj]
[ ./server/pipenet/CLASSES.txt ]
Updated...

[ ./server/pipenet/Makefile ]
Merged up to US39
[91/05/04  10:06:49  dpj]

First working version.
[91/04/28  10:53:43  dpj]
[ ./server/pipenet/pipenet_cldir_recs.c ]
Merged up to US39
[91/05/04  10:06:54  dpj]

First working version.
[91/04/28  10:54:04  dpj]
[ ./server/pipenet/pipenet_cldir_recs_ifc.h ]
Merged up to US39
[91/05/04  10:06:57  dpj]

First working version.
[91/04/28  10:54:23  dpj]
[ ./server/pipenet/pipenet_clts_base.c ]
Merged up to US39
[91/05/04  10:06:59  dpj]

First working version.
[91/04/28  10:54:41  dpj]
[ ./server/pipenet/pipenet_clts_base_ifc.h ]
Merged up to US39
[91/05/04  10:07:08  dpj]

First working version.
[91/04/28  10:54:58  dpj]
[ ./server/pipenet/pipenet_clts_recs.c ]
Merged up to US39
[91/05/04  10:07:14  dpj]

First working version.
[91/04/28  10:55:16  dpj]
[ ./server/pipenet/pipenet_clts_recs_ifc.h ]
Merged up to US39
[91/05/04  10:07:24  dpj]

First working version.
[91/04/28  10:55:33  dpj]
[ ./server/pipenet/pipenet_codir_bytes.c ]
Merged up to US39
[91/05/04  10:07:38  dpj]

First working version.
[91/04/28  10:55:50  dpj]
[ ./server/pipenet/pipenet_codir_bytes_ifc.h ]
Merged up to US39
[91/05/04  10:07:40  dpj]

First working version.
[91/04/28  10:56:06  dpj]

First version.
[91/02/25  10:48:37  dpj]
[ ./server/pipenet/pipenet_connector.c ]
Merged up to US39
[91/05/04  10:07:47  dpj]

First working version.
[91/04/28  10:56:29  dpj]
[ ./server/pipenet/pipenet_connector_ifc.h ]
Merged up to US39
[91/05/04  10:07:50  dpj]

First working version.
[91/04/28  10:56:51  dpj]
[ ./server/pipenet/pipenet_cots_base.c ]
Merged up to US39
[91/05/04  10:07:53  dpj]

First working version.
[91/04/28  10:57:18  dpj]
[ ./server/pipenet/pipenet_cots_base_ifc.h ]
Merged up to US39
[91/05/04  10:07:57  dpj]

First working version.
[91/04/28  10:57:39  dpj]
[ ./server/pipenet/pipenet_cots_bytes.c ]
Merged up to US39
[91/05/04  10:08:10  dpj]

First working version.
[91/04/28  10:58:30  dpj]
[ ./server/pipenet/pipenet_cots_bytes_ifc.h ]
Merged up to US39
[91/05/04  10:08:13  dpj]

First working version.
[91/04/28  10:58:47  dpj]
[ ./server/pipenet/pipenet_cots_recs.c ]
Merged up to US39
[91/05/04  10:08:19  dpj]

First working version.
[91/04/28  10:59:04  dpj]
[ ./server/pipenet/pipenet_cots_recs_ifc.h ]
Merged up to US39
[91/05/04  10:08:21  dpj]

First working version.
[91/04/28  10:59:24  dpj]
[ ./server/pipenet/pipenet_dir_base.c ]
Merged up to US39
[91/05/04  10:08:26  dpj]

First working version.
[91/04/28  10:59:41  dpj]
[ ./server/pipenet/pipenet_dir_base_ifc.h ]
Merged up to US39
[91/05/04  10:08:30  dpj]

First working version.
[91/04/28  11:00:01  dpj]
[ ./server/pipenet/pipenet_init.c ]
Merged up to US39
[91/05/04  10:08:39  dpj]

First working version.
[91/04/28  11:00:23  dpj]
[ ./server/pipenet/pipenet_internal.c ]
Merged up to US39
[91/05/04  10:08:43  dpj]

First working version.
[91/04/28  11:00:42  dpj]
[ ./server/pipenet/pipenet_internal.h ]
Merged up to US39
[91/05/04  10:08:48  dpj]

First working version.
[91/04/28  11:00:58  dpj]
[ ./server/pipenet/pipenet_root.c ]
Merged up to US39
[91/05/04  10:08:52  dpj]

First working version.
[91/04/28  11:01:22  dpj]
[ ./server/pipenet/pipenet_root_ifc.h ]
Merged up to US39
[91/05/04  10:08:56  dpj]

First working version.
[91/04/28  11:01:40  dpj]
[ ./server/pipenet/pipenet_updir_bytes.c ]
Merged up to US39
[91/05/04  10:09:00  dpj]

First working version.
[91/04/28  11:02:02  dpj]
[ ./server/pipenet/pipenet_updir_bytes_ifc.h ]
Merged up to US39
[91/05/04  10:09:08  dpj]

First working version.
[91/04/28  11:02:25  dpj]
[ ./server/pipenet/pipenet_upipe_bytes.c ]
Merged up to US39
[91/05/04  10:09:15  dpj]

First working version.
[91/04/28  11:02:42  dpj]
[ ./server/pipenet/pipenet_upipe_bytes_ifc.h ]
Merged up to US39
[91/05/04  10:09:18  dpj]

First working version.
[91/04/28  11:02:59  dpj]
[ ./server/tty/tty_agency.c ]
Merged up to US39
[91/05/04  10:09:24  dpj]

Derive from vol_agency instead of agency. Do not do a full open if
just stat()'ing the item.
[91/04/28  11:04:51  dpj]
[ ./server/tty/tty_agency_ifc.h ]
Merged up to US39
[91/05/04  10:09:26  dpj]

Derive from vol_agency instead of agency.
[91/04/28  11:05:38  dpj]
[ ./server/tty/tty_cmupty.c ]
Merged up to US39
[91/05/04  10:09:30  dpj]

Fixed "&" bug in gotosleep().
[91/04/28  11:06:05  dpj]
[ ./server/tty/tty_dir.c ]
Merged up to US39
[91/05/04  10:09:40  dpj]

Fixed bug in call to create_tty_names().
Cleaned-up ns_list_types().
[91/04/28  11:07:16  dpj]
[ ./server/ufs/ufs_inode.c ]
Picked-up fix from roy@osf,org: commented-out two locking statements.
[91/04/29            dpj]
[ ./server/ufs/ufs_subr.c ]
Picked-up a fix from roy@osf.org: messing with ILOCK.
[91/04/29            dpj]
[ ./server/ufs/ufs_xxx.c ]
Picked-up a fix from roy@osf.org: initialize inodeNINODE.
[91/04/29            dpj]
[ ./test/Makefile ]
Merged up to US39
[91/05/04  10:10:01  dpj]

First working version.
[91/04/28  11:07:35  dpj]
[ ./test/sockudp.c ]
Merged up to US39
[91/05/04  10:10:08  dpj]

Moved here from ./pkg/xkernel.
[91/04/28  11:08:03  dpj]
[ ./test/sockunix.c ]
Merged up to US39
[91/05/04  10:10:13  dpj]

First working version.
[91/04/28  11:08:27  dpj]
[ ./test/ttyname.c ]
Merged up to US39
[91/05/04  10:10:18  dpj]

First working version.
[91/04/28  11:08:49  dpj]
[ ./utils/Makefile ]
Merged up to US39
[91/05/04  10:10:23  dpj]

Added startxkernel.
[91/04/28  11:09:20  dpj]
[ ./utils/STARTUP.fsadmin ]
Merged up to US39
[91/05/04  10:10:27  dpj]

Removed /pipes and /nfs. Added /pipenet and /net.
[91/04/28  11:09:51  dpj]
[ ./utils/fsadmin.c ]
Merged up to US39
[91/05/04  10:10:31  dpj]

Added net_methods_setup().
[91/04/28  11:10:17  dpj]
[ ./utils/skel.c ]
1990 -> 1991
[ ./utils/skel.h ]
1990 -> 1991
[ ./utils/skelobj.c ]
1990 -> 1991
[ ./utils/skelobj_ifc.h ]
1990 -> 1991
[ ./utils/startup.sh ]
Merged up to US39
[91/05/04  10:10:55  dpj]

Removed the pipe server. Added the pipenet server and the xkernel.
[91/04/28  11:13:31  dpj]
[ ./utils/startxkernel.csh ]
Merged up to US39
[91/05/04  10:11:00  dpj]

First working version.
[91/04/28  11:13:53  dpj]
    
    
    
==========================================================================
   ***** US Version US41  (jms) *****
    
    
New features:
--- --------

 Abstract:
 ------
 - Implemented BSD style interruption of systemcalls using a new 
   interrupt package and modifications to MachObjects and system servers.
   
 - Include statistics changes from Dan Julin and UFS changes from Paul Roy.

 Summary of Contents:
 -------------
 - interrupt package: 
 	A language level interrupt mechanism for sync/async posting 
	  and sync/async handling of events.
	 versions of mach_msg and condition_wait.

 - MachObjects: 
	Upgraded to new IPC.  
	Add timeout option to remote invocation.
	Post interrupts to/in servers with active invocations.

 - Interruptible Servers
	Modified system servers to field interrupts where required.

 - Interruptible Syscalls:
	Implementation for BSD style of syscall interruption and signal handler
	  invocation.

 - Times/stats
	Mechanisms added for getting stats from mach object and timings (dpj).

 - UFS
	Speed and reliability enhancements (roy).

 - No More Sun3 support!

 Highlights:
 ----------
 A description of how to write servers and emul_lib code to conform with our
 interruptibility requirements.  A "must read" for all mach3 multi-server
 implementors.


 Interrupt Package
 -----------------
 The interrupt package is designed on the belief that code naturally
 falls into "regions" where cleanup for an interrupt is similar, may involve
 access to local variables, and is well defined.  The interrupt package
 supplies a way of defining such a region and associating a handler with it.

 There are two different kinds of interrupts recognized: synchronous and 
 asynchronous.  These labels describe the way that the interrupt is generated.
 A synchronous (intr_sync) interrupt would occur when specific error in the
 code causes an interrupt (e.g. EFAULT, EFLOAT).  The emulation translates mach
 exceptions into synchronous interrupts.  Asynchronous interrupts (intr_async)
 occur when some bit of software chooses to interrupt a thread for reasons
 other than the target threads actual code execution.

 Another concern about interrupts is when they are delivered.  Obviously
 synchronous interrupts must be handled immediately, yet it is useful
 to be able to delay the delivery of asynchronous interrupts to an
 appropriate point in the code.  Furthermore, some kinds interrupt delivery
 have more costly setup than others.  Hence each region/handler
 has an associated type.  These types are as follows:
	INTR_SYNC_IMMEDIATE	Deliver sync interrupt to handler immediately
	INTR_ASYNC_IMMEDIATE	Deliver async interrupt to handler immediately
	INTR_ASYNC_BOUNDS	Deliver when entering/leaving the region
	INTR_ASYNC_TEST		Deliver at user test points/entering/leaving
	INTR_ASYNC_BLOCKED	Hold for BOUNDS/TEST sub-region/handler.

 The following is an example of an interrupt region (via interrupt.h):
	INTR_REGION(INTR_SYNC_IMMEDIATE | INTR_ASYNC_TEST)
		/* Note: INTR_TEST only in a INTR_ASYNC_TEST region */
		.
		.
		.
		/*
		 * Invoke handler "here" for innermost INTR_ASYNC_TEST
		 * region iff INTR_ASYNC is marked/pending.
		 */
		INTR_TEST;
		.
		.
		.
	INTR_HANDLER	
		/* Handle interrupts.  Optional when "blocked"  */

		intr_type_t 	type;
		mach_error_t	error;
		int 		code, subcode;
		INTR_INFO(&type, &error, &code, &subcode); /* Optional */
		.
		.
		.
		/* 
		 * Optional return from the routine,
		 * NOTE: Normal "return" not valid from inside of INTR_HANDLER
		 * or INTR_REGION !!!
		 */
		INTR_RETURN(EXCEPT_SOFTWARE);	/* Optional */
	INTR_END

 It is important to be aware of the following properties of regions/region
 types before using them.
	- Each region is contained within a routine and the INTR_REGION,
	  INTR_HANDLER, and INTR_END are all at the same C scope.

	- Since regions are variant upon a current instruction pointer,
	  the interrupt mechanism works on a per thread basis.

	- One region/handler may field both synchronous and asynchronous
	  interrupts.

	- Regions may contain other regions, either directly or via subroutine
	  calls.  Hence active regions can be thought of as existing in two 
	  stacks.  A stack of "synchronous" regions and a stack of
	  "asynchronous" regions. One region/handler may reside on both stacks.
	  interrupts are delivered to the top/current handler on the
	  appropriate stack even if that region is not in the current
	  routine.

	- While in a handler for a given type of interrupt, the interrupt is 
	  held/masked until the end of the handler at which time may be 
	  delivered to a containing region (if any).  Interrupt are only 
	  masked while they are being handled.
	  
	- Only the oldest un-delivered interrupt of a given type
	  and its associated INTR_INFO are kept.  Subsequent interrupts
	  are discarded until the interrupt is serviced.  The same holds for
	  masked interrupts.  The question is not "how have I been interrupted"
	  but "have I been interrupted".

	- There is no way to "reraise" an interrupt to a region which contains
	  the current region.  Info and errors are propagated via return
	  values et.al.  A handler may choose to "post" an interrupt that
	  will be handled just as if anyone had posted it.

	- If the top/current region on the async stack is not an 
	  "INTR_ASYNC_IMMEDIATE" region, or there is no region on the async
	  stack, a "posted" async interrupt is marked as pending until a
	  delivery point is reached.  It may be that such a point will
	  not be reached and the interrupt will never be delivered.  It is
	  possible to reset the pending/masked states and the region stacks
	  upon completion of processing of a given request.

	- The user can/should supply a routine to be called iff there
	  is not a top/current region on the sync interrupt stack when
	  a sync interrupt is posted.

	- INTR_SYNC_IMMEDIATE, INTR_ASYNC_IMMEDIATE, and INTR_ASYNC_TEST
	  regions are slower to setup and much slower for delivery.

 Other Interrupt Routines
 ------------------------
 Obviously, there is more to the interrupt interface than just the
 region/handler macros.  Here it is:
	- intr_post_interrupt(intr_cthread_id, delivery_type, 
				interrupt_type, error, code, subcode)
		Mark an interrupt as having occurred and optionally
		attempt to deliver it.

	- intr_mach_msg(msg, option, send_size, rcv_size, rcv_name,
				timeout, notify);
		An asynchronously interruptible form of mach_msg.
		this routine is used just like mach_msg except that
		it is interrupted when an INTR_ASYNC occurs.
		it returns the same interrupt values that mach_msg
		normally returns.

	- intr_cond_wait(cond, lock)
		A form of condition wait that can be interrupted
		by INTR_ASYNC interrupts.  It used the same way as
		a normal condition wait except that the "condition
		loop" cannot be in a region where INTR_ASYNC interrupts
		are delivered immediately.  The return value is the
		INTR_EVENT/INTR_ERROR value for the interrupt else,
		ERR_SUCCESS.

	- intr_set_sync_default(sync_default_routine)
		Set the routine to be called when a synchronous
		interrupt is posted and there is no current sync handler.

	- intr_cthread_id_self()
	- intr_thread_to_cthread_id(thread)
	- intr_cthread_id_to_thread(id)
		Get/manipulate intr_cthread_ids

	- intr_init()
		Initialize the interrupt mechanism.
	- intr_reset()
		Remove all of the thread_info structures associated
		with the current process.  Useful for resetting
		interrupts after forking.
	- intr_reset_self()
		Reset the current thread clearing it of any pending 
		interrupts. Useful when the code to be interrupted
		(the syscall or RPC) has completed.

 Interrupt Usage in Mach3.0 MultiServer
 -------------------------------------
 Interrupts are used as a tool for the implementation of BSD style signals
 that occur during execution of a syscall.  In specific, interrupts are used
 to back us out of places in syscall emulations where pauses may occur.  Higher
 level code in the emulation library then calls the appropriate signal handler
 and retries as needed.  

 The following is a high/middle level view of signal implementation:
	- The TaskMaster receives all of the mach_exceptions for all threads
	  and forwards them to the notify thread in the emulation.  It also
	  sends all inter-process events to that thread.  Intra-process
	  events are posted directly without the aid of the TM or notify 
	  thread.  For "hard" signals (SIGSTOP/SIGKILL) the TM gives the
	  emulation a limited amount of time to cleanup before doing
	  the action to the process itself (via "tm_hurtme", more later).
	  
	- If we are not in a syscall, the notify thread stops the appropriate
	  emulated thread, posts the signal according to the standard BSD
	  rules, and then does the signal delivery and goes on its merry way.
	  Note: there is a default target thread for process events.
	  
	- If we are in a syscall, the signal gets posted and
	  the appropriate thread gets posted with the
	  (a)sync interrupt.  If the thread reaches an interrupt point
	  (may be immediate) it executes the handler and unwinds.

	- Unwinding is done by returning an exception error (exception_error.h)
	  usually "EXCEPT_SOFTWARE".  Higher level routines detect the error
	  and do further cleanup and return the error again.  The top level
	  (emul_syscall) recognizes this specific subsystem of errors, delivers
	  the signal(s) as in the previous case, and retries the syscall if 
	  need be.

	- If no interrupt point was encountered, the posted interrupts are
	  cleared and the signals are delivered just prior to returning from
	  emul_syscall.

	- The default signal handlers and the "handlers" for SIGSTOP/SIGKILL
	  invoke the TaskMaster method, "tm_hurtme", which will call
	  task_suspend/task_terminate and adjust its own state.
	  For each event, only the first call to "tm_hurtme" takes any action.

	- The intr_async handler for remote invocation in MachObjects sends an
	  "abort" message to the "agent" of the invoke being interrupted.  The
	  agent posts interrupts to each of its active invocation threads
	  This is generally just the one. An extra interrupt without
	  a corresponding signal just causes the syscall to retry (needed for
	  trivial signals like SIGCHILD anyway).
	  
	- If the server hits a interrupt point (never immediate) it just
	  cleans up and again returns "EXCEPT_SOFTWARE" otherwise it runs
	  to completion.
	  Note: All waits/mach_msg receives/et.al which do unbounded pauses
	  or potentially "long" pauses must be async interruptible iff they
	  are on a syscall emulation/remote invocation path.  At this time
	  a disk read/write is not considered "long".

	- The server sends a reply to the client that either contains
	  the EXCEPT_SOFTWARE, or the normal completion.

	- The MachObject invoke async interrupt handler is waiting/able
	  to accept either a normal reply or the interrupt reply and
	  reacts/returns appropriately.  If the method return value does not
	  show that it was interrupted, the interrupt is re-posted for
	  subsequent interrupt points if any.

 The following are policy statements for when/how interrupts effect the
 implementation of syscall emulations and servers:
	- Interrupt regions should occur at the lowest possible level to
	  give all levels of software a chance to cleanup.

	- Intr_mach_msg/intr_cond_wait (which contain intr_regions) should
	  be used whenever mach_msg/condition_wait would have been used 
	  iff the code is executed as part of any syscall emulation.
	  
	- Code must take into account that a subroutine may return an error
	  which cannot be ignored. "EXCEPT_SOFTWARE"

	- "Immediate" and "test" regions should be avoided in "normal" flow of
	  control situations because of the costs associated with region setup.

	- A routine has been installed via "intr_set_sync_default" and
	  further sync interrupt regions are unnecessary for normal syscall
	  emulation.

MachObject features/changes:
-------------------------------------------------------
	- Translated to "new" IPC.

	- Features to support interruption of remote invocation.

	- New port rights are used in the remote invocation argument
	  strings.  Instead of the old "ps" you now have "p(COPY_SEND)".
	  the string for the port right is the same as the end of the
	  "msgt_name" macros (eg. MAKE_SEND, MOVE_SEND,...).
	  (Example: "rpc: IN p(COPY_SEND); IN object<*>; IN OUT * int;")

	- Timeouts have been added.  They are declared by an argument to
	  the "rpc" declaration in a remote invocations argument string
	  (Example: "rpc<300>: IN p(COPY_SEND); IN int; IN int; IN int;")

	- No Senders notification is now used by the MachExternalObject and
	  friends to determine when there are no longer any external references
	  to server supplied objects.  Used to determine when to deallocate
	  agents et.al.  As part of this change the routines ns_(de)reference
	  were removed.

	- The signature/semantics of mach_object_start_handler has been changed
	  to the following:
	      mach_object_start_handler(min_waiting, max_waiting, max_threads)

Server features/changes:
--------------
    TTY server:
	- Remotely invoked methods have been made interruptible.
	- There had been only one "u-area" for the entire TTY server,
	  now there is a unique one for each active invoke.

    Pipenet server:
	- Pipes and bytestreams made interruptible.
	- See "From Dan Julin" below. 

    TaskMaster:
    	- Remove old logic for self signaling
	- Add tm_hurtme (described above)
	- Change semantics to "tm_event_to_tgrp" so that events are not
	  sent to oneself.

    UFS server:
    	- See "From Paul Roy" below.

    All:
	- Updated to reflect new signature of mach_object_start_handler.

  It is currently believed that all servers that require modification
  to be interruptible have been modified.

Other features/changes:
----------------------
 Convert_to_macho: add symbols so that we can link with a newIPC library set 
 without getting any newIPC symbols.  This hack is done so that we can still 
 build convert_to_macho after the switch to new IPC and run it on a 2.5 system.


Changes from Dan Julin
----------------------
(1) Compilation with no debugging:

Fixed Make.inc and a few Makefiles to really be able to compile
everything with debugging off with a single command-line switch
("DEBUGFLAGS=").

Changed the message in emul_generic to be at debug level 0 instead
of "critical".

(2) Improvements in the DIAG system:

Use lazy re-initialization after fork to avoid many check-ins with the
diag server. Modified the diag object and the various calls to
diag_startup() in server initialization routines accordingly.

Fixed libmach3 to allow cloning.

(3) MachObjects statistics gathering:

Added code in libmachobj to keep counts of many basic operations, and
to dump these counts to the diag channel by calling
mach_object_dump_statistics(). This code is under "_STATISTICS_"
conditionals.

Added a new switch to emul_init ("-stat <level>"), that causes these
statistics to be dumped whenever a UNIX process terminates (in
exit()).

Added a command in fsadmin to dump the MachObjects statistics in a
server: see "server management" below.

(4) Server management:

Created a new ns_get_mgr() method exported by all agencies, to get
access to a "manager" object that can be used to control a whole
server. Currently, the mgr object is actually the diag object, and the
only operation available is to dump the MachObjects statistics. This
method is defined in "./include/mgr_methods.h".  This whole facility
should all be replaced eventually with a clean server control
interface.

(5) Implemented getttimeofday() and a primitive version of getrusage().

(6) Bug fixes:

Fixed a couple of port leaks and other bugs in the task_master and 
task_master-related objects in the emulation library.

Cleaned-up and defunct'ed a few unused files dealing with the
generation of the list of emulated system calls in ./lib/emul:
	./lib/emul/bsd_syscalls.c
	./lib/emul/emul_entries.h
	./lib/emul/syscall_table.c

 Corrected incorrect macro definition for act_remove(), that
 prevented this routine from ever working correctly! Note: this solved
 a big leak in the task_master.

 Various misc. bug fixes in the emulation library.

(7) Improved the performance of the MachObjects package by
	- removing the per-entry lock in the method cache
	- inlining locking operations (also in the internals of  
cthreads)
	- unrolling a loop in method_tlb_clear
	- cleaning-up some calls to mach_method_null
 (All this gained us a factor of 3-4 on object instantiation!!!)

UFS changes from Paul Roy:
 - buffer cache no longer used on file data access path.
 - asynchronous read-ahead cache implemented.
 - data transfers across the ufs pagein/pageout interfaces result in
   the data being "consumed" rather than copied.  This preps the ufs
   for using an EMMI and device interface with deallocate semantics.
 - process of cleaning files has been simplified.
 - unlinked-but-still-open files are no longer cleaned.
 - truncation/file removal properly flushes/destroys memory object data.


Bug fixes:
--- -----
	- Add child_count so "wait" knows where there are none.
	- Further fixes to error return values.

Organizational changes:
-------------- -------
	- Use mach_syscalls.c/traps to get to kernel functions instead of
	  the mig interface all of the time.  Override vm_map/vm_allocate
	  with our own for the emulation lib.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
41
[ ./lib/emul/bsd_syscalls.c ]
Wastem
[ ./lib/emul/emul_entries.h ]
Wastem
[ ./lib/emul/syscall_table.c ]
Wastem
[ ./lib/threads/exception.c ]
Wastem
[ ./Make.inc ]
Added DEBUGFLAGS, to be redefined when compiling with debugging off.
[91/06/16  20:55:40  dpj]
[ ./TODO ]
More TODO
[ ./include/event_methods.h ]
Add "event_post_with_timeout" as an RPC timed form of event_post which is 
a no-reply remote method  invocation.
[91/06/24  15:14:02  jms]

Remove EVENT_TYPE constants
[91/04/15  16:56:38  jms]
[ ./include/interrupt.h ]
Remove "RE_REGIONS" just needless complication.

Add intr_set_sync_default() to define a routine to be called for synchronously
generated interrupts when no handler is set.

Add intr_reset to reset the interrupt stuff after forking.
[91/06/24  15:17:44  jms]

Initial Version
[91/04/15  16:58:55  jms]
[ ./include/mach_object.h ]
Use a single lock for the MethodCache instead of 256.
[91/06/28            dpj]

Added statistics gathering code under _STATISTICS_.
[91/06/21  17:05:11  dpj]
Change arguments to "mach_object_start_handler" to:
	min_waiting, max_waiting, max_threads.
[91/06/24  15:18:59  jms]

Update for new IPC
[91/04/15  16:59:44  jms]
[ ./include/mach_object_error.h ]
No further changes
[91/06/24  15:20:58  jms]

Add errors MACH_OBJECT_INVOKE_NOT_FOUND and MACH_OBJECT_MAX_INVOKES
[91/04/15  17:03:08  jms]
[ ./include/mgr_methods.h ]
First version.
[91/06/21  17:05:42  dpj]
[ ./include/net_methods.h ]
Added a "force load" construct.
[91/06/21  17:06:18  dpj]
[ ./include/ns_methods.h ]
Added ns_get_manager().
[91/06/21  17:06:57  dpj]
Waste ns_[de]reference.
[91/06/24  15:35:41  jms]
[ ./include/signal_methods.h ]
Remove old "self_sig" methods.
[91/06/24  15:36:24  jms]
[ ./include/tm_methods.h ]
Add "hurtme" routine for emulations to cause the TM to do stop/kill to it.
Add "own_task_id" arg to event_to_tgrp so that and change it so that
event_to_tgrp does not send event to said task.  Also add "is_in" aout
parameter so that and emulation will know if it needs to post an event to 
itself.
[91/06/24  15:41:45  jms]

[ ./lib/emul/Makefile ]
Added emul_resource.o.
[91/06/16  20:56:12  dpj]
Noise.
[91/06/24  15:43:13  jms]

Build directly with memory/*.o files directly (no more libmem).
[91/05/07  11:19:29  jms]

Strip out the ability to build MACH3_UNIX as well as additional KP
[91/04/15  17:05:14  jms]
[ ./lib/emul/bsd_emul_all ]
Added gettimeofday and getrusage.
[91/06/16  20:56:29  dpj]
[ ./lib/emul/emul_all.c ]
NoChange
x
[91/06/24  15:45:00  jms]

Update args to "mach_object_start_handler".
[91/05/07  11:20:20  jms]
[ ./lib/emul/emul_basic.c ]
Special code the measure the speed of the loader code,
under LOADERTEST.
[91/06/16  20:57:06  dpj]
No Further Change
[91/06/24  15:45:56  jms]

Bug fix, to many args to a vm_allocate call.
[91/05/07  11:21:42  jms]
[ ./lib/emul/emul_init.c ]
Added "-stat" switch for statistics gathering.
[91/06/21  17:07:45  dpj]
No Further Change
[91/06/24  15:56:41  jms]
[ ./lib/emul/emul_init_prog/Makefile ]
No Further Changes
[91/06/24  15:57:36  jms]

Use "memory" ofiles directly, no more "libmem"
[91/05/07  11:23:35  jms]

General KP
[91/04/15  17:06:11  jms]
[ ./lib/emul/emul_io.c ]
Waste ns_[de]reference.
[91/06/24  16:02:12  jms]
[ ./lib/emul/emul_memory.c ]
Noise
[91/06/24  16:07:27  jms]

Modify to call mig_vm_map and syscall_vm_map instead of htg_vm_map.
[91/04/15  17:07:09  jms]
[ ./lib/emul/emul_misc.c ]
Added statistics gathering logic.
[91/06/21  17:09:04  dpj]

Removed the diag object from the clone list, and arranged
for the diag connection to be lazily allocated after fork.
Added emul_host_port(), used by emul_gettimeofday().
Clean-up the task_master-related objects on exit.
[91/06/16  20:58:30  dpj]
Add NoMoreSenders logic.
Add routine to handle Panics/unhandled emulation lib sync events.
Reset interrupt system when forking.
analretentive=>NOT_SOLVED_BY_NO_MORE_SENDERS.
[91/06/24  16:17:01  jms]

No further change
[91/04/15  17:10:37  jms]

Call mach_object_init() not mach_object_tables_init()
[91/02/21  13:59:11  jms]
[ ./lib/emul/emul_proc.c ]
Added statistics gathering logic.
[91/06/21  17:09:39  dpj]

Clear the rusage structure returned in wait3(), instead
of returning garbage.
Added a call to reinitialize the diag system after fork,
without using the standard cloning system (we may want diag
to be ready before that).
[91/06/16  21:00:28  dpj]
Add child_count so "wait" knows where there are none.
[91/06/24  16:23:43  jms]

[ ./lib/emul/emul_resource.c ]
First version.
[91/06/16  21:00:47  dpj]
[ ./lib/emul/emul_signal.c ]
Modify self signaling logic so that it nolonger involves the TM
except when it request the TM to actually stop/kill it (tm_hurt_me).
Add appropriate logic to do same when signalling a group which contains oneself
[91/06/24  16:28:29  jms]
[ ./lib/emul/emul_time.c ]
Fixed error code returns for copyin/copyout problems.
Added emul_gettimeofday().
[91/06/16  21:02:18  dpj]
[ ./lib/emul/emul_user_init.c ]
Remove some ns_reference stuff
[91/06/24  16:29:12  jms]
[ ./lib/emul/i386/emul_machdep.c ]
No Further Changes
[91/06/24  16:30:32  jms]

Further fixes to error return values.
[91/05/07  11:26:29  jms]

Use the new interrupt mechanism for handling interrupts to threads currently
executing in the emulation libs/servers.
Strip out "uxsignal_do_handler".  Never worked,  correct version found in
"threads.c"
[91/04/15  17:26:52  jms]

Enable syscall retry for "except" subsystem errors.
Add active intr handler count args
[91/02/21  14:12:40  jms]

Upgrade to modified language exception handler interface.
[91/01/23  14:00:54  jms]
[ ./lib/emul/memory/Makefile ]
Noise
[91/06/24  16:31:26  jms]

Don't build a library, just ".o" files.
[91/05/07  11:27:13  jms]

Setup to build by over-riding vm_map and vm_allocate from mach_syscall.c
[91/04/15  17:30:37  jms]
[ ./lib/emul/syscall_common.c ]
Changed the message in emul_generic to be at debug level 0 instead
of "critical".
[91/06/16  21:02:55  dpj]
Shut off "emul_generic" messages unless debugging
[91/06/24  16:32:29  jms]
[ ./lib/load/Makefile ]
Re-created
[91/06/28            dpj]
[ ./lib/load/convert_to_macho.c ]
Declare some symbols so that we can link with a newIPC library set without
getting any newIPC symbols.  This hack is done so that we can still build
convert_to_macho after the switch to new IPC and run it on a 2.5 system.

[ ./lib/load/lib/Makefile ]
Created
[91/06/28            dpj]
[ ./lib/load/progs/Makefile ]
Created
[91/06/28            dpj]
[ ./lib/mach3/mach3/console.c ]
Re-initialized the probing code when setting the console port
explicitly. Set the console_port to MACH_PORT_NULL to cause
a re-initialization.
[91/06/16  21:03:52  dpj]
[ ./lib/mach3/mach3/mach3_flsbuf.c ]
Fixed for MACH3_UNIX.
[91/06/21  17:10:23  dpj]

Cleaned-up re-initialization after fork.
[91/06/16  21:04:24  dpj]
[ ./lib/machobj/MachExternalObject.c ]
Update to use new IPC.

Rework the mechanism for creating and destroying threads in a server.

Receive no more senders notifications and call the appropriate
agent routine.

Add logic so that a client can abort processing for a remote Mach Object
method invocation.  This involves a special "abort" message being sent
to the agent and all of the threads processing a request for that agent
getting the appropriate interrupt posted for it.  This interrupt
is then handled/serviced via "interrupt.h".
Note: It is only meaningful to deliver "async generated" interrupts
this way.  There is no "global" async handler supplied so the
individual services must supply handlers if there is a need to
abort the request.  If there will be no "waiting" while servicing the request,
then the server may choose to just complete.  This module just posts the
interrupt.

[91/06/24  16:44:56  jms]

Update to New IPC and service (method invocation) interruption .
[91/04/15  17:32:28  jms]
[ ./lib/machobj/MachExternalObject.h ]
Rework logic for adjusting the number of threads running in a server.
[91/06/24  16:45:59  jms]

Update to for new IPC
[91/04/15  17:35:06  jms]
[ ./lib/machobj/MachRemoteObject.c ]
Added statistics gathering code under _STATISTICS_.
[91/06/21  17:11:10  dpj]
Update to new IPC.
Cause NoMoreSenders to be sent to the agents external port.
Modify MachRemoteObject_default to interrupt requests to servers when needed.
[91/06/24  16:49:55  jms]

Update to new IPC and add mechanisms to use the interrupt mechanism
to enable interruption of remote invocations
[91/04/15  17:37:34  jms]

Add intr handler around RPC in MachRemoteObject_default
[91/02/21  14:02:52  jms]
[ ./lib/machobj/MachRemoteObject.h ]
NoFurtherChanges
[91/06/24  16:51:29  jms]

Update interface to use new IPC and add interfaces to interrupt active
remote invocations: (register_remote_invoke, deregister_remote_invoke,
interrupt_remote_invokes.)
[91/04/15  17:44:46  jms]
[ ./lib/machobj/Makefile ]
Added explicit DEBUGFLAGS, that includes _STATISTICS_.
[91/06/21  18:08:19  dpj]
Make "short names" for MachRemoteObject.c MachExternalObject.c
[91/06/24  16:52:42  jms]

Build interrupt.c here (temporary?)
[91/04/15  17:45:59  jms]
[ ./lib/machobj/i386/cthread_inline.awk ]
	Fixed the patterns to actually work on a 386.
	Added inlining for spin_lock().
[91/06/28            dpj]
[ ./lib/machobj/interrupt.c ]
Misc cleanup/bug fixes.

Add "intr_reset_self" to reset self after the "self" thread has completed
a task (eg finished emulating a given syscall, servicing a given request,...)

Add "intr_destroy_self" for removal of the interrupt information associated
with the current thread before destroying the thread.

Add "intr_reset" to reset after forking

add "intr_set_sync_default" to supply a routine to call when there is no
handler for synchronous interrupts and one arrives.
[91/06/24  17:00:50  jms]

Initial version
[91/04/15  17:46:49  jms]
[ ./lib/machobj/mach_object.c ]
Use a single lock for the MethodCache instead of 256.
Unroll the loop in method_tlb_clear() a bit.
Avoid calling mach_method_null() when possible.
[91/06/28            dpj]

Added statistics gathering code under _STATISTICS_.
[91/06/21  17:11:58  dpj]
[ ./lib/threads/Makefile ]
Added support to enable profiling (_PROFILE_) when desired.
[91/06/28            dpj]

Cleaned-up to allow debugging to be turned-off.
Defined CTHREAD_DATA.
[91/06/16  21:05:35  dpj]
No Further Changes
[91/06/24  17:07:32  jms]

No change.  Prepare to merge up to US40
[91/05/07  11:30:01  jms]

Don't build exception.c here
[91/04/15  17:48:10  jms]
[ ./lib/threads/cthread_internals.h ]
No Further Changes
[91/06/24  17:08:03  jms]

Add inclusion guards
[91/04/15  17:48:46  jms]
[ ./lib/threads/cthreads.c ]
No Further Changes
[91/06/24  17:08:35  jms]

Add cthread_bind_phantom to tell cthreads that a given phantom has a given
kernel thread.

Add cthread_bind to bind a given cthread to its current kernel thread.
returns the "id" (port_t) of that thread.
[91/04/15  17:54:06  jms]
[ ./lib/threads/cthreads.h ]
No Further Changes
[91/06/24  17:09:14  jms]
[ ./lib/threads/i386/cthread_inline.awk ]
	Fixed the patterns to actually work on a 386.
	Added inlining for spin_lock().

 Revision 2.2  90/03/14  17:29:18  orr
initial checkin.

 
[90/02/04  16:50:50  orr]
[ ./lib/threads/i386/lock.s ]
Added profiling code under _PROFILE_.
[91/06/28            dpj]
[ ./lib/threads/i386/thread.c ]
No Further Changes
[91/06/24  17:11:11  jms]

Fix cthread_do_handler bugs and modify to work with new interrupt mechanism
[91/04/15  18:02:39  jms]

Fix the description of fields in a jmp_buf and their uses.
[91/02/21  14:06:39  jms]
[ ./lib/us/Makefile ]
Added mgr_methods.o.
[91/06/21  17:12:41  dpj]
[ ./lib/us/access_table.c ]
Added ns_get_manager().
[91/06/21  17:13:25  dpj]
Remove access_entries for ns_[de]reference
Add tm_hurtme, no_remote_senders
[91/06/24  17:13:25  jms]
[ ./lib/us/agency.c ]
Added ns_get_manager().
[91/06/21  17:15:37  dpj]
[ ./lib/us/agency_ifc.h ]
Added ns_get_manager().
[91/06/21  17:16:48  dpj]
[ ./lib/us/agent_helper.c ]
Remove the ns_[de]reference routines.
Add no_remote_senders to do what ns_dereference did before when it went to 0.
[91/06/24  17:15:43  jms]
[ ./lib/us/agent_helper_ifc.h ]
Remove ns_[de]reference
Add no_more_senders.
[91/06/24  17:16:32  jms]
[ ./lib/us/agent_ifc.h ]
Noise
[91/06/24  17:17:41  jms]
[ ./lib/us/aot.c ]
Simplified clean and destroy logic.
Changed to use vn_reference.
[91/06/11  11:39:06  roy]

Added aot_get_state.
Changed aot_change_state to aot_set_state.
[91/06/06  17:00:47  roy]

Removed mapped_ro and mapped_rw states; added must_clean state.
[91/06/05  13:49:31  roy]

Fix problem whereby an entry being cleaned is moved to
a different queue.
[91/05/29  10:30:55  roy]
[ ./lib/us/aot_ifc.h ]
Added aot_get_state.  
[91/06/06  16:59:18  roy]

Removed mapped_ro and mapped_rw states; added must_clean state.
[91/06/05  13:51:34  roy]
[ ./lib/us/aot_int.h ]
Removed clean and destroy times from aot entry.
[91/06/11  11:41:02  roy]

Removed mapped_ro and mapped_rw queues; added must_clean queue.
[91/06/05  13:50:38  roy]
[ ./lib/us/bytestream.c ]
Code from Dan to make bytestreams interruptible
[91/06/24  17:21:03  jms]
[ ./lib/us/cat.c ]
Update to new IPC
Remove cat_terminate.  Handled elsewhere with NoMoreSenders
[91/06/24  17:22:25  jms]
[ ./lib/us/diag.c ]
Fixed for MACH3_UNIX, lazy initialization, etc.
Added mgr_dump_machobj_statistics(), mgr_reset_machobj_statistics().
[91/06/21  17:20:18  dpj]

Re-worked to allow lazy initialization of diag-server connection.
Removed cloning methods. We now use diag_post_fork() instead.
[91/06/16  21:06:44  dpj]
[ ./lib/us/diag_ifc.h ]
Added mgr_dump_machobj_statistics(), mgr_reset_machobj_statistics().
[91/06/21  17:21:06  dpj]

Removed cloning methods. We now use diag_post_fork() instead.
[91/06/16  21:07:03  dpj]
[ ./lib/us/dir.c ]
Added setup for mgr_methods.
[91/06/21  18:08:56  dpj]
[ ./lib/us/event_methods.c ]
Update arg strings to new IPC
[91/06/24  17:23:03  jms]
[ ./lib/us/fs_dir.c ]
Added setup for mgr_methods.
[91/06/21  18:09:12  dpj]
[ ./lib/us/fs_file.c ]
Upgrade to new io_deactivate signature
[91/06/27  14:00:34  jms]
[ ./lib/us/fs_fio.c ]
Removed max_count arg to io_pagein().
[91/06/25  12:02:30  roy]
[ ./lib/us/mf_mgr.c ]
Merge to US40.
[91/06/12  14:28:42  roy]

No need to write size out in io_deactivate.
[91/06/06  17:01:58  roy]

Added io_set_size method.  io_clean now always writes the 
size to backing store.
[91/06/05  13:53:48  roy]
[ ./lib/us/mf_mgr_ifc.h ]
Added io_set_size method.
[91/06/05  13:54:44  roy]
[ ./lib/us/mgr_methods.c ]
First version.
[91/06/21  18:09:32  dpj]
[ ./lib/us/mountpt.c ]
Remove some ns_[de]reference stuff.
[91/06/24  17:23:54  jms]
[ ./lib/us/ns_methods.c ]
Added ns_get_manager().
[91/06/21  18:09:47  dpj]
Remove ns_[de]reference calls logic.
[91/06/24  17:25:28  jms]

Make the port arg to ns_authenticate a "COPY_SEND" port.
[91/05/07  11:31:43  jms]
[ ./lib/us/pager.c ]
Removed max_count arg in call to io_pagein().
[91/06/25  12:03:13  roy]

- new iop_flush method to flush pages from memory
- iop_deactivate now takes an arg to forcibly destroy 
  the memory object
- re-enable memory object caching
[91/06/05  13:57:32  roy]

- pageout buffer is consumed by io_pageout
- remove read-ahead logic at this level
- temporarily disable caching until truncate is
  implemented properly
[91/05/29  10:33:33  roy]
[ ./lib/us/pager_ifc.h ]
New iop_flush method.
[91/06/05  13:58:18  roy]
[ ./lib/us/recordstream.c ]
Code from Dan to make record streams interruptible
[91/06/24  17:26:37  jms]
[ ./lib/us/shcond.c ]
No Further Changes
[91/06/24  17:27:15  jms]

Update port args to new ipc rights
[91/05/07  11:33:41  jms]
[ ./lib/us/shcond_mgr.c ]
Made the hash table size a power of 2. Sigh...
[91/06/21  18:10:10  dpj]
Update to new IPC.
[91/06/24  17:27:59  jms]
[ ./lib/us/test/test_driver.c ]
Remove ns_[de]reference calls logic.
[91/06/24  17:28:43  jms]
[ ./lib/us/test/test_global.c ]
Change call to "mach_object_start_handler" to reflect its new args.
[91/06/24  17:30:32  jms]
[ ./lib/us/test/test_mfrw.c ]
Remove ns_[de]reference calls/logic.
[91/06/24  17:31:23  jms]
[ ./lib/us/test/test_ns.c ]
Remove ns_[de]reference calls/logic.
[91/06/24  17:32:09  jms]
[ ./lib/us/tm_methods.c ]
Change argument strings to reflect new IPC
Add "tm_hurtme"
Add "Not Me" logic to event_to_tgrp
[91/06/24  17:33:51  jms]
[ ./lib/us/vn_dir.c ]
Convert to using vn_reference.
[91/06/07  10:41:52  roy]

Changed aot_change_state call to aot_set_state.
[91/06/06  17:02:52  roy]

Modified ns_insert_entry and ns_remove_entry to mark 
file agencies as permanent and temporary, respectively.
[91/06/05  14:01:00  roy]
[ ./lib/us/vn_dir_ifc.h ]
Convert to using vn_reference.
[91/06/07  10:42:25  roy]
ns_reference=>vn_reference
[91/06/24  17:34:52  jms]
[ ./lib/us/vn_file.c ]
Added act_obj_clean method; eliminated act_obj_clean_prepare
and act_obj_clean_commit methods.
[91/06/11  11:43:27  roy]

Convert to using vn_reference.
[91/06/07  13:16:46  roy]

Significant changes associated with new rule that
only the process of cleaning may change the state
of a file whose current state is AOT_STATE_FILE_MUST_CLEAN.
[91/06/06  17:10:01  roy]

Added permanent() and temporary() methods.  Files
that have been marked as temporary are not cleaned.
[91/06/05  14:03:37  roy]
[ ./lib/us/vn_file_ifc.h ]
Added act_obj_clean method; eliminated act_obj_clean_prepare
and act_obj_clean_commit methods.
[91/06/11  11:42:28  roy]

Convert to using ns_reference.
[91/06/07  10:46:07  roy]

Added 'writable' local var.  Got rid of unused local vars.
[91/06/06  17:05:27  roy]

Added permanent and temporary methods.
[91/06/05  12:46:58  roy]
ns_reference=>vn_reference
[91/06/24  17:35:57  jms]
[ ./lib/us/vn_internal.h ]
No Further Changes
[91/06/24  17:37:00  jms]
[ ./lib/us/vn_mgr.c ]
Clean every 30 sec., destroy every 10 sec.
[91/06/12  09:16:00  roy]
[ ./lib/us/vn_symlink.c ]
Convert to using vn_reference.
[91/06/07  10:40:59  roy]

Changed aot_change_state call to aot_set_state.
[91/06/06  17:03:22  roy]
ns_reference=>vn_reference
[91/06/24  17:37:26  jms]
[ ./lib/us/vn_symlink_ifc.h ]
Convert to using vn_reference.
[91/06/07  10:41:23  roy]
ns_reference=>vn_reference
[91/06/24  17:37:54  jms]
[ ./lib/ux/uxsignal.c ]
Do interruption of syscalls (post interrupts, modify sigpause,wait etc.)
Enable direct posting to self without going through TM.
Add "event_post_with_timeout"
[91/06/25  11:34:01  jms]

Misc fixes.
[91/05/07  11:35:33  jms]

Modify to use the "interrupt" mechanism to interrupt threads executing in
the emulation lib.
[91/04/15  18:04:44  jms]

Cosmetic changes
[91/02/21  14:07:54  jms]
[ ./lib/ux/uxsignal_ifc.h ]
Remove old (via TM) self signal routines
Add event_post_with_timeout
[91/06/25  11:38:50  jms]
[ ./local_include/act_internal.h ]
Fixed incorrect (duplicate) formal parameter names in act_remove().
[91/06/16  21:07:37  dpj]
[ ./local_include/act_obj_internal.h ]
Added act_obj_clean method; removed act_obj_clean_prepare
and act_obj_clean_commit methods.
[91/06/11  11:45:22  roy]
[ ./local_include/cat_ifc.h ]
Remove cat_terminate
[91/06/25  11:39:19  jms]
[ ./local_include/io_internal.h ]
Remove max_count arg from io_pagein().
[91/06/25  12:00:20  roy]

Merge to US40.
[91/06/12  15:22:46  roy]

Added destroy arg to io_deactivate and iop_deactivate.
[91/06/11  11:46:29  roy]
[ ./pkg/xkernel/STD/Makefile ]
Disabled debugging.
[91/06/16  21:07:59  dpj]
[ ./pkg/xkernel/mach3/Makefile.template ]
Disabled debugging.
[91/06/16  21:08:23  dpj]
[ ./pkg/xkernel/share/debug.c ]
Corrected a MACH3_MODS comment.
[91/06/16  21:09:08  dpj]
[ ./pkg/xkernel/user/net_init.c ]
Update call to mach_object_start_handler to new signature
[ ./server/diag/Makefile ]
Fix from dpj
[91/06/27  14:02:55  jms]
[ ./server/name/name_init.c ]
No Further Changes
[91/06/25  11:40:31  jms]

Update args to "mach_object_start_handler".
Add "-stop" command line arg for debugging
[91/05/07  11:36:54  jms]
[ ./server/nfs/nfs_main.c ]
Use new args to "mach_object_start_handler"
[91/06/25  11:41:24  jms]

[ ./server/pipenet/pipenet_connector.c ]
Make pipes and such interruptible from DPJ
[91/06/25  11:42:36  jms]
[ ./server/pipenet/pipenet_init.c ]
Changed diag initialization so that we get a real name even with
lazy initialization.
[91/06/21  18:11:05  dpj]
Use new args to "mach_object_start_handler"
[91/06/25  11:43:30  jms]
[ ./server/tm/Makefile ]
Removed "-g".
[91/06/16  21:09:28  dpj]
[ ./server/tm/tm_agency.c ]
Fixed a bug in task_id allocation code, that was causing us
to scan the entire task_id space each time...
[91/06/16  21:10:12  dpj]
Cause a thread which receives a mach error to stay suspend after
"catching" the exception from the mach kernel.
[91/06/25  11:45:29  jms]
[ ./server/tm/tm_main.c ]
Added setup for mgr_methods.
[91/06/21  18:11:16  dpj]
Use new args to "mach_object_start_handler"
[91/06/25  11:45:58  jms]
[ ./server/tm/tm_mapping.c ]
Deallocate the task_port dead name when the task has died.
[91/06/16  21:10:51  dpj]
[ ./server/tm/tm_task.c ]
Add tm_hurtme to stop/kill an emulated process.  Called remotely by the
emulation itself or called by TM after timeout when posting a "hard" signal.

Remove old "self sig via TM" logic.
Add "state" field to task so we we know when we are sleeping, i
we know when we're awake...
[91/06/25  11:51:35  jms]
[ ./server/tm/tm_task_group.c ]
Change tm_event_to_tgrp so that it doe not send a signal to the caller
and tells the caller if it was contained in said tgrp.
[91/06/25  11:54:15  jms]
[ ./server/tm/tm_task_ifc.h ]
Add tm_hurtme.
[91/06/25  11:54:55  jms]
[ ./server/tty/mach_synch.c ]
make the tty server interruptible in the mach_objects/interrupt.h sense.
[91/06/25  13:22:00  jms]

Change so that "gotosleep" will be interrupted when the remote invocation
mechanism wants to interrupt an active tty call.
[91/04/15  18:06:39  jms]
[ ./server/tty/struct_xxx.c ]
HISTORY:
[91/06/25  13:25:32  jms]
[ ./server/tty/sys/thread.h ]
Make "u-area" in a thread based structure instead of just one.
[91/06/25  13:27:38  jms]
[ ./server/tty/tty_cmupty.c ]
Fix args to _longjmp
[91/06/25  13:28:20  jms]
[ ./server/tty/tty_io_procs.c ]
Do per thread "u-areas" instead of just one.
[91/06/25  13:30:02  jms]

pickup mainline changes
[91/04/15  18:07:10  jms]
[ ./server/tty/tty_server.c ]
Use new args to "mach_object_start_handler"
[91/06/25  13:30:30  jms]
[ ./server/tty/tty_signal.c ]
Update to new args for tm_event_to_tgrp
[91/06/25  13:31:10  jms]
[ ./server/ufs/Makefile ]
Added cache.o, disk.o, data.o, device_reply_hdlr.o.
[91/05/29  10:37:28  roy]
[ ./server/ufs/cache.c ]
Fix cache_write_setup to not release lock before 
calling BUF_WAIT.
[91/05/29  18:36:20  roy]

Fix check for empty queue in cache_acquire.
[91/05/29  10:54:00  roy]
[ ./server/ufs/cache.h ]
Merge to new branch.
[91/05/29  10:54:52  roy]
[ ./server/ufs/data.c ]
Clean up error handling.
[91/05/29  10:56:43  roy]
[ ./server/ufs/device_reply_hdlr.c ]
Merge forward to new branch.
[91/05/29  10:58:03  roy]
[ ./server/ufs/disk.c ]
Errors not tolerated on disk I/O.
[91/05/29  11:00:04  roy]
[ ./server/ufs/include/base.h ]
Merge to new branch.
[91/05/29  10:50:07  roy]
[ ./server/ufs/include/inode.h ]
Add error check to ILOCK macro.
[91/05/29  10:39:41  roy]
[ ./server/ufs/include/zalloc.h ]
Merge to new branch.
[91/05/29  10:50:36  roy]
[ ./server/ufs/sys_inode.c ]
Removed max_count arg to ufs_pagein().
[91/06/25  12:01:27  roy]

Simplified ufs_pagein.  Moved uiomove to this file.
[91/05/29  11:03:17  roy]
[ ./server/ufs/ufs_bio.c ]
In brelse, put zero length buffers on age queue so that
they can be found by getnewbuf.
[91/05/29  18:50:33  roy]

Cleaned up I/O post-processing in bread and bwrite.
Rewrote allocbuf (a la the single-server ufs).
Moved binit to this file.
[91/05/29  11:05:54  roy]
[ ./server/ufs/ufs_bmap.c ]
Added comment to bmap.
[91/05/30  12:56:38  roy]

When extending a file use data_write to write
file data.
[91/05/29  11:07:55  roy]
[ ./server/ufs/ufs_export.c ]
Removed max_count arg to fss_pagein().
[91/06/25  12:00:54  roy]

Added last_link out arg to fss_remove.
[91/06/05  12:43:20  roy]

Implemented notion of unix_master.
Changed fss_{pagein,pageout} to use ufs_{pagein,pageout}.
Fixed bug in fss_link not to leave parent dir locked.
[91/05/29  11:11:54  roy]
[ ./server/ufs/ufs_inode.c ]
Added comment to itrunc.
[91/05/30  12:57:06  roy]

Fix syntax error.
[91/05/29  18:38:56  roy]

Use data_write to write file data in itrunc.
Moved ihinit to this file.
[91/05/29  11:41:47  roy]
[ ./server/ufs/ufs_subr.c ]
Take inode lock when updating inodes.
[91/05/29  11:43:27  roy]
[ ./server/ufs/ufs_xxx.c ]
Merge in stuff from roy@osf
[91/06/27  13:23:59  jms]

   Update args to "mach_object_start_handler".
[91/05/07  11:37:51  jms]
[ ./server/ufs/zalloc.c ]
Merge to new branch.
[91/05/29  11:45:41  roy]
[ ./test/Makefile ]
Added machobj.
[91/06/21  18:11:29  dpj]
[ ./test/machobj.c ]
Improved output format.
Improved measurements for indirect procedure calls.
Made command-line switches more like those of the "machipc" program.
[91/06/22  23:09:35  dpj]

First version.
[91/06/21  18:11:45  dpj]
[ ./utils/STARTUP.fsadmin ]
Add top level links to /ufs/test,/ufs/.cshrc
[91/06/25  13:35:54  jms]
[ ./utils/fsadmin.c ]
Added statistics gathering methods.
[91/06/21  18:12:03  dpj]
Remove ns_reference stuff.
[91/06/25  13:37:28  jms]

Add "-stop" cmd line arg for debugging
[91/05/07  11:39:24  jms]
    
    
    
==========================================================================
   ***** US Version US42  (jjc) *****
    
    
New features:
--- --------

A new server, the Configuration Server, was added to the multi-server system.
This new server is intended to be a configuration/admin/startup server that
provides for:

		Prefix Table
			Initialization (global/per user)
			Dynamic changes (mount/umount)
		List of All Servers
			Shutdown
			Reboot
			Sync
		Start All Servers
			Replace startup script
			Initial access to servers
			Name service
			Shared library
			Handout device ports
			Nanny?
		Global Functions
			settimeofday
			hostname, ifconfig, etc.
		Resource Limits
			Quotas
		/dev
		
The first version of the configuration server initializes the prefix table for
emul_init, starts the servers, and provides name service for the servers.  The 
command line syntax for the configuration server is of the form:

	config_server [-d<debug level>] [-p<prefix file>] [-s<startup file>] 
[emulation command line]

Because of the configuration server, the name space looks different.  The root,
/, points at the ufs server now instead of the root name server.  The name
server is rooted at /server and the tty_server is rooted at /dev.  The prefix
configuration file determines what is rooted where.  Each line in the prefix
configuration file is of the form <path name> => <server name>.  Any line
beginning with "#" is considered a comment and ignored.  The default prefix
configuration file is /mach_servers/us/lib/prefix.config.

The configuration server startup file is simply a C shell script that is 
executed by the configuration server to start the servers in the multi-server
system.  It is similar to the old multi-server startup file, but simpler.  
Eventually, the configuration server may be changed to start each server 
individually instead of using a shell script.  The default startup file is
/mach_servers/rc.us.

The rest of the command line after any switches is considered to be the 
emulation command line.  It defaults to be "/mach_servers/us/bin/emul_init
-t/dev/console /bin/csh" if there isn't anything after the configuration server
name or switches.  If you just want to start the servers and not the emulation,
then you can just give something innocuous like "/bin/echo done".  Be aware 
that the configuration server is the name server for the servers, so emul_init
might not be able to lookup the servers if the emul_init isn't started by the
config_server and the config_server isn't the official name server.  

The source for the configuration server and its default files are in 
/afs/cs/project/mach/mach3/us/src/latest/server/config.


Nitty gritty details:

Added new sys_agency to libus to export methods from the configuration server
like sys_get_prefix_table.

Changed emul_init to talk to the configuration server and use
sys_get_prefix_table instead of talking to the root name server.

Changed libemul to lookup servers with names /server/<server name> instead of
/<server name>.

Picked up netname.defs, notify.defs, etc. from /afs/cs/project/mach/mach3/
release for snames part of the configuration server.  Updated kernel header
files in mach_include_sa, so these files would compile.

Changed occurrences of msgh_kind to msgh_seqno, so the multi-server will run
on the newer kernels.

Removed links pointing /bin at /ufs/bin, etc. from STARTUP.fsadmin.

Bug fixes:
--- -----

Changed debugging statements in emul_init and the servers to only print
debug messages if the debugging level is greater than 0, so there wouldn't be
so many annoying messages when running on POE.

Changed libthreads to use hardwired number (128K) for stack size instead of
probing to determine stack size because each successive cthread_fork leaves
us with half as much stack when it bumps into the red zone.

Fixed bug in lib/us/vn_dir.c that caused vn_dir_ns_resolve to return a null
object even though it returned success.

Fixed emul_generic to really behave like nosys and return EINVAL for the table
call even though it fakes success for all the other non-emulated system calls.

Fixed fsadmin to read in authid map file instead of trying to map it in.

Picked up a number of bug fixes from Dan Julin for fixing up vectoring of
emulated system calls, getting the ufs server to link by adding dummy routines
to lib/us/pager.c and commenting out uses of vm_pageable in server/ufs/
zalloc.c, and backing out Paul Neves' changes to fs_access.


Organizational changes:
-------------- -------

Configuration server starts all the servers instead of startup script.  / is
really the file system root now.


Special notes:
------- -----
Tested on single server and POE on plopov.

Thanks to Dan Julin for providing me with advice and some bug fixes for all
the problems that arose.  I never thought that putting snames into the 
configuration server and picking up new include files would cause me so much 
trouble.

Thanks also to Rich Draves for compiling a version of MK64 with a bug fix that 
made POE work on the newer kernels and saved me the trouble of trying to
figure out why POE wouldn't run on MK62.


******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
42
[ ./mach_include_sa/FILELIST ]
Updating all files
[ ./mach_include_sa/FILELIST ]
Updating all files
[ ./include/sys_methods.h ]
Defined MAX_PREFIX.
[91/07/26            jjc]
Created.
[91/06/24            jjc]
[ ./lib/emul/emul_all.c ]
[91/10/01  17:10:35  jjc]
[ ./lib/emul/emul_init.c ]
	Changed debugging statements to only print if the debugging level
	is greater than 0.
Added call to sys_methods_setup(), so we can use the configuration
server external methods.
[91/04/25            jjc]
[ ./lib/emul/emul_io.c ]
Changed uses of /pipenet to /server/pipenet.
[91/07/22            jjc]
[ ./lib/emul/emul_misc.c ]
Added call to sys_methods_setup() to emul_initialize(), so
we can talk to the configuration server.
     Call external routine emul_setup() to establish emulation vectors.
[91/07/06            jjc]
[ ./lib/emul/emul_socket.c ]
Changed uses of /pipenet to /server/pipenet.
Changed uses of /net to /server/net.
[91/07/22            jjc]
[ ./lib/emul/emul_user_init.c ]
[91/10/01  17:28:41  jjc]
[ ./lib/emul/emul_user_misc.c ]
Changed public_ns_port to public_config_port.
[91/06/28            jjc]
[ ./lib/emul/i386/emul_machdep.c ]
Picked up changes from Dan Julin:
	Added emul_setup().
	Removed a bunch of dummy statements left by jms while fighting
	a compiler problem.
	Removed MACH3_UNIX case.
	Eliminated dyn_methods and lib/load.
[91/10/01            jjc]
[ ./lib/emul/i386/emul_vector.s ]
Picked up from Dan Julin:
Replaced emulation vectors to avoid the "EE" array.
Added a routine to switch stacks before calling emul_initialize().
[91/10/01            jjc]
[ ./lib/emul/syscall_common.c ]
Changed emul_generic() to be a switch statement which returns EINVAL
for the table system call and returns 0 for everything else.
[91/09/06            jjc]
[ ./lib/mach3/mach3/Makefile-include ]
Added notify.defs.  Defined MK_SRC, MK_REL, PATH, LPATH, CPATH.
Added mach_message_server() and mach_message_destroy() to 
DEFAULT_OFILES.
Moved ${LOCAL_RELDIR}/include/servers to end of VPATH, so we will
pick up defs files from the current directory before the release area.
[91/09/18            jjc]
[ ./lib/mach3/mach3/mach_exception.c ]
Updated.
[91/06/11            jjc]
[ ./lib/mach3/mach3/mach_msg_destroy.c ]
Picked up from /afs/cs/project/mach/mach3/user/src/latest/lib/libmach
for snames part of the configuration server.
[91/10/01  18:30:43  jjc]
[ ./lib/mach3/mach3/mach_msg_server.c ]
Picked up from /afs/cs/project/mach/mach3/user/src/latest/lib/libmach
for snames part of the configuration server.
[91/10/01  18:32:36  jjc]
[ ./lib/mach3/mach3/mach_privileged_ports.c ]
Replaced occurrences of msgh_kind with msgh_seqno.
[91/10/04            jjc]
[ ./lib/mach3/mach3/netname.defs ]
Picked up from /afs/cs/project/mach/mach3/release/@sys/latest/include
for snames part of the configuration server.
Included local std_types.defs.
[91/10/01            jjc]
[ ./lib/mach3/mach3/notify.defs ]
Picked up from /afs/cs/project/mach/mach3/release/@sys/latest/include
for snames part of the configuration server.
Included local std_types.defs.
[91/10/01            jjc]
[ ./lib/mach3/mach3/service.defs ]
Picked up from /afs/cs/project/mach/mach3/release/@sys/latest/include
for snames part of the configuration server.
Included local std_types.defs.
[91/10/01            jjc]
[ ./lib/mach3/mach3/std_types.defs ]
Picked up from /afs/cs/project/mach/mach3/release/@sys/latest/include
for snames part of the configuration server.
[91/10/01            jjc]
[ ./lib/machobj/MachExternalObject.c ]
Don't look at msg->msgh_kind to see if we have a notification message
when checking for no more senders notification.
[91/10/04            jjc]
[ ./lib/machobj/MachRemoteObject.c ]
Set msgh_seqno to zero in place of uses of msgh_kind.
[91/10/04            jjc]
[ ./lib/threads/stack.c ]
Changed stack_init() (again) to assume that the stack size is 128K
because this is the biggest that poe can handle.  With probing the 
stack to determine its size, each successive cthread fork ends up
giving us half as much stack space because we bump into the red zone
that cthreads puts at the bottom of the stack.  Just use a fixed sized
stack until we pick up the new, better cthreads.
[91/09/30            jjc]
[ ./lib/us/Makefile ]
[91/10/01  18:50:10  jjc]
[ ./lib/us/access_table.c ]
[91/10/01  18:54:16  jjc]
[ ./lib/us/fs_access.c ]
Backed-out Paul Neves' fix for NSR_EXECUTE, which does not work
for execute-only files.
[91/10/06            dpj]
[ ./lib/us/memory_object.c ]
Added memory_object_change_completed() and picked up from Dan Julin:
Added memory_object_supply_completed() and memory_object_data_return().
[91/10/03            jjc]
[ ./lib/us/pager.c ]
Added memory_object_change_completed().
Picked up from Dan Julin:
Added memory_object_supply_completed() and memory_object_data_return();
dummy routines for now.
Use mach_port_destroy() instead of mach_port_deallocate() when dealing
with receive rights.
[91/10/03            jjc]
[ ./lib/us/pager_ifc.h ]
Added memory_object_change_completed().
Picked up from Dan Julin:
Added memory_object_supply_completed() and memory_object_data_return().
[91/10/03            jjc]
[ ./lib/us/sys_agency.c ]
Fixed up sys_agency_sys_get_prefix_table().
[91/10/01  19:03:25  jjc]

Created.
[91/06/20            jjc]
[ ./lib/us/sys_agency_ifc.h ]
Created.
[91/06/20            jjc]
[ ./lib/us/sys_methods.c ]
Fixed arguments to sys_get_prefix_table().
[91/10/01  19:04:49  jjc]

Created
[91/06/25            jjc]
[ ./lib/us/vn_dir.c ]
Fixed vn_dir_fs_fsid_export() to return the error from 
ns_create_agent() instead of falling through and returning later
with some random return value from vn_dereference().
[91/10/02            jjc]
[ ./local_include/us_ports.h ]
Changed NS_ROOT_PORT to CONFIG_PORT.
[91/04/25            jjc]
[ ./mach_include_sa/Makefile ]
Replaced occurrences of "*" with ".*".
Added i386 to DIRS and defined DEVICE_I386_INCLUDES.
[91/09/19            jjc]
[ ./pkg/netmsg/server/netipc_mach3.c ]
Replaced occurrences of msgh_kind with msgh_seqno.
[91/10/04            jjc]
[ ./pkg/xkernel/protocols/mach3_ether.c ]
Replaced occurrences of msgh_kind with msgh_seqno.
[91/10/04            jjc]
[ ./server/Makefile ]
Added config to list of SUBDIRS.
[91/10/03            jjc]
[ ./server/as/cas_main.c ]
Removed "CAS initialised." message.
[91/04/25            jjc]
[ ./server/as/cas_procs.c ]
Removed some debugging statements from cas_login_create().
[91/04/25            jjc]
[ ./server/config/Makefile ]
Added snames files, nprocs.o  and snames.o, to list of OFILES.
Defined DATAFILES to be prefix.config and rc.us and install them in lib and
bin, respectively.
[91/10/02  21:55:48  jjc]

Created.
[91/06/28            jjc]
[ ./server/config/config_server.c ]
Added name service by borrowing code from snames.
Changed init_prefix_table() to use internal name lookup.
Fork and exec emul_init.
Changed command line syntax (again) to "config_server -d<debug level>
-p<prefix config file> -s<startup script> <emulation command line>".
[91/09/22            jjc]
Added startup of servers from shell script.
Changed init_prefix_table() to retry looking up servers after certain
[91/09/17  15:02:24  jjc]
[ ./server/config/nprocs.c ]
Incorporated snames name server into the Configuration Server.
[91/10/02  17:07:38  jjc]
[ ./server/config/prefix.config ]
Created.
[91/10/02  17:56:45  jjc]
[ ./server/config/rc.us ]
Created.
[91/10/02  18:05:20  jjc]
[ ./server/config/snames.c ]
Incorporated snames name server into the Configuration Server,
splitting main() into snames_setup() and snames().
[91/09/22            jjc]
[ ./server/diag/diag_main.c ]
Changed to only print out "DIAG: server started" message
when debugging is on.
[91/04/25            jjc]
[ ./server/tty/tty_server.c ]
	Changed printf of device server port to a DEBUG0 statement.
[91/04/25            jjc]
[ ./server/tty/tty_signal.c ]
	Changed diag_format calls to DEBUG0 and ERROR statements.
[91/04/25            jjc]
[ ./server/ufs/zalloc.c ]
Commented out uses of vm_pageable().
[91/10/03            jjc]
[ ./utils/STARTUP.fsadmin ]
Removed links for /bin, /tmp, etc..
[91/07/21            jjc]
[ ./utils/fsadmin.c ]
	Changed set_authid_map_cmd() to read authid map file instead of
	trying to map it in.
[91/05/22            jjc]
    
    
    
==========================================================================
   ***** US Version US43  (jms) *****
    
    
New features:
--- --------
The mach3 multi-server world has moved.  This version, us43, is the first
C++ release of the system.  It includes:

  Paulo J. Guedes' re-write/translation of the emulation library and
  of most of the multi-server objects from C/MachObjects to C++.
  This includes the contents of the following directories:
	./lib/c++
	./lib/emul
	./lib/load
	./lib/machobj++		// Used for remote method invocation only
	./lib/us++
	./lib/ux
	./pkg/xkernel
	./server/name
	./server/pipenet

  Paulo J. Guedes modified the following libraries to enable the use of "old" 
  servers with the "new" C++ emul.lib:
  	./lib/us
	./lib/machobj

  J. Mark Stevenson:
	C++ version of ./server/tty
	Added us42 changes to pjg code.
	Made to build/work in true CMU env.
	Purged newly defunct files.
	Misc. bug fixes and source file header restoration.

  Daniel P. Julin:
	Addition of ./unix_include
	Misc. bug fixes and support of PJG and JMS

Bugs and Bug fixes:
---- --- --- -----
  Some bugs have been fixed and some have been added.  Bugs are known
  to have been added in the area of signaling.  They will be fixed in an
  a later release.

Organizational changes:
-------------- -------
  The translation to C++ has totally changed the nature of object declaration,
  creation and destruction.  The changes are extensive and will be described
  in a document that Paulo has promised for eminent release.

  There are now parallel versions of two libs: machobj/machobj++, us/us++.
  This is a temporary state to support the untranslated servers: 
	ufs, as, diag, tm, conf.

Special notes:
------- -----
  This version of the system was built with a "g++" that DPJ modified to
  correctly handle the "-MD" switch.
    
    
    
==========================================================================
   ***** US Version US44  (dpj) *****
    
    
These are a collection of bug fixes and random improvements that had
been waiting on my branch for a while, pending the C++ merge.

New features:
--- --------

(1) New loader: in an attempt to clean-up the address space of
emulated processes, I have completely redone the program loader.
./lib/load is now obsolete; its functionality is replaced by a simple
loader in ./lib/emul, in files loader.cc, emul_exec.cc,
machine/loader_md.cc, etc. This loader is derived from the POE loader
originally created by Joe Barrera. It loads a.out files and shell
scripts (#!/bin/csh, etc.).

./lib/emul/bsd_all.lib is now in a.out format, instead of Mach-O
format. ./lib/emul/bsd_all.o is no longer needed for debugging. There
are no longer any references to dyn_object* anywhere. 

(2) New exec() logic: along with the new loader, I have reorganized
the whole exec() logic in ./lib/emul, and concentrated it in a new
file named emul_exec.cc. The UNIX stack is now reinitialized instead
of being inherited, and has the correct size (machine-dependent).

(3) Reworked the initialization of the emulation library. We now pass
all startup arguments through a single call to the emulation library
entry point, instead of playing with the symbol table (this was easier
since the executable format, and hence the symbol table format, have
changed).

We also now correctly initialize the correct number of threads stacks
in the emulation library with the right size, instead of inheriting
some of them from the startup environment.

Simplified a lot of the complicated acrobatics to jump to the first
emulation stack.

(4) Added no_more_senders and rpc_aborts in MachObject statistics
structure.

(5) Replaced the "private" keyword in base.h with "PRIVATE", to avoid
conflicts with the C++ keyword.

(6) Streamlined handling of no-more-senders notifications in non-c++
./lib/us, by catching them in the agent instead of the agent_helper.

(7) Implemented "@sys" in the prefix table. The translation is in
./local_include/machine/us_param.h.

(8) Defined two new macros "ASSERT_RETCODE" and "ASSERT_EXPR" in
debug.h, to optionally test for funny situations. They are disabled
when _DEBUG_ is 0.

(9) Integrated the changes from Michael Libes to support TCP in the
x-kernel server. Note that TCP is still NOT enabled by default.

Bug fixes:
--- -----

(1) Plugged a bunch of port leaks:

(1.1) in the RPC package:

Use mach_port_destroy() instead of mach_port_deallocate() when dealing
with receive rights. No need to explicitly remove from port set when
destroying.

Only request no-sender notifications when we have a non-null external
port. 

Clean-up the previous notification right returned when setting-up
no-senders notifications.

Deallocate extraneous port rights acquired when receiving a new
reference for an object that we already have.

(1.2) in the task_master:

[ ./server/tm/tm_agency.c ]
Clean-up the previous notification right returned when setting-up
dead-name notifications.
Hacked around a reference-counting problem for tm_task objects.

[ ./server/tm/tm_mapping.c ]
Removed the deallocation of the port in remove_mapping. This is now taken
care of by tm_deregister_task() itself.

[ ./server/tm/tm_task.c ]
Removed the call to tm_deregister_task() in terminate().
Use mach_port_destroy() to get rid of the kernel_port.

(1.3) in ./lib/us/shcond_mgr.c:

Use mach_port_destroy() instead of mach_port_deallocate() when dealing
with receive rights.

(2) Fixed a series of bugs in the C++ version of the libraries, which
prevented no-more-senders notifications from ever being handled.

(3) Do not leave a copy of Makefile-common in the object area, to avoid
confusion when rebuilding it or changing it.

(4) Fixed ns_read_forwarding_entry() to use the correct method id when
doing a remote RPC using C++.

(5) Added a call to mgr_methods_setup() in ./lib/us/vn_dir.c

(6) Many netmsgserver bug fixes, to deal with the high-volume
application from Andy Hastings, that tends to bunch segments on the
TCP connection in funny ways.

(7) Removed calls to vm_pageable() in the TTY server. They have not
been useful for a long time.

(8) Fixed a number of calls to condition_wait() in the dir, bytestream
and recordstream classes, to replace them with the interruptable
version (intr_cond_wait()).

(9) Fixed the prefix table so that "ls /server" correctly follows the
full prefix and lists what is at the other end, instead of triggering
on "/" and not following the longer prefix.


Organizational changes:
-------------- -------

(1) Changed the configuration for programs in ./test to MACH3_VUS.

(2) The following files/directories are now obsolete:
	./include/dyn_object_methods.h
	./lib/load
	./utils/mlink.csh
	./utils/startup.sh

Special notes:
------- -----

Coming attractions:
	- blackboard service
	- a cleaner RPC package


******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
44
[ ./utils/startup.sh ]
Making defunct
[ ./utils/mlink.csh ]
Making defunct
[ ./include/dyn_object_methods.h ]
Making defunct
[ ./Makefile ]
Removed mlink.
Do not leave a copy of Makefile-common in the object area.
[91/11/12  17:40:38  dpj]
[ ./include/base.h ]
Converted for C++ usage. Replaced "private" keyword with "PRIVATE".
[91/11/06  20:39:08  dpj]
[ ./include/mach_object.h ]
Fixed a syntax error.
[91/08/25  18:04:52  dpj]

Added no_more_senders and rpc_aborts in MachObject statistics structure.
[91/07/13  22:05:43  dpj]
[ ./lib/Makefile ]
Removed lib/load from standard list of libraries.
[91/08/25  18:05:27  dpj]
[ ./lib/emul/Makefile ]
Replaced libload with a simple loader built in this directory.
Made the emulation library be a a.out file instead of Mach-o.
[91/11/08            dpj]
[ ./lib/emul/emul_base.h ]
Removed references to libload and the proc_obj.
[91/11/08            dpj]
[ ./lib/emul/emul_basic.cc ]
Removed references to libload.
Moved exec() code to emul_exec.c.
[91/11/08            dpj]
[ ./lib/emul/emul_basic_ifc.h ]
Removed external declarations for the exec() logic, now found in emul_exec.
[91/11/12  17:42:38  dpj]
[ ./lib/emul/emul_exec.cc ]
Added support for shell scripts (#!).
[91/11/12  18:02:03  dpj]

First working version.
[91/11/12  17:45:07  dpj]
[ ./lib/emul/emul_init.cc ]
Explicitly allocate and switch to  a special stack before
calling emul_initialize(). Remove use of cthreads for stack manipulation,
since this scheme does not provide enough control over stack sizes.

fork() and exec() from main emul_init program, after
emul_initialize() returns.

Use a simple a.out loader instead of libload for the emulation library.
Start emul_initialize directly with all appropriate arguments instead
of setting the arguments separately.

Clean-up the entire emulation space (minus user stack) before loading
the new emulation library.
[91/11/08            dpj]
[ ./lib/emul/emul_init_prog/Makefile ]
Removed all uses of libload, replaced by local loader.
Removed special memory package.
[91/11/08            dpj]
[ ./lib/emul/emul_io.cc ]
Cleaned-up. Removed some compiler warnings. Use new IPC when appropriate.
[91/11/12  17:47:08  dpj]
[ ./lib/emul/emul_misc.cc ]
Set-up the first emulation stack on the stack that emul_initialize is
called on instead of allocating a new one.

Let emul_init do fork() and exec(), after emul_initialize() returns.

Pass all appropriate arguments directly to emul_initialize instead
of using the indirect set/get approach.
Removed the code to create a startup stack: this is now done
by calling emul_initialize in a separate cthread.

Fixed to correctly dump statistics on exit(), before getting rid
of the diag object.  

Allow negative initial exec debug levels.
Use new machdep specifications for user stack, remove
emul_init_proc() and region-related stuff.
[91/11/08            dpj]
[ ./lib/emul/emul_misc_ifc.h ]
Changed for new initialization sequence through the normal entry point
in the a.out file.
[91/11/12  17:48:24  dpj]
[ ./lib/emul/emul_proc.cc ]
Cleaned-up.
[91/11/12  17:48:54  dpj]
[ ./lib/emul/emul_uid.cc ]
Removed references to libload.
[91/11/08            dpj]
[ ./lib/emul/i386/emul_init_md.s ]
First working version.
[91/11/12  17:49:41  dpj]
[ ./lib/emul/i386/emul_machdep.c ]
Really eliminated lib/load and dyn_objects (previous jjc merge
had not done it)
[91/11/08            dpj]
[ ./lib/emul/i386/emul_vector.s ]
Removed call_emul_initialize(). The stack switch is now done
in emul_init.
[91/11/08            dpj]
[ ./lib/emul/i386/loader_md.cc ]
First working version.
[91/11/12  17:50:09  dpj]
[ ./lib/emul/loader.cc ]
First working version.
[91/11/12  17:50:27  dpj]
[ ./lib/emul/loader.h ]
First working version.
[91/11/12  17:50:40  dpj]
[ ./lib/emul/loader_info.h ]
First working version.
[91/11/12  17:50:50  dpj]
[ ./lib/emul/memory/Makefile ]
Added null installation rule for DUMMY.
[91/11/08            dpj]
[ ./lib/emul/syscalls_prototypes.h ]
Cleaned-up compiler warnings.
[91/11/12  17:51:17  dpj]
[ ./lib/machobj++/MachExternalObject.c ]
Use _invoke_method*() instead of invoke_* to call methods on the
C++ remote object.
Use dummy arguments in _invoke_method1().
[91/11/13            dpj]

Added no_more_senders and rpc_aborts in MachObject statistics structure.
Use mach_port_destroy() instead of mach_port_deallocate() to get rid of
external ports. No need to explicitly remove from port set when destroying.
[91/11/07            dpj]
Merged with mainline.
[89/07/31  14:05:35  dpj]
[ ./lib/machobj++/MachRemoteObject.c ]
Use mach_port_destroy() instead of mach_port_deallocate() when dealing
with receive rights.
Only request no-sender notifications when we have a non-null external port.
Clean-up the previous notification right returned when setting-up
no-senders notifications.
Deallocate extraneous port rights acquired when receiving a new reference
for an object that we already have.
[91/11/07            dpj]
Merged with mainline.
Fixed Debug() statemens to become DEBUG().
Incorporated some TIS bug fixes into non-TRUSTED sections of the code.
[89/07/31  14:07:22  dpj]
[ ./lib/machobj++/mach_object.c ]
Added no_more_senders and rpc_aborts in MachObject statistics structure.
Fixed printing of invoke_4 statistics.
[91/11/07            dpj]
[ ./lib/machobj/MachExternalObject.c ]
Added no_more_senders and rpc_aborts in MachObject statistics structure.
Use mach_port_destroy() instead of mach_port_deallocate() to get rid of
external ports. No need to explicitly remove from port set when destroying.
[91/07/13  22:11:15  dpj]
[ ./lib/machobj/MachRemoteObject.c ]
Use mach_port_destroy() instead of mach_port_deallocate() when dealing
with receive rights.
Only request no-sender notifications when we have a non-null external port.
Clean-up the previous notification right returned when setting-up
no-senders notifications.
Deallocate extraneous port rights acquired when receiving a new reference
for an object that we already have.
[91/07/13  22:14:43  dpj]
[ ./lib/machobj/mach_object.c ]
Added no_more_senders and rpc_aborts in MachObject statistics structure.
Fixed printing of invoke_4 statistics.
[91/07/13  22:15:29  dpj]
[ ./lib/us++/access_table.cc ]
Removed entry for no_remote_senders, that is now handled by the agent
and not by the agent helper.
[91/11/07            dpj]
[ ./lib/us++/agent.cc ]
Fixed call path for no_remote_senders().
[91/11/13  14:51:10  dpj]
[ ./lib/us++/bytestream.cc ]
condition_wait() -> intr_cond_wait()
[91/11/13  14:49:41  dpj]
[ ./lib/us++/dir.cc ]
condition_wait() -> intr_cond_wait()
[91/11/13  14:49:57  dpj]
[ ./lib/us++/recordstream.cc ]
condition_wait() -> intr_cond_wait()
[91/11/13  14:50:08  dpj]
[ ./lib/us++/std_name.cc ]
Implemented "@sys".
Allow lookup of path names that exactly match an entire prefix.
[91/11/12  17:53:57  dpj]
[ ./lib/us++/std_name_ifc.h ]
No changes.
[91/11/12  17:54:17  dpj]
[ ./lib/us++/us_name_proxy.cc ]
Fixed ns_read_forwarding_entry() to use the correct method id.
[91/11/12  17:54:55  dpj]
[ ./lib/us/access_table.c ]
Removed entry for no_remote_senders, that is now handled by the agent
and not by the agent helper.
[91/07/13  22:16:30  dpj]
[ ./lib/us/agent.c ]
Moved handling of no-more-senders notifications from the agent_helper
to the agent, and removed the MachObjects reference to the agent in the
agent_helper (Local(agent_head)).
[91/07/13  22:18:53  dpj]
[ ./lib/us/agent_helper.c ]
Moved handling of no-more-senders notifications from the agent_helper
to the agent, and removed the MachObjects reference to the agent in the
agent_helper (Local(agent_head)).
[91/07/13  22:19:28  dpj]
[ ./lib/us/agent_helper_ifc.h ]
Moved handling of no-more-senders notifications from the agent_helper
to the agent, and removed the MachObjects reference to the agent in the
agent_helper (Local(agent_head)).
[91/07/13  22:19:53  dpj]
[ ./lib/us/agent_ifc.h ]
Moved handling of no-more-senders notifications from the agent_helper
to the agent, and removed the MachObjects reference to the agent in the
agent_helper (Local(agent_head)).
[91/07/13  22:20:25  dpj]
[ ./lib/us/bytestream.c ]
condition_wait() -> intr_cond_wait()
[91/11/13  14:50:20  dpj]
[ ./lib/us/dir.c ]
condition_wait() -> intr_cond_wait()
[91/11/13  14:50:38  dpj]
[ ./lib/us/memory_object.c ]
No changes.
[91/11/12  17:55:29  dpj]
[ ./lib/us/pager.c ]
No changes.
[91/11/12  17:55:46  dpj]
[ ./lib/us/pager_ifc.h ]
No changes.
[91/11/12  17:56:02  dpj]
[ ./lib/us/recordstream.c ]
condition_wait() -> intr_cond_wait()
[91/11/13  14:50:51  dpj]
[ ./lib/us/shcond_mgr.c ]
Use mach_port_destroy() instead of mach_port_deallocate() when dealing
with receive rights.
[91/07/13  22:23:30  dpj]
[ ./lib/us/vn_dir.c ]
Added a call to mgr_methods_setup().
[91/08/25  18:20:21  dpj]
[ ./lib/ux/uxsignal.cc ]
Added a C entry point for signal_reset().
[91/11/12  17:56:44  dpj]
[ ./local_include/debug.h ]
Added ASSERT_RETCODE and ASSERT_EXPR.
[91/11/06  20:43:37  dpj]
[ ./local_include/i386_mach/us_param.h ]
First working version.
[91/11/12  17:57:11  dpj]
[ ./pkg/netmsg/lib/IBMRT/Makefile-machdep ]
Fixed comment leader in log.
[91/11/06  20:45:18  dpj]

First working version.
[90/10/21  21:47:03  dpj]
[ ./pkg/netmsg/lib/IBMRT/scksum.s ]
Fixed comment leader in log.
[91/11/06  20:47:11  dpj]
[ ./pkg/netmsg/lib/net_dict.data ]
sbuf debugging codes.
[ ./pkg/netmsg/server/debug.h ]
Fixed protection against multiple inclusion.
[91/11/06  20:48:40  dpj]
[ ./pkg/netmsg/server/ipc_rpc.c ]
Fixed a bug to make sure the netmsg header is contiguous.
[91/11/06  20:49:58  dpj]
[ ./pkg/netmsg/server/logstat.c ]
Added an error printout in panic() routine.
[91/11/06  20:50:49  dpj]
[ ./pkg/netmsg/server/ls_defs.h ]
Added sbuf debugging.
[91/11/06  20:51:21  dpj]
[ ./pkg/netmsg/server/ls_rec.c ]
Added sbuf debugging.
[91/11/06  20:51:52  dpj]
[ ./pkg/netmsg/server/sbuf.c ]
Added debugging version of sbuf_extract().
[91/11/06  20:52:47  dpj]
[ ./pkg/netmsg/server/sbuf.h ]
Added debugging statements.
[91/11/06  20:53:42  dpj]
[ ./pkg/netmsg/server/tcp.c ]
Fixed a bug in packet reassembly.
[91/11/06  20:54:31  dpj]
[ ./pkg/xkernel/TCP/Makefile ]
Integrated version from Michael Libes (mal), for TCP support.
[91/08/25  18:21:29  dpj]
[ ./pkg/xkernel/TCP/graph.comp ]
No changes.

[ ./pkg/xkernel/TCP/tcp.h ]
Integrated version from Michael Libes (mal), for TCP support.
[91/08/25  18:22:52  dpj]
[ ./pkg/xkernel/mach3/localinit.c ]
Integrated changes from mal@cs.cmu.edu for TCP:
Added tracetcpp.
[91/08/18            dpj]
[ ./pkg/xkernel/protocols/tcp/tcp_input.c ]
Integrated version from Michael Libes (mal), for TCP support:
	bug fixes.
[91/08/25  18:23:26  dpj]
[ ./pkg/xkernel/protocols/tcp/tcp_subr.c ]
Integrated version from Michael Libes (mal), for TCP support:
	bug fixes.
[91/08/25  18:23:54  dpj]
[ ./pkg/xkernel/protocols/tcp/tcp_x.c ]
Integrated version from Michael Libes (mal), for TCP support:
	bug fixes.
[91/08/25  18:24:09  dpj]
[ ./pkg/xkernel/test/Makefile ]
Integrated version from Michael Libes (mal), for TCP support:
	added xktcp.
[91/08/25  18:24:41  dpj]
[ ./pkg/xkernel/test/tcp_user/mig_tcp.defs ]
TCP User module from mal@cs.cmu.edu.
[91/08/25            dpj]
[ ./pkg/xkernel/test/tcp_user/notify_loop.c ]
TCP User module from mal@cs.cmu.edu
[91/08/18  18:01:08  dpj]
[ ./pkg/xkernel/test/tcp_user/server_loop.c ]
TCP User module from mal@cs.cmu.edu
[91/08/18  18:01:18  dpj]
[ ./pkg/xkernel/test/tcp_user/test_types.h ]
TCP User module from mal@cs.cmu.edu
[91/08/18  18:01:26  dpj]
[ ./pkg/xkernel/test/tcp_user/testsuccess.c ]
TCP User module from mal@cs.cmu.edu
[91/08/18  18:01:35  dpj]

First try
[91/03/02  14:22:28  mal]
[ ./pkg/xkernel/test/tcp_user/testtcp.c ]
TCP User module from mal@cs.cmu.edu
[91/08/18  18:01:43  dpj]

First try
[91/03/02  14:22:28  mal]
[ ./pkg/xkernel/test/xktcp.c ]
First working version from mal@cs.cmu.edu.
[91/08/25  18:25:59  dpj]
[ ./server/tm/tm_agency.c ]
Clean-up the previous notification right returned when setting-up
dead-name notifications.
Hacked around a reference-counting problem for tm_task objects.
[91/07/13  22:24:49  dpj]
[ ./server/tm/tm_mapping.c ]
Removed the deallocation of the port in remove_mapping. This is now taken
care of by tm_deregister_task() itself.
[91/07/13  22:26:57  dpj]
[ ./server/tm/tm_task.c ]
Removed the call to tm_deregister_task() in terminate().
Use mach_port_destroy() to get rid of the kernel_port.
[91/07/13  22:28:50  dpj]
[ ./server/tty/zalloc.c ]
Removed calls to vm_pageable(), which have not been useful
for a long time.
[91/08/25  18:26:34  dpj]
[ ./test/Makefile ]
Changed the configuration to MACH3_VUS.
[91/08/25  18:26:54  dpj]
[ ./test/machobj.c ]
Upgraded for new MachObjects package modified by jms
(interrupts, new RPC handlers).
[91/08/25  18:27:31  dpj]
[ ./utils/Makefile ]
Removed mlink, since the emulation library no longer uses Mach-o.
[91/08/25  18:28:12  dpj]
[ ./utils/startxkernel.csh ]
Default executable for xkernel in /mach_servers/us/bin
[91/11/12            dpj]
    
    
    
==========================================================================
   ***** US Version US45  (jms) *****
    
    
New features:
--- --------
  The CMU Mach3.0 Multi-server is now self hosting!

Bug fixes:
--- -----
  Bug fixes to ufs server to handle load/peculiarities of build	of this size.
  /dev/null is added.
  Modify Make* files to building someplace other than "usual place"
  Misc general bug fixes.
  Misc cosmetic changes.


Organizational changes:
-------------- -------
Are you are building this system at a site that is not CMU?  You should look
at the changes to "Makeconf" and the "MK_*" variables.

Special notes:
------- -----
Built/tested with MK65/UX29

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
45
[ ./lib/emul/Makefile ]
Add ${MK_SRC}/user/libmach to VPATH
[91/12/20  14:19:52  jms]
[ ./lib/emul/emul_all.cc ]
Add support for emul_lib local /dev/null. Modify prefix table to handle
files instead of just dirs and preload /dev/null.  (from DPJ)
[91/12/20  14:24:01  jms]
[ ./lib/emul/emul_exec.cc ]
Increase INITIAL_BRK_SIZE 0x80000 => 0x200000 (From dpj)
[91/12/20  14:27:37  jms]
[ ./lib/emul/emul_file.cc ]
Fix misc rename bugs.
Prevent moving directories (didn't work anyway)
[91/12/20  14:39:56  jms]
[ ./lib/emul/emul_io.cc ]
Bug fix for close-on-exec. -DPJ
[91/12/20  14:46:11  jms]
[ ./lib/emul/emul_user_init.cc ]
Update to new ns_set_system_prefix args. (from DPJ)
[91/12/20  14:49:22  jms]
[ ./lib/emul/memory/Makefile ]
Take the MK_SRC definition out. Now in Makeconf
[91/12/20  15:22:25  jms]
[ ./lib/mach3/Makefile ]
Add "include" supdir in order to install "include" files before building
the rest of the stuff.
[91/12/20  15:23:30  jms]
[ ./lib/mach3/include/Makefile ]
Used to install include files before building the rest of mach3
[91/12/20  15:25:38  jms]
[ ./lib/mach3/libmach3_sa/mach3/Makefile ]
Debugging Dook.
[91/12/20  15:27:37  jms]
[ ./lib/mach3/libmach3_sa/mach_sa/Makefile ]
Debugging Dook.
[91/12/20  15:28:01  jms]
[ ./lib/mach3/mach3/Makefile-include ]
Strip out the MK_{SRC,REL} definitions.  Now in Makeconf.
[91/12/20  15:29:00  jms]
[ ./lib/mach3/mach3/errorlib.h ]
Add multiple inclusion guards.
[91/12/20  15:29:49  jms]
[ ./lib/mach3/mach_sa/Makefile-include ]
Remove MK_{SRC,REL} definitions.  change /dev/null to $(DEVNULL).
[91/12/20  15:31:04  jms]
[ ./lib/machobj++/MachRemoteObject.c ]
Comment Fix
[91/12/20  16:49:27  jms]

Change object marshalling to avoid innapropriate memory shadow objects.
	(dpj,rpd)
[91/12/20  15:36:09  jms]
[ ./lib/machobj++/mach_object.c ]
Comment Fix
[91/12/20  16:54:54  jms]

Uppercase "PRIVATE" macro. (dpj)
[91/12/20  15:44:28  jms]
[ ./lib/machobj/MachRemoteObject.c ]
Change object marshalling to avoid innapropriate memory shadow 
	objects. (from dpj, rpd)
[91/12/20  15:46:47  jms]
[ ./lib/machobj/mach_object.c ]
Uppercase "PRIVATE" Macro.
[91/12/20  15:48:36  jms]
[ ./lib/us++/std_name.cc ]
Modify "ns_" stuff to handle new mech for non-directories in prefix table
to enable "/dev/null" prefix.
[91/12/20  15:53:30  jms]
[ ./lib/us++/std_name_ifc.h ]
Modify signitures of ns_*prefix and ns_resolve* to enable types in prefix
table for non directories like /dev/null.  (from dpj)
[91/12/20  15:59:12  jms]
[ ./lib/us/diag.c ]
Uppercase "PRIVATE" macros. (from DPJ)
[91/12/20  16:01:08  jms]
[ ./lib/us/dir.c ]
Uppercase PRIVATE macro. (dpj)
[91/12/20  16:02:31  jms]
[ ./lib/us/fd_dir.c ]
Uppercase "PRIVATE" macro. (dpj)
[91/12/20  16:03:34  jms]
[ ./lib/us/fs_agency.c ]
Correct initial file time attributes. (dpj)
[91/12/20  16:05:05  jms]
[ ./lib/us/std_name.c ]
Uppercase PRIVATE macro. (dpj)
[91/12/20  16:05:41  jms]
[ ./lib/us/vn_mgr.c ]
Shorten cycle time of vn_mgr_scanner to help with inode pager problem.
Add some debugging stuff.
[91/12/20  16:10:27  jms]
[ ./lib/ux/Makefile ]
Add devnull.o (dpj)
[91/12/20  16:11:06  jms]
[ ./lib/ux/devnull.cc ]
First Revision (DPJ)
[91/12/20  16:11:46  jms]
[ ./lib/ux/devnull_ifc.h ]
First version (DPJ)
[91/12/20  16:13:46  jms]
[ ./lib/ux/ftab.cc ]
Close on exec bug fix. (dpj)
[91/12/20  16:14:26  jms]
[ ./lib/ux/ftab_ifc.h ]
Fix FD_MASK for Close-on-exec fix.
[91/12/20  16:15:41  jms]
[ ./server/config/prefix.config ]
Put prefix /usr3 in for server ufs2
[91/12/20  16:20:10  jms]
[ ./server/config/rc.us ]
startup ufs2
[91/12/20  16:20:37  jms]
[ ./server/ufs/cache.c ]
Fix bug with periodic "convoy" of free_page calls with contention upon
read lock. (free_page calls occur after read lock critical sections).

No more panic with no free pages when they really do exist.
[91/12/20  16:24:11  jms]
[ ./server/ufs/device_reply_hdlr.c ]
Bump size of device reply hash table.
[91/12/20  16:26:00  jms]
[ ./server/ufs/misc.c ]
Add "suspend_on_panic" debugging feature.
[91/12/20  16:26:47  jms]
[ ./server/ufs/sys_inode.c ]
Handle reads from unwritten holes in files (needed for mapped files).
[91/12/20  16:27:50  jms]
[ ./server/ufs/ufs_export.c ]
Comment Fix.
[91/12/20  16:48:49  jms]

Add compilation conditions asto whether to use credentials or access
[91/12/20  16:31:18  jms]
[ ./server/ufs/ufs_inode.c ]
Increase inode hash table size.
[91/12/20  16:32:35  jms]
[ ./server/ufs/ufs_xxx.c ]
Cause different ufs servers to have different server ids (dpj)
[91/12/20  16:33:17  jms]
[ ./utils/Makefile ]
Removed "startup" script, that is no longer used (replaced by the
configuration server).
[91/11/14            dpj]
[ ./utils/STARTUP.fsadmin ]
Mount ufs2
[91/12/20  16:34:08  jms]
[ ./utils/fsadmin.cc ]
Update to new ns_ prefix table signatures. (dpj)
Add tsymlinks (dpj)
[91/12/20  16:36:26  jms]
[ ./utils/umerge.csh ]
Hardwire in that this is a US merge
[91/12/20  17:06:17  jms]

Get it for m3merge before m3merge changes away from US structure
[91/12/20  16:37:17  jms]
[ ./utils/waitforattach.c ]
First Revision (dpj)
[91/12/20  16:37:53  jms]
[ ./Makeconf ]
Put MK_{SRC,REL} definitions here.
[91/12/20  17:41:51  jms]

Add MK_SRC and MK_REL and make the point to new structure of MK development
environment.
[91/12/20  14:11:07  jms]
[ ./utils/umerge.csh ]
Hardwire in that this is a US merge
[91/12/20  17:06:17  jms]

Get it for m3merge before m3merge changes away from US structure
[91/12/20  16:37:17  jms]
    
    
    
==========================================================================
   ***** US Version US46  (jms) *****
    
    
New features:
--- --------
Update to mk68-mk70 release files/structure.

Replace all vestiges of "OLD" ipc.

Remove the MACH3_UNIX configurations

Waste bunches of unused directories and files.

Conform "US" land to the new src/obj structure.  An exception to this is
placing the us/release area in .../mach/mach3/merge/obj/@sys/us/release.

Bug fixes:
--- -----
Yes.

Organizational changes:
-------------- -------
Use the latest/greatest mach3 src/obj structure.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
46
[ ./mach_include_sa/FILELIST ]
Updating all files
[ ./mach_include_sa/FILELIST ]
Updating all files
[ ./include/alert_methods.h ]
defunct
[ ./include/exec_object.h ]
defunct
[ ./include/if_types.h ]
defunct
[ ./include/list_methods.h ]
defunct
[ ./include/loader.h ]
defunct
[ ./include/proc_image.h ]
defunct
[ ./include/select_methods.h ]
defunct
[ ./include/signal_methods.h ]
defunct
[ ./include/socket_methods.h ]
defunct
[ ./include/uxident_methods.h ]
defunct
[ ./include/uxio_methods.h ]
defunct
[ ./include/uxstat_methods.h ]
defunct
[ ./lib/emul/emul_umount.cc ]
defunct
[ ./lib/emul/emul_user_lib.c ]
defunct
[ ./lib/emul/htg.c ]
defunct
[ ./lib/emul/htg.h ]
defunct
[ ./lib/emul/i386/SYS.h ]
defunct
[ ./lib/emul/i386/htg_trap.s ]
defunct
[ ./lib/emul/i386/htg_unix_syscall_with_flag.s ]
defunct
[ ./lib/emul/ibmrt/SYS.h ]
defunct
[ ./lib/emul/ibmrt/breakpoint_trap.c ]
defunct
[ ./lib/emul/ibmrt/breakpoint_trap.s ]
defunct
[ ./lib/emul/ibmrt/crt0.c ]
defunct
[ ./lib/emul/ibmrt/emul_machdep.c ]
defunct
[ ./lib/emul/ibmrt/emul_vector.s ]
defunct
[ ./lib/emul/ibmrt/fpglue.s ]
defunct
[ ./lib/emul/ibmrt/htg_trap.s ]
defunct
[ ./lib/emul/ibmrt/htg_unix_syscall_with_flag.s ]
defunct
[ ./lib/emul/ibmrt/trap_fpglue.s ]
defunct
[ ./lib/emul/shadow_trap.c ]
defunct
[ ./lib/emul/sun3/SYS.h ]
defunct
[ ./lib/emul/sun3/emul_machdep.c ]
defunct
[ ./lib/emul/sun3/emul_vector.s ]
defunct
[ ./lib/emul/sun3/htg_trap.s ]
defunct
[ ./lib/emul/sun3/htg_unix_syscall_with_flag.s ]
defunct
[ ./lib/emul/syscall_define.h ]
defunct
[ ./lib/emul/vax/SYS.h ]
defunct
[ ./lib/emul/vax/emul_machdep.c ]
defunct
[ ./lib/emul/vax/emul_vector.s ]
defunct
[ ./lib/emul/vax/htg_trap.s ]
defunct
[ ./lib/emul/vax/htg_unix_syscall_with_flag.s ]
defunct
[ ./lib/mach3/mach3/SUN3/lock.s ]
defunct
[ ./lib/mach3/mach3/SUN3/syscall.s ]
defunct
[ ./lib/mach3/mach3/mach3_msg.c ]
defunct
[ ./lib/mach3/mach3/port_enable.c ]
defunct
[ ./lib/mach3/mach3/std_types.defs ]
defunct
[ ./lib/mach3/mach_sa/i386_mach/crt0.c ]
defunct
[ ./lib/mach3/test/test.c ]
defunct
[ ./lib/mach3/unix/SUN3/DEFS.h ]
defunct
[ ./lib/mach3/unix/SUN3/_itoa.s ]
defunct
[ ./lib/mach3/unix/SUN3/_setjmp.s ]
defunct
[ ./lib/mach3/unix/SUN3/abs.s ]
defunct
[ ./lib/mach3/unix/SUN3/alloca.s ]
defunct
[ ./lib/mach3/unix/SUN3/doprnt.c ]
defunct
[ ./lib/mach3/unix/SUN3/htonl.c ]
defunct
[ ./lib/mach3/unix/SUN3/htons.c ]
defunct
[ ./lib/mach3/unix/SUN3/ntohl.c ]
defunct
[ ./lib/mach3/unix/SUN3/ntohs.c ]
defunct
[ ./lib/mach3/unix/SUN3/param.h ]
defunct
[ ./lib/mach3/us/notify_loop.c ]
defunct
[ ./lib/machobj++/NeXT/openp.c ]
defunct
[ ./lib/machobj++/NeXT/searchp.c ]
defunct
[ ./lib/machobj++/my_file.c ]
defunct
[ ./lib/machobj++/test.c ]
defunct
[ ./lib/machobj/NeXT/openp.c ]
defunct
[ ./lib/machobj/NeXT/searchp.c ]
defunct
[ ./lib/machobj/my_file.c ]
defunct
[ ./lib/machobj/test.c ]
defunct
[ ./lib/us/agent_count.c ]
defunct
[ ./lib/us/agent_count_ifc.h ]
defunct
[ ./lib/us/alert.c ]
defunct
[ ./lib/us/alert_ifc.h ]
defunct
[ ./lib/us/free_agent_ifc.h ]
defunct
[ ./lib/ux/kio.cc ]
defunct
[ ./lib/ux/kio_ifc.h ]
defunct
[ ./lib/ux/select.cc ]
defunct
[ ./lib/ux/select_ifc.h ]
defunct
[ ./local_include/address_space.h ]
defunct
[ ./local_include/fs_dir.h ]
defunct
[ ./local_include/ftab_methods.h ]
defunct
[ ./local_include/rt_mach/machine_address_space.h ]
defunct
[ ./local_include/socket_mgr_ifc.h ]
defunct
[ ./local_include/sun3_mach/machine_address_space.h ]
defunct
[ ./local_include/uid.h ]
defunct
[ ./local_include/vax_mach/machine_address_space.h ]
defunct
[ ./sa_include/cthreads.h ]
defunct
[ ./sa_include/errorlib.h ]
defunct
[ ./server/diag/diag_mgr.c ]
defunct
[ ./server/diag/diag_test.c ]
defunct
[ ./server/diag/diag_user.h ]
defunct
[ ./server/tm/loader.c ]
defunct
[ ./server/tm/tm_load.c ]
defunct
[ ./server/tm/tm_user_task_ifc.h ]
defunct
[ ./server/tty/rt_mach/devnum.h ]
defunct
[ ./server/tty/sun3_mach/devnum.h ]
defunct
[ ./server/tty/sys/kern_msg.h ]
defunct
[ ./server/tty/sys/timer.h ]
defunct
[ ./server/tty/vax_mach/devnum.h ]
defunct
[ ./server/ufs/include/ttychars.h ]
defunct
[ ./server/ufs/include/ttydev.h ]
defunct
[ ./server/ufs/include/xerror.h ]
defunct
[ ./server/ufs/ufs_type.c ]
defunct
[ ./utils/old_fsadmin.c ]
defunct
[ ./lib/emul/event_post.cc ]
defunct
[ ./lib/emul/event_post_ifc.h ]
defunct
[ ./lib/mach3/mach3/netname.defs ]
defunct
[ ./lib/mach3/mach3/notify.defs ]
defunct
[ ./lib/mach3/mach3/service.defs ]
defunct
[ ./Makeconf ]
Fixup MK_{SRC,REL} yet again for the further mrt/rpd restructured MK
[92/02/26  16:25:01  jms]
[ ./Makefile ]
Stop build of "mach_include".  It's dead Jim.

[ ./Makefile-common.m4 ]
Shutoff MACH_IPC_COMPAT; Fix PATHs to use MK_REL/{bin/include/lib}.
[92/02/26  16:34:35  jms]
[ ./include/auth_defs.h ]
Change US_UNKNOWN_FAILURE => US_UNKNOWN_ERROR
[92/02/26  16:39:55  jms]
[ ./include/mach_object.h ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  16:42:15  jms]
[ ./include/ns_types.h ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  16:50:45  jms]
[ ./lib/Makefile ]
Stop building "server" and "bnw".
[92/02/26  16:52:06  jms]
[ ./lib/emul/Makefile ]
Stop building/using mach_sysc_ed.o.  Not needed with new libmach[_sa].a
Hacks to handle flaws in the MK release structure.
[92/02/26  16:56:51  jms]
[ ./lib/emul/emul_addr.c ]
Switch mach_types.h => mach/mach_types.h
[92/02/26  17:06:17  jms]
[ ./lib/emul/emul_all.cc ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  17:08:47  jms]
[ ./lib/emul/emul_exec.cc ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  17:11:32  jms]
[ ./lib/emul/emul_init.cc ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  17:14:04  jms]
[ ./lib/emul/emul_io.cc ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  17:16:43  jms]
[ ./lib/emul/emul_memory.c ]
Switch mach_types.h => mach/mach_types.h
[92/02/26  17:17:13  jms]
[ ./lib/emul/emul_misc.cc ]
Upgrade to use no MACH_IPC_COMPAT features.
Keep a list of existing emul cthread stacks and enable its cleanup after fork.
Using a stack in the list => one is executing in the emulation lib.
[92/02/26  17:20:36  jms]
[ ./lib/emul/emul_proc.cc ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  17:23:30  jms]
[ ./lib/emul/emul_user_init.cc ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  17:25:52  jms]
[ ./lib/emul/emul_user_misc.c ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  17:26:30  jms]
[ ./lib/emul/i386/emul_machdep.c ]
Change the "is sensitive" signal logic to use the stack pointer to determine
if we are running in the emulation lib instead of using the IP.
Upgrade to use only "new" IPC
[92/02/26  17:28:45  jms]
[ ./lib/emul/i386/emul_vector.s ]
Change name of emul_stack_list => emul_stack_free_list
Clear the free list lock in a newly forked child
[92/02/26  17:31:41  jms]
[ ./lib/emul/inherit_ports.cc ]
Upgrade to use no MACH_IPC_COMPAT features.
[92/02/26  17:32:04  jms]
[ ./lib/emul/memory/Makefile ]
Remove generation of mach_syscalls_edited.c.  Not needed with mk68 structure
of libmach{_sa}.a
[92/02/26  17:34:58  jms]
[ ./lib/mach3/Makefile ]
Stop building/useing libmach3_unix
[92/02/26  17:39:54  jms]
[ ./lib/mach3/libmach3_sa/Makefile ]
Must make mach_sa subdir first.
[92/02/26  17:41:49  jms]
[ ./lib/mach3/libmach3_us/Makefile ]
Make mach_sa subdir first.
[92/02/26  17:42:40  jms]
[ ./lib/mach3/libmach3_vus/Makefile ]
Must build mach_sa subdir first
[92/02/26  17:43:25  jms]
[ ./lib/mach3/mach3/Makefile-include ]
Remove port_enable.o and mach3_msg.o.
[92/02/26  17:44:44  jms]
[ ./lib/mach3/mach3/mach3_flsbuf.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  17:45:53  jms]
[ ./lib/mach3/mach3/mach_error.c ]
Put old IPC error stuff onder the compile switch ERR_DO_COMPAT.
[92/02/26  17:47:54  jms]
[ ./lib/mach3/mach3/mach_init.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  17:48:21  jms]
[ ./lib/mach3/mach3/netname_defs.h ]
Moved here from elsewhere.
[ ./lib/mach3/mach_sa/Makefile-include ]
Just build by removing stuff from a libmach*.a released lib and
adding some more stuff.  Nolonger do will build from scratch
in the same fashion as MK does.
[92/02/26  17:52:29  jms]

Failed attempt to upgrade to mk69 libmach build world.
Checkin before total strategy change.
[92/01/29  18:07:09  jms]
[ ./lib/mach3/us/Makefile-include ]
Stop using mach_device.defs
[92/02/26  17:56:20  jms]
[ ./lib/mach3/us/auth.defs ]
Moved here from defs land.
[ ./lib/mach3/us/auth_types.defs ]
Moved from the defunct "defs" directory.
[ ./lib/mach3/us/mach_diag.defs ]
Moved from the defunct "defs" directory.
[ ./lib/mach3/us/server_loop.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  17:57:32  jms]
[ ./lib/machobj++/MachExternalObject.c ]
Waste "dead_port" function.  Unused.
[92/02/26  18:07:38  jms]
[ ./lib/machobj++/MachExternalObject.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:09:19  jms]

Merged with mainline.
[89/07/31  14:06:05  dpj]
[ ./lib/machobj++/MachRemoteObject.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
Remove some outdated "TRUSTED" code.
[92/02/26  18:10:54  jms]
[ ./lib/machobj++/interface.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:11:26  jms]
[ ./lib/machobj/MachExternalObject.c ]
Remove the unused dead_port routine
[92/02/26  18:12:33  jms]
[ ./lib/machobj/MachExternalObject.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:13:08  jms]
[ ./lib/machobj/MachRemoteObject.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
Also remove some outdated "TRUSTED" code.
[92/02/26  18:14:24  jms]
[ ./lib/threads/Makefile ]
Change to build with MACH_IPC_COMPAT=0
Loose ipc.c, not used.
[92/02/26  18:17:47  jms]
[ ./lib/threads/cprocs.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:20:27  jms]
[ ./lib/threads/cthread_internals.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:20:54  jms]
[ ./lib/threads/fork.c ]
mach_types.h -> mach/mach_types.h
[ ./lib/threads/i386/thread.c ]
No Changes
[92/02/26  18:22:43  jms]
[ ./lib/threads/malloc.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:23:17  jms]
[ ./lib/threads/mig_support.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:27:28  jms]
[ ./lib/threads/stack.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:28:25  jms]
[ ./lib/us++/agency.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:28:51  jms]
[ ./lib/us++/agent.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:29:17  jms]
[ ./lib/us++/diag.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:29:55  jms]
[ ./lib/us++/dir.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:30:35  jms]
[ ./lib/us++/mf_mem.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:31:27  jms]
[ ./lib/us++/remote.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:32:10  jms]
[ ./lib/us++/std_auth.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:32:44  jms]
[ ./lib/us++/std_ident.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:33:22  jms]
[ ./lib/us++/std_name.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:33:47  jms]
[ ./lib/us++/us_item_proxy.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:34:22  jms]
[ ./lib/us/Makefile ]
Stop building the testlib subdir.
[92/02/26  18:35:08  jms]
[ ./lib/us/agency.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:35:37  jms]
[ ./lib/us/agency_mgr.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:36:12  jms]
[ ./lib/us/agent.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:37:22  jms]
[ ./lib/us/cat.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:37:56  jms]
[ ./lib/us/diag.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:38:15  jms]
[ ./lib/us/fs_agency.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:38:33  jms]
[ ./lib/us/fs_auth.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:39:17  jms]
[ ./lib/us/fs_auth_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:39:40  jms]
[ ./lib/us/memory_object.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:40:24  jms]
[ ./lib/us/mf_mem.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:41:10  jms]
[ ./lib/us/mf_mem_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:41:39  jms]
[ ./lib/us/mf_mgr.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:42:07  jms]
[ ./lib/us/pager.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:43:00  jms]
[ ./lib/us/pager_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:43:37  jms]
[ ./lib/us/shcond.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:44:01  jms]
[ ./lib/us/shcond_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:44:13  jms]
[ ./lib/us/std_auth.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:44:31  jms]
[ ./lib/us/std_auth_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:44:50  jms]
[ ./lib/us/std_ident.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:45:10  jms]
[ ./lib/us/std_name.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:45:31  jms]
[ ./lib/us/vn_dir.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:46:17  jms]
[ ./lib/us/vn_mgr.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:47:06  jms]
[ ./lib/ux/uxio_dir.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:47:27  jms]
[ ./lib/ux/uxsignal.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:47:51  jms]
[ ./local_include/cat_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:48:21  jms]
[ ./local_include/debug.h ]
Evaluate the ASSERT args even when not debugging.  They may have required
side effects.
[92/02/26  18:53:58  jms]
[ ./local_include/top_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:54:33  jms]
[ ./local_include/us_ports.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:55:01  jms]
[ ./mach_include_sa/Makefile ]
Stop using IPC_COMPAT stuff.
Modify SRCBASE to area under new MK,release structure
[92/02/26  18:57:49  jms]
[ ./pkg/xkernel/Makefile ]
Configuration MACH3_UNIX => MACH3_VUS
[ ./pkg/xkernel/protocols/mach3_ether.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:59:30  jms]
[ ./pkg/xkernel/simul/Makefile ]
Configuration MACH3_UNIX => MACH3_VUS
[ ./pkg/xkernel/test/Makefile ]
Configuration MACH3_UNIX => MACH3_VUS
[ ./pkg/xkernel/user/mig_net.defs ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  18:59:54  jms]
[ ./pkg/xkernel/user/net_dir.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:00:18  jms]
[ ./pkg/xkernel/user/net_init.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:01:46  jms]
[ ./pkg/xkernel/user/usudp_dir.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:02:04  jms]
[ ./pkg/xkernel/util/Makefile ]
Configuration MACH3_UNIX => MACH3_VUS
[ ./server/as/Makefile ]
Change configuration from MACH3_UNIX to MACH3_VUS.
Stop building "las".  Not Used.
[92/02/26  19:04:03  jms]
[ ./server/as/as_init.defs ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/27  12:50:15  jms]
[ ./server/as/astest.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:09:56  jms]
[ ./server/as/c_auth.defs ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:10:59  jms]
[ ./server/as/cas_db.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:11:39  jms]
[ ./server/as/cas_main.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:14:46  jms]
[ ./server/as/cas_procs.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:15:34  jms]
[ ./server/as/cas_utils.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:16:10  jms]
[ ./server/as/clas_procs.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:17:39  jms]
[ ./server/as/key_defs.h ]
Move from the sminclude subdir.
[92/02/26  19:20:19  jms]
[ ./server/as/newdes.h ]
Grab from sminclude subdir.
[92/02/26  19:22:31  jms]
[ ./server/config/config_server.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:22:47  jms]
[ ./server/config/rc.us ]
Increase the pause between ufs servers to 2 seconds.  Sometimes 1 is not
enough.
[92/02/26  19:24:11  jms]
[ ./server/config/sys_agency_ifc.h ]
mach_types.h -> mach/mach_types.h
[ ./server/diag/Makefile ]
Change from MACH3_UNIX => MACH3_VUS
[92/02/26  19:25:50  jms]
[ ./server/diag/diag_main.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:27:13  jms]
[ ./server/pipenet/pipenet_cldir_recs.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:27:34  jms]
[ ./server/pipenet/pipenet_codir_bytes.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:28:09  jms]
[ ./server/pipenet/pipenet_root.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:28:25  jms]
[ ./server/pipenet/pipenet_updir_bytes.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:28:37  jms]
[ ./server/tm/Makefile ]
Stop using us_test
[92/02/26  19:29:39  jms]
[ ./server/tm/timer.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:30:04  jms]
[ ./server/tm/tm_agency.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:30:57  jms]
[ ./server/tm/tm_agency_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:31:14  jms]
[ ./server/tm/tm_job_group_ifc.h ]
Switch mach_types.h => mach/mach_types.h
[92/02/26  19:31:40  jms]
[ ./server/tm/tm_mapping.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:32:21  jms]
[ ./server/tm/tm_mapping.h ]
Switch mach_types.h => mach/mach_types.h
[92/02/26  19:32:44  jms]
[ ./server/tm/tm_task.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:33:21  jms]
[ ./server/tm/tm_task_group_ifc.h ]
Switch mach_types.h => mach/mach_types.h
[92/02/26  19:33:46  jms]
[ ./server/tm/tm_task_ifc.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
Switch mach_types.h => mach/mach_types.h
[92/02/26  19:35:56  jms]
[ ./server/tty/Makefile ]
Add ./include dir to the CPATH
[92/02/26  19:37:10  jms]
[ ./server/tty/bsd_tty.c ]
mach_types.h -> mach/mach_types.h
[ ./server/tty/cons.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:37:28  jms]
[ ./server/tty/device_reply_hdlr.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:37:48  jms]
[ ./server/tty/include/errno.h ]
Make it local for the tty server.
[92/02/26  19:39:19  jms]
[ ./server/tty/include/i386_mach/machparam.h ]
Make it local for the tty server.
[92/02/26  19:40:17  jms]
[ ./server/tty/include/sys/acct.h ]
Make it local for the tty server.
[92/02/26  19:40:41  jms]
[ ./server/tty/include/sys/buf.h ]
Make it local for the tty server.
[92/02/26  19:41:12  jms]
[ ./server/tty/include/sys/dir.h ]
Make it local for the tty server.
[92/02/26  19:41:37  jms]
[ ./server/tty/include/sys/errno.h ]
Make it local for the tty server.
[92/02/26  19:42:12  jms]
[ ./server/tty/include/sys/file.h ]
Make it local for the tty server.
[92/02/26  19:42:35  jms]
[ ./server/tty/include/sys/inode.h ]
Make it local for the tty server.
[92/02/26  19:42:56  jms]
[ ./server/tty/include/sys/signal.h ]
Make it local for the tty server.
[92/02/26  19:43:28  jms]
[ ./server/tty/include/sys/time.h ]
Make it local for the tty server.
[92/02/26  19:43:56  jms]
[ ./server/tty/include/sys/types.h ]
Make it local for the tty server.
[92/02/26  19:44:20  jms]
[ ./server/tty/include/sys/uio.h ]
xMake it local for the tty server.
[92/02/26  19:44:47  jms]
[ ./server/tty/libc_xxx.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:45:39  jms]
[ ./server/tty/mach_synch.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:46:02  jms]
[ ./server/tty/misc.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:46:15  jms]
[ ./server/tty/sys/tty.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:46:35  jms]
[ ./server/tty/tty_dir.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:47:03  jms]
[ ./server/tty/tty_io.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:47:29  jms]
[ ./server/tty/tty_io_procs.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:47:54  jms]
[ ./server/tty/tty_server.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:48:08  jms]
[ ./server/tty/uxkern/device_utils.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:48:21  jms]
[ ./server/tty/zalloc.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:48:43  jms]
[ ./server/ufs/cache.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:49:04  jms]
[ ./server/ufs/disk.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:49:20  jms]
[ ./server/ufs/include/base.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:49:40  jms]
[ ./server/ufs/include/systm.h ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:50:04  jms]
[ ./server/ufs/misc.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:50:28  jms]
[ ./server/ufs/sys_inode.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:50:55  jms]
[ ./server/ufs/ufs_bio.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:51:16  jms]
[ ./server/ufs/ufs_inode.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:51:32  jms]
[ ./server/ufs/ufs_mount.c ]
No Change
[92/02/26  19:51:56  jms]
[ ./server/ufs/ufs_xxx.c ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:52:52  jms]
[ ./utils/Makefile ]
Hack to get the  right copy of libcs.a for fsadmin to use.  Nameing conflict
with release land and real libcs.a.
[92/02/26  19:54:17  jms]
[ ./utils/fsadmin.cc ]
Upgrade to use no MACH_IPC_COMPAT features.  New IPC only!
[92/02/26  19:54:35  jms]
    
    
    
==========================================================================
   ***** US Version US47  (dpj) *****
    
    

This is a combined merge from dpj and jms. The descriptions below do
not necessarily differentiate between the two authors.

New features:
--- --------

(1) Reorganized the C++ programming package.

The common base class usTop has been simplified and rationalized.
top_ifc.h has been moved to ./include (was in ./local_include).
top_defs.h is gone. Hopefully, this package is now much easier to use
and understand.


(2) New RPC package (part of the C++ programming package):

This package replaces the old MachObjects package. It is entirely
written in C++, and much streamlined compared to the earlier version,
with very significant performance improvements.  The message formats
are still compatible with MachObjects for now, but will probably
change soon.

The implementation is based on four main classes:
	- usRemote: replaces the old version and supersedes
	  MachRemoteObject.
	- rpcmgr: a single global instance named rpcmgr::GLOBAL
	  handles the port database, the active threads, and the
	  marshalling/unmarshalling of messages. It replaces
	  MachExternalObject.
	- method_info: a single global instance named
	  method_info::GLOBAL stores all the information related to
	  the exported methods.
	- class_info: a single global instance named
	  class_info::GLOBAL stores a table of all classes for dynamic
	  class lookups during object transfers.
All the code is in lib/us++. lib/machobj++ is gone.

In practice, the use of the package remains the same, except that:
	- the syntax for starting handling threads has changed from
		_mach_object_start_handler(
				min_waiting,max_waiting,max_threads)
	  to
		rpcmgr::GLOBAL->start_object_handler(
				min_waiting,max_waiting,max_threads);
	- the method argument strings have been enriched with two new
	  specifications:
		- "intr" to specify that a method is interruptible. By
		  defaults, method invocations are not interruptible,
		  which allows faster processing.
		- "K<#>", where # is a unique number used to globally
		  identify the method. If not specified, the method
		  name is used as before.

All the classes in the system have been converted to use this new C++
package as appropriate. All interface classes now specify numerical
identifiers for fast method lookup. Most methods are not interruptible
(except blocking I/O).

The type "mach_method_id_t" is now a pointer to a global method
descriptor structure, that can be easily printed from a debugger to
identify the method and its attributes.


(3) Eliminated the MachObjects package.

The file mach_object.h is gone. No code should include it. All code
should use the new C++ package, as defined in top_ifc.h. lib/us++ now
provides all the functionality previously present in lib/us,
lib/machobj and lib/machobj++.  lib/us, lib/machobj and lib/machobj++
are gone.


(4) Reorganized the class hierarchy

(4.1) Virtual base classes

Reduced the number of virtual base classes in the system, by
identifying those classes that absolutely need to be virtual and those
that were only declared "virtual" without a complete analysis.

To allow experimentation with the hierarchy, as well as to get around
some compiler bugs, the new virtual specifications are not wired-in.
Instead, the "virtual" keyword in each declaration has been replaced
by a macro specifying one of five categories:
	- VIRTUAL1 for inheritance of usRemote in most classes
	- VIRTUAL2 for inheritance in the abstract interface hierarchy
	- VIRTUAL4 for inheritance of usTop in iobuf and other purely
	  internal classes
	- VIRTUAL5 for inheritance in the proxy class hierarchy
	- VIRTUAL3 all other cases of inheritance
The use of these macros is controlled in top_ifc.h.

(4.2) Abstract class for cloning operations

In the old organization, the cloning functions (clone_init(),
clone_abort(), clone_complete()) are defined as pure virtuals in
usTop, forcing every concrete class derivation to provide an dummy
implementation. These functions have been moved to an abstract class
usClone, that is only inherited by those class derivations for which
cloning is actually meaningful.

(4.3) Classes declared as "abstract" instead of "concrete"

Several classes with pure virtual functions were erroneously treated
as concrete classes in the old C++ package. This works with the
g++-1.37 compiler, but not with gcc-2.0. Various declarations have
been adjusted to partially eliminate this situation.

(4.4) Use "properties" instead of full-fledged multiple inheritance
for some special cases:
	- mapped-file access
	- temporary object

These functions were previously implemented with special classes that
were directly inherited by the class that needed the corresponding
functionality. To reduce the use of multiple-inheritance, these
functions have been replaced by "property" classes that are stored as
a member of the client classes. Special pre-processor definitions are
used to implement automatic method forwarding from the client to the
member as appropriate.

Note that this approach is essentially a manual implementation of
multiple-inheritance. It is however useful in view of the problems
encountered with general-purpose multiple-inheritance with current
compilers.

(5) New general features/classes in lib/us++

(5.1) Temporary agencies (from jms)

  tmp_prop:
    By using the "DECLARE_TMP_PROP" and "DEFINE_TMP_PROP" macros, it is
    now possible to make any object a "temporary" object.  A temporary object
    is and object which derives (directly or indirectly) from vol_agency
    and is expected to "disappear" from the directory when it is "done".
    "Disappearing" even includes invocation of the destructor(s) of
    the tmp object.

    A temporary object is "done" when there are no remaining agents or
    stronglinks to it and the "ns_tmp_last_chance" check succeeds.  The last
    chance check is supplied to give the individual temporary object
    a chance to hang around longer.  Unless overidden by the tmp object,
    ns_tmp_last_chance just returns ERR_SUCCESS.  For a "tmp_dir" the
    object specific version only returns ERR_SUCCESS of the directory is
    empty.

    The tmp_prop is actually made up of the tmp_prop class contain methods
    which correspond to a number of vol_agency methods, and macros do make
    a tmp_prop a member of a tmp object and override the vol_agency methods
    with calls into the tmp_prop.

    If there are no special "last chance" semantics, and the inheritance
    hierarchy permits,  it is generally better to derive from the simple
    tmp object "tmp_agency".  It uses the tmp_prop with all its defaults
    and is derived from by tmp objects like pipes and sockets.

    For more info on how to use tmp_props, examine the tmp_agency and
    tmp_dir objects.

  tmp_dir:
    A tmp_dir is a directory which disappears when it is empty, has no agents,
    and no strong links to it.  It is useful to create more complex
    directory objects with this property. For example, a task_group is a
    tmp_dir.  When there are no longer any tasks in a task_group
    (task entries in the task_group directory) then the task group
    automatically disappears.

(5.2) Mapped files

The mapped-file property, implemented by mf_mem, mf_user and mf_mgr,
can be used to provide any class with access to a mapped area. This
mechanism replaces the set of classes by the same name that were used
through inheritance in previous versions.

The mapped-file property is used in the implementation of the UFS
server (vn_file). The class "usint_mf" defines the abstract interface
between a file proxy using mapped files (usint_mf_proxy) and the server.

(5.3) Automatic proxy generation (jms)

The script ./utils/proxy_default.csh can be used to automatically
generate a simple proxy class from an abstract interface class
specification. This proxy simply forwards all method invocations
directly to the server.

Currently, proxy_default is used only to generate the default proxies
for the task_master. It could be used for many other proxies, but the
transition has not been completed yet.

(5.4) No more active_table / active_object.

Eliminated all uses of the active_table / active_object mechanism and
associated classes in lib/us++. The vn_* classes now use a vn_mgr
derived from Paul Roy's aot. The task_master classes use temporary
objects and directories, as described above.

(5.5) Replaced ns_get_agency_ptr() with ns_get_item_ptr() (from jms)

This seems to make more sense, since we seem to re-cast the agency
pointer most of the time anyway.


(6) Task Master (from jms)

(6.1) Directory Structure:
    The task master now supplies directory structure to the name space much as
    the pipe/tty/ufs servers do.  In /server/tm/TASKS one can find the
    different task objects named by task_id.  In /server/tm/GROUPS there
    are directories with names which correspond to each active task_group_id
    and these directories also contain their task objects named by task_id.

(6.2) Object/Name Changes:
    No more job groups, just task groups (which now have ids).
    tm_agency => tm_root

(6.3) Object Structure:
    The three objects that make up the TM interface
    (usTMRoot, usTMTask, usTMTgrp) are now represented by three separate
    default proxy interfaces/implementations, not just one.

(6.4) C++:
    The TaskMaster is now implemented entirely in g++ rev 1.37.1

(6.5) Lazily evaluate the task_id and group_id in the task_master proxies.


(7) Config server 

Converted from MachObjects to C++.


(8) UFS server

Converted the client interface layer from MachObjects to C++. All the
vn_* classes from lib/us have been converted and moved to lib/us++.
Renamed fs_agency to vn_agency for consistency. Use vn_mgr to keep
track of all objects instead of the aot/agency_mgr combination. Use a
mapped-file property for file access in vn_file. Considerably
simplified the construction of client-side proxies for files.


(9) fsadmin (from jms)

Several new commands added to test the task_master.


(10) Compilation:

(10.1) Added -traditional switch. Removed -fno-warn-implicit in
    preparation for transition to gcc 2.

(10.2) Removed "#undef __cplusplus" in various include files (inside
    'extern "C"').

(10.3) Reworked many files to make gcc/g++ happier. In particular, added
    many forward declarations and function prototypes.

(10.4) Fixed dependencies for Mig-generated files.

(10.5) Added many short names for files in lib/us++, to get around the
    limitations in ar(1) (from jms).

(10.6) xkernel: Fixed to compile "compose" as a straight UNIX program
    (not MACH3_VUS), so that it will run on a 2.6 system.



Bug fixes:
--- -----

(11) Workarounds for g++/gcc2 compiler bugs:

A number of workarounds have been introduced throughout the code to
avoid compiler problems (g++-1.37.1). They are all under conditionals
of the form
	#ifdef	GXXBUG_<bug-name>

All the GXXBUG_<bug-name> keywords are defined in top_ifc.h. See the
comments in that file for details about each bug and workaround. Main
areas of concern:
	- GXXBUG_DELETE1: problems with destructor in base class with MI
	- GXXBUG_DELETE2: some destructors get called more than once
	  when virtual base classes are involved.
	- GXXBUG_PFUNC1: pointers to member functions broken
	- GXXBUG_VIRTUAL1: problems overriding virtual functions.
	  Solution: use explicit forwarding of invocation instead of
	  inheritance.
	- GXXBUG_VIRTUAL2: problems overriding virtual functions.
	  Solution: (temporarily) omit abstract interface classe from
	  the inheritance hierarchy.
	- GXXBUG_VIRTUAL3: reducing virtual base classes sometimes
	  crashes the compiler.
	- GXXBUG_CLONING1: usClone derives from usItem instead of
	  usRemote to avoid one case of multiple-inheritance.
	- GXXBUG_CLONING2: uxsignal problems with usClone and usEvent.

(12) diag_server

(12.1) Streamlined calls to diag_server in various classes. Eliminated
    diag_format().

(12.2) Fixed a bug that was causing diag_checkin() to fail, thereby
    preventing any diag messages from getting through.

(12.3) Re-enabled diag_init_mesg(). I don't know why it was ever disabled.


(13) Fixed the loader to accept spaces after the "#!" specification when
exec'ing a shell script.

(14) Fixed tmp_agency (with tmp_prop) such that pipes et al. go away
     properly. (from jms)


Organizational changes:
-------------- -------

(15) Defunct files

The following files are no longer used, and have been marked as
"defunct" in the RCS archive and removed from the release:
	./include/MachObject.h
	./include/MachLockObject.h
	./include/cat_methods.h
	./include/diag_methods.h
	./include/event_methods.h
	./include/fs_methods.h
	./include/io_methods.h
	./include/io_methods2.h
	./include/kio_methods.h
	./include/mach_object.h
	./include/mgr_methods.h
	./include/net_methods.h
	./include/net_methods2.h
	./include/nfs_methods.h
	./include/ns_methods.h
	./include/shcond_methods.h
	./include/sys_methods.h
	./include/table_ifc.h
	./include/tm_methods.h
	./include/tty_methods.h
	./include/us_task_ifc.h
	./include/uxprot_methods.h
	./lib/us++/active_object.cc
	./lib/us++/active_object_ifc.h
	./lib/us++/active_table.cc
	./lib/us++/active_table_ifc.h
	./lib/us++/agency_mgr.cc
	./lib/us++/aot.cc
	./lib/us++/external_obj.cc
	./lib/us++/external_obj_ifc.h
	./lib/us++/fd_dir.cc
	./lib/us++/fd_dir_ifc.h
	./lib/us++/fd_io.cc
	./lib/us++/fd_io_ifc.h
	./lib/us++/fs_agency.cc
	./lib/us++/fs_agency_ifc.h
	./lib/us++/fs_dir_ifc.h
	./lib/us++/fs_file_ifc.h
	./lib/us++/fs_fio_ifc.h
	./lib/us++/fs_symlink_ifc.h
	./lib/us++/fs_tsymlink_ifc.h
	./lib/us++/mf_user_proxy.cc
	./lib/us++/mf_user_proxy_ifc.h
	./lib/us++/table.cc
	./lib/us++/tm_jgrp_proxy.cc
	./lib/us++/tm_jgrp_proxy_ifc.h
	./lib/us++/us_task.cc
	./lib/us++/us_task_proxy.cc
	./lib/us++/us_task_proxy_ifc.h
	./lib/us++/us_tm.cc
	./local_include/act_internal.h
	./local_include/act_obj_internal.h
	./local_include/cat_ifc.h
	./local_include/fs_internal.h
	./local_include/io_internal.h
	./local_include/ns_internal.h
	./local_include/table_ifc.h
	./local_include/top_defs.h
	./local_include/top_ifc.h
	./server/config/config_server.c
	./server/config/sys_agency.c
	./server/tm/timer.c
	./server/tm/tm_agency.c
	./server/tm/tm_agency_ifc.h
	./server/tm/tm_internal.h
	./server/tm/tm_job_group.c
	./server/tm/tm_job_group_agent.c
	./server/tm/tm_job_group_agent_ifc.h
	./server/tm/tm_job_group_ifc.h
	./server/tm/tm_main.c
	./server/tm/tm_task.c
	./server/tm/tm_task_agent.c
	./server/tm/tm_task_agent_ifc.h
	./server/tm/tm_task_group.c
	./server/tm/tm_user_task_ifc.h


(16) Directories removed

The following directory trees are no longer needed, and have been move
to the "ATTIC" area:
	./lib/machobj
	./lib/machobj++
	./lib/us

The following directories are empty, and have been removed from the
release:
	./lib/emul/bsd_all
	./lib/emul/bsd_htg
	./lib/emul/libu



Special notes:
------- -----

This release is available "as-is" via SUP to interested parties for
experimentation. Contact mach@cs.cmu.edu for details.



******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
47
[ ./Makefile ]
Do installation of "utils" scripts first.
[92/06/24  13:32:12  jms]
[ ./Makefile-common.m4 ]
Added -traditional; removed -fno-warn-implicit.
Fixed dependencies for Mig-generated files.
[92/04/17  15:56:18  dpj]
[ ./include/base.h ]
Added extern declarations for C++.
[92/05/10  00:14:24  dpj]
[ ./include/class_info_ifc.h ]
First version.
[92/05/10  00:15:25  dpj]
[ ./include/hash.h ]
Added prototype for hash_free, needed for C++.
[92/05/10  00:16:13  dpj]
[ ./include/interrupt.h ]
Added extern declarations for C++.
[92/05/10  00:16:47  dpj]
[ ./include/method_info_ifc.h ]
Pre-compute the arg sizes for input and output.
[92/06/24  13:17:17  dpj]

First version.
[92/05/10  00:17:32  dpj]
[ ./include/ns_types.h ]
Add NST_TASK_GROUP (Not currently used) and NST_TASK
[92/06/24  13:33:58  jms]
Eliminated nested struct declarations.
Removed definitions for access_table entries, and dependency
on mach_object.h.
[92/04/17  16:00:02  dpj]
[ ./include/tm_types.h ]
Change Job groups to Task groups.
Waste bogus tm_{user,group}_id stuff
Define MAXes of ascii reps of task/group ids
[92/06/24  13:38:53  jms]
[ ./include/top_ifc.h ]
Reorganized destructor guard (under GXXBUG_DELETE2) to reduce the amount
of debugging output. Moved some functions to top.cc to allow easier
re-compilation.
[92/07/05  18:50:17  dpj]

Added various GXXBUG conditionals to work around compiler problems.
Re-organized the class hierarchy to remove many virtual base class
specifications.
[92/06/24  13:22:45  dpj]

New version for C++ RPC package.
[92/05/10  00:18:49  dpj]
[ ./include/us_byteio_ifc.h ]
Conditionalized virtual base class specification.
Added EXPORT for io_map().
[92/06/24  13:25:01  dpj]
[ ./include/us_error.h ]
Added US_NO_REMOTE_MGR for mapped-file control.
[92/06/24  13:25:33  dpj]
[ ./include/us_event_ifc.h ]
Make usEvent derive from usItem vs usRemote
Export event_post_with_timeout (bugfix)
[92/06/24  13:40:47  jms]
Conditionalized virtual base class specification.
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  15:43:13  dpj]
[ ./include/us_io_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:45:12  dpj]
[ ./include/us_item_ifc.h ]
Added ns_get_item_ptr() (from jms).
[92/06/29  22:42:11  dpj]

Conditionalized virtual base class specifications.
[92/06/24  15:45:29  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:01:20  dpj]

Made ns_(un)register_agent() into real functions instead of pure
virtuals, to get around a bug in gcc-2.0.
[92/03/10  20:29:13  dpj]
[ ./include/us_name_ifc.h ]
Insert comments for all methods.  These comments come for the MachObjects
version of the file and were not copied when the code was translated.
[92/06/24  13:47:00  jms]
Conditionalized virtual base class specifications.
[92/06/24  15:45:55  dpj]
[ ./include/us_net_base_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:46:10  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:01:33  dpj]
[ ./include/us_net_clts_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:49:54  dpj]
[ ./include/us_net_clts_recs_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:50:11  dpj]
[ ./include/us_net_connector_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:50:57  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:01:46  dpj]
[ ./include/us_net_cots_bytes_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:51:25  dpj]
[ ./include/us_net_cots_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:51:39  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:02:07  dpj]
[ ./include/us_net_cots_recs_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:51:51  dpj]
[ ./include/us_net_name_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:52:04  dpj]
[ ./include/us_recio_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:52:18  dpj]
[ ./include/us_sys_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  15:52:33  dpj]
[ ./include/us_tm_root_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/29            dpj]

C++ interface of the task_master "root" functionallity.  Code translate
from tm_agency_ifc.h.
[92/06/24  13:49:53  jms]
[ ./include/us_tm_task_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/29            dpj]

External interface for a task object.  Replaces the task specific portion
of us_task_ifc.h (dead file).
[92/06/24  13:52:01  jms]
[ ./include/us_tm_tgrp_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/29            dpj]

External task group interface replacing the task_group class from 
us_task_ifc.h (dead file).
[92/06/24  13:56:32  jms]
[ ./lib/Makefile ]
Removed lib/us from automatic build.
[92/07/05  18:50:55  dpj]

Removed machobj++ (merged into us++).
[92/05/10  00:20:26  dpj]
[ ./lib/emul/Makefile ]
Removed libmachobj++.
[92/05/10  00:21:04  dpj]
[ ./lib/emul/emul_all.cc ]
Use new us_tm_{root,task,tgrp}_proxy_ifc.h interfaces for the C++ taskmaster.
[92/06/24  13:59:53  jms]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
Removed call to _init_task_id(). This is now done lazily.
Added include of usint_mf_proxy_ifc.
[92/06/24  15:54:40  dpj]

Eliminated diag_format().
Converted for new C++ RPC package.
[92/05/10  00:26:56  dpj]

Removed include of strings.h (not needed).
[92/04/17  16:02:57  dpj]
[ ./lib/emul/emul_all_ifc.h ]
Add ns_token_t arg to emul_init_task_master for correct initial task
registration.
[92/06/24  14:01:43  jms]
[ ./lib/emul/emul_basic.cc ]
No Change
[92/06/24  14:02:49  jms]
[ ./lib/emul/emul_error.cc ]
JOB_GROUP->TASK_GROUP
[92/06/24  14:04:44  jms]
[ ./lib/emul/emul_exec.cc ]
No changes.
[92/06/29  22:44:00  dpj]

Eliminated diag_format().
Converted to new C++ RPC package.
[92/05/10  00:27:45  dpj]

Skip spaces after '#!".
[92/03/12  13:45:35  dpj]
[ ./lib/emul/emul_file.cc ]
Eliminated diag_format().
Converted to new C++ RPC package.
[92/05/10  00:29:27  dpj]
[ ./lib/emul/emul_init.cc ]
Don't nee tm_types.h
[92/06/24  14:07:41  jms]
Eliminated uses of fd_* classes.
[92/06/26            dpj]
Eliminated diag_format().
Converted to new C++ RPC package.
[92/05/10  00:29:50  dpj]
[ ./lib/emul/emul_init_prog/Makefile ]
Removed libmachobj++.
[92/05/10  00:30:17  dpj]
[ ./lib/emul/emul_io.cc ]
No changes.
[92/06/29  22:44:34  dpj]

Converted to new C++ RPC package.
[92/05/10  00:31:31  dpj]

Removed dead code.
[92/03/12  13:46:19  dpj]
[ ./lib/emul/emul_io.h ]
No changes.
[92/06/29  22:44:59  dpj]

Removed include of mach_object.h.
[92/05/10  00:32:10  dpj]

Removed FD_* flags and MAX_OPEN_FILES definitions (not used).
[92/03/10  20:30:01  dpj]
[ ./lib/emul/emul_misc.cc ]
Make the exec_debug_level more broadly available for use as a backdoor
general debug flag.
[92/06/24  14:29:02  jms]
Converted to new C++ RPC package.
[92/05/10  00:35:08  dpj]
[ ./lib/emul/emul_proc.cc ]
Use new us_tm_{root,task,tgrp}_ifc.h interfaces for the C++ taskmaster.
Can you say "castdown"?
[92/06/24  14:32:06  jms]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
Removed call to _init_task_id(). This is now done lazily.
[92/06/24  15:55:08  dpj]

Eliminated diag_format().
Converted to new C++ RPC package.
[92/05/10  00:36:30  dpj]
[ ./lib/emul/emul_proc.h ]
Use new us_tm_{root,task,tgrp}_ifc.h interfaces for the C++ taskmaster.
[92/06/24  14:33:25  jms]
[ ./lib/emul/emul_signal.cc ]
Use new us_tm_{root,task,tgrp}_ifc.h interfaces for the C++ taskmaster.
[92/06/24  14:34:14  jms]
[ ./lib/emul/emul_socket.cc ]
Converted to new C++ RPC package.
[92/05/10  00:37:07  dpj]
[ ./lib/emul/emul_time.cc ]
Use new us_tm_{root,task,tgrp}_ifc.h interfaces for the C++ taskmaster.
[92/06/24  14:36:08  jms]
[ ./lib/emul/emul_uid.cc ]
Dump old tm_set_task_{user/group}_ids calls and replaces with
tm_change_task_auth.
[92/06/24  14:38:58  jms]
[ ./lib/emul/emul_user_init.cc ]
tm_job_group_cat -> tm_tgrp_proxy
tm_task_cat -> tm_task_proxy
[92/06/24  14:40:47  jms]
Added include of usint_mf_proxy_ifc.
[92/06/24  15:55:36  dpj]

Eliminated diag_format().
[92/05/10  00:39:12  dpj]
[ ./lib/emul/i386/emul_machdep.c ]
Removed include of mach_object.h.
[92/05/10  01:37:26  dpj]

Converted to new C++ RPC package.
[92/05/10  00:39:31  dpj]

Added include of mach_object.h.
[92/04/17  16:04:46  dpj]
[ ./lib/emul/inherit_ports.cc ]
Eliminated diag_format().
[92/05/10  00:40:17  dpj]
[ ./lib/emul/memory/Makefile ]
No changes.
[92/05/10  00:40:30  dpj]
[ ./lib/mach3/mach3/err_server.sub ]
No further changes.
[92/06/29  22:47:18  dpj]

Added translation for US_NO_REMOTE_MGR.
[92/06/24  15:56:07  dpj]

Added blackboard codes.
[92/03/10  20:30:31  dpj]
[ ./lib/mach3/mach_sa/Makefile-include ]
No further changes.
[92/06/29  22:47:53  dpj]

Upgraded for MK71. Get the string operations from libmach_sa.
Rebuilt mach_init_ports.o, to get the name server port.
[92/03/12  13:47:48  dpj]
[ ./lib/mach3/mach_sa/mach_init_ports.c ]
No further changes.
[92/06/29  22:48:10  dpj]

Copied from the version in .../mk/user/libmach, removing all
references to sbrk() and fork(). This is necessary to get around
intense confusion in libmach_sa.a and libmach.a.
[92/03/11            dpj]
[ ./lib/mach3/unix/I386/Makefile-machdep ]
No further changes.
[92/06/29  22:48:24  dpj]

Updated for MK71. Get _setjmp.o from libmach_sa.a instead of rebuilding it.
[92/03/12  13:49:07  dpj]
[ ./lib/mach3/unix/Makefile-include2 ]
No further changes.
[92/06/29  22:48:40  dpj]

Updated for MK71. Get the string functions from libmach_sa.a instead
of rebuilding them.
[92/03/12  14:00:47  dpj]
[ ./lib/mach3/us/server_loop.c ]
No further changes.
[92/06/29  22:49:08  dpj]

Fixed to use a big enough buffer to receive replies. This was causing 
diag_checkin to fail, so that we never saw any messages anymore...
[92/05/10  00:41:47  dpj]
[ ./lib/threads/Makefile ]
Added CENV and CARGS for standard switch handling.
[92/04/17  16:05:45  dpj]
[ ./lib/us++/I386/cthread_inline.awk ]
First version.
[92/05/10  00:44:59  dpj]
[ ./lib/us++/Makefile ]
Auto-generate taskmaster and event default proxies with "proxy_default"
	script

New objects:	tmp_prop.o, us_tm_{root,task,tgrp}_[proxy_].o
		tm_tgrp_proxy.o

Dead objs:	us_task.o, us_task_proxy.o, tm_jgrp_proxy.o

Add mess'o short names
[92/06/24  15:19:46  jms]
Reorganized for new library structure:
	- new vn_classes
	- no more active_object
	- usint_mf
	- usClone
[92/06/24  15:57:17  dpj]

Eliminated diag_format().
Added support for inlining some files.
[92/05/10  00:45:31  dpj]
[ ./lib/us++/access_table.cc ]
Fix access table to use new us_tm_{root,task,tgrp}_ifc.h interfaces
for the C++ taskmaster.
[92/06/24  15:21:24  jms]
Added entry for io_get_mf_state.
[92/06/24  15:58:01  dpj]

Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  00:46:26  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:06:15  dpj]
[ ./lib/us++/access_table_ifc.h ]
Converted to new C++ RPC package.
[92/05/10  00:46:42  dpj]

Removed undef of __cplusplus in extern "C" declarations.
Added macros for defining access table entries (moved from ns_types.h).
[92/04/17  16:07:05  dpj]
[ ./lib/us++/agency.cc ]
Waste ns_get_agency_ptr, replaced with usItem::ns_get_item_ptr
[92/06/24  15:26:07  jms]
Eliminated active_table/active_object mechanism.
[92/06/24  16:00:25  dpj]

Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  00:47:10  dpj]
[ ./lib/us++/agency_ifc.h ]
Waste ns_get_agency_ptr(agency**).  See usItem::ns_get_item_ptr.
[92/06/24  15:27:30  jms]
Conditionalized virtual base class specifications.
Eliminated active_table/active_object mechanism.
Made ns_create_agent() virtual.
[92/06/24  16:01:12  dpj]

No changes.
[92/05/10  00:47:26  dpj]
[ ./lib/us++/agent.cc ]
Removed ns_get_agency_ptr() (replaced by ns_get_item_ptr()).
[92/07/05  18:52:25  dpj]

Replace ns_get_agency_ptr with ns_get_item_ptr.
[92/06/24  15:28:55  jms]
Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  00:48:42  dpj]
[ ./lib/us++/agent_ifc.h ]
Replace ns_get_agency_ptr with ns_get_item_ptr.
[92/06/24  15:29:18  jms]
Converted to new C++ RPC package.
[92/05/10  00:50:23  dpj]

Initial C++ revision.
[90/11/14  17:02:13  pjg]
[ ./lib/us++/bytestream.cc ]
Define as an abstract class instead of a concrete class.
[92/06/24  16:05:28  dpj]

Fixed ambiguity with local member "lock".
Added DESTRUCTOR_GUARD.
[92/05/10  00:51:00  dpj]
[ ./lib/us++/bytestream_ifc.h ]
Define as an abstract class instead of a concrete class.
[92/06/24  16:06:12  dpj]
[ ./lib/us++/class_info.cc ]
Removed "static" keyword in global definition.
[92/06/24  16:06:51  dpj]

First version.
[92/05/10  00:51:19  dpj]
[ ./lib/us++/clone.cc ]
First working version.
[92/06/24  16:07:29  dpj]
[ ./lib/us++/clone_ifc.h ]
First working version.
[92/06/24  16:07:48  dpj]
[ ./lib/us++/clone_master.cc ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  16:08:09  dpj]
[ ./lib/us++/clone_master_ifc.h ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  16:08:29  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:08:24  dpj]

Upgraded to US38
[91/04/14  18:23:46  pjg]
[ ./lib/us++/default_iobuf_mgr_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  16:08:47  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:08:44  dpj]
[ ./lib/us++/diag.cc ]
Re-enabled diag_init_mesg(). I don't know why it was ever disabled.
[92/07/05  18:53:35  dpj]

Added cloning functions under GXXBUG_CLONING1.
[92/06/24  16:09:32  dpj]

Added extern declarations for C++.
[92/05/10  00:51:38  dpj]
[ ./lib/us++/diag_ifc.h ]
Conditionalized virtual base class specifications.
Added cloning functions under GXXBUG_CLONING1.
[92/06/24  16:10:57  dpj]

Made usTop a virtual base class instead of a plain base class.
Fixed prototype for diag_format().
[92/05/10  00:52:39  dpj]
[ ./lib/us++/dir.cc ]
hash_table -> entry_table (missed in jms merge).
[92/07/05  18:54:11  dpj]

Remove MI derivation from usName to avoid g++1.37 MI bug.
Remove ancient castdown decl
ns_lookup_entry_internal -> ns_lookup_entry
Add dir::dir_entry_count(void) to server internal use only.
Replace ns_get_agency_ptr with ns_get_item_ptr, take out null castdown hack.
Add a directory iterator for server internal use only.
[92/06/24  15:44:11  jms]
GXXBUG_VIRTUAL2: (temporarily) remove inheritance on usName.
Remote class = usName_proxy.
[92/06/24  16:13:04  dpj]

Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  00:53:40  dpj]

Removed undef of __cplusplus in extern "C" declarations.
Renamed "hash_table" to "entry_table".
[92/04/17  16:09:41  dpj]
[ ./lib/us++/dir_ifc.h ]
Remove MI derivation from usName to avoid g++1.37 MI bug.
Add dir::dir_entry_count(void) to server internal use only.
Add a directory iterator for server internal use only.
ns_lookup_entry_internal -> ns_lookup_entry
Make ns_xxx_entry "public" as they always were all other classes
[92/06/24  15:57:04  jms]
GXXBUG_VIRTUAL2: (temporarily) remove inheritance on usName.
Made ns_forwarding_entry() return _notdef() inline.
[92/06/24  16:14:20  dpj]

Renamed "hash_table" to "entry_table".
[92/04/17  16:10:12  dpj]
[ ./lib/us++/fs_access.cc ]
Added a DESTRUCTOR_GUARD.
Defined as a LOCAL_CLASS.
Changed some signed ints to unsigned ints and vice-versa.
[92/06/24  16:17:14  dpj]
[ ./lib/us++/fs_access_ifc.h ]
Defined as a LOCAL_CLASS.
Changed some signed ints to unsigned ints and vice-versa.
[92/06/24  16:17:56  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:10:33  dpj]

add fs_is_root().
[90/01/02  14:14:45  dorr]
[ ./lib/us++/fs_auth.cc ]
Defined as a LOCAL_CLASS.
Replaced fs_cred with fs_cred_data to keep new compiler happy.
Converted to new IPC.
[92/06/24  16:20:10  dpj]
[ ./lib/us++/fs_auth_ifc.h ]
Make the new compiler happy.
[92/06/24  16:21:01  dpj]

Initial version from dpj_5
[89/01/12  18:17:57  dpj]
[ ./lib/us++/fs_cred.cc ]
Derive from std_cred instead of usTop.
Use fs_auth instead of std_auth.
[92/06/24  16:22:09  dpj]
[ ./lib/us++/fs_cred_ifc.h ]
Derive from std_cred instead of usTop.
Use fs_auth instead of std_auth.
[92/06/24  16:22:48  dpj]

Initial version from dpj_5
[89/01/12  18:17:46  dpj]
[ ./lib/us++/interrupt.c ]
First version. Moved here from lib/machobj++.
[92/05/10  00:54:14  dpj]
[ ./lib/us++/io_types.cc ]
Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:10:56  dpj]
[ ./lib/us++/iobuf_user.cc ]
Derive from usItem instead of usTop.
[92/06/24  16:24:47  dpj]
[ ./lib/us++/iobuf_user_ifc.h ]
Conditionalized virtual base class specifications.
Derive from usItem instead of usTop.
[92/06/24  16:25:29  dpj]
[ ./lib/us++/method_info.cc ]
Removed "static" keyword for global definitions.
Pre-compute the size of arguments for input and output.
[92/06/24  16:26:14  dpj]

First version.
[92/05/10  00:54:30  dpj]
[ ./lib/us++/mf_mem.cc ]
Reorganized for use with usint_mf class.
Full lazy initialization.
Converted for new C++ RPC package.
[92/06/24  16:27:54  dpj]

Eliminated ambiguity with local member "lock".
Added DESTRUCTOR_GUARD.
[92/05/10  00:55:03  dpj]
[ ./lib/us++/mf_mem_ifc.h ]
Reorganized for use with new usint_mf class.
Converted for new C++ RPC package.
[92/06/24  16:28:51  dpj]
[ ./lib/us++/mf_mgr.cc ]
Converted for use as a "property" instead of a full base class.
[92/06/24  16:30:01  dpj]
[ ./lib/us++/mf_mgr_ifc.h ]
Converted for use as a "property" instead of a full base class.
[92/06/24  16:30:26  dpj]
[ ./lib/us++/mf_user.cc ]
Converted for use as a "property" instead of a full base class.
Converted for new C++ RPC package.
[92/06/24  16:30:52  dpj]

Converted to new C++ RPC package.
[92/05/10  00:55:22  dpj]
[ ./lib/us++/mf_user_ifc.h ]
Converted for use as a "property" instead of a full base class.
[92/06/24  16:31:26  dpj]

No changes.
[92/05/10  00:55:33  dpj]
[ ./lib/us++/mf_user_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  00:55:49  dpj]
[ ./lib/us++/net_dir_base.cc ]
ns_lookup_entry_internal -> ns_lookup_entry
[92/06/24  15:57:53  jms]
Converted to new C++ RPC package.
[92/05/10  00:56:04  dpj]
[ ./lib/us++/net_types.cc ]
Added a few extern declarations to reduce compiler warnings.
[92/06/24  16:59:36  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:11:18  dpj]
[ ./lib/us++/pager_base.cc ]
First working version.
[92/06/24  17:00:08  dpj]
[ ./lib/us++/pager_base_ifc.h ]
First working version.
[92/06/24  17:00:37  dpj]
[ ./lib/us++/recordstream.cc ]
Define as an abstract class instead of a concrete class.
[92/06/24  17:01:48  dpj]

Eliminated ambiguity with local member "lock".
Added DESTRUCTOR_GUARD.
[92/05/10  00:56:32  dpj]
[ ./lib/us++/recordstream_ifc.h ]
Define as an abstract class instead of a concrete class.
[92/06/24  17:02:02  dpj]
[ ./lib/us++/remote.cc ]
Fixed history.
[92/06/29  22:57:49  dpj]

Define as an abstract class instead of a concrete class.
Fixed termination sequence for external ports.
[92/06/24  17:04:35  dpj]

Converted to new C++ RPC package.
[92/05/10  00:56:59  dpj]

Commented-out suspicious task_suspend().
Fixed arg types for _make_external_port().
[92/03/12  13:51:11  dpj]
[ ./lib/us++/rpcmgr.cc ]
Call msg_free() for incoming invokes based on complex bit in
header, not on predicted type in arg info.
[92/07/05            dpj]

Improved debug message for outgoing invokes.
[92/07/05  18:54:43  dpj]

Removed "static" keyword in global definitions.
Use pre-computed sized for input and output arguments.
[92/06/24  17:05:31  dpj]

First version.
[92/05/10  00:57:16  dpj]
[ ./lib/us++/rpcmgr_ifc.h ]
First version.
[92/05/10  00:57:28  dpj]
[ ./lib/us++/std_auth.cc ]
Fixed compiler warnings.
[92/06/24  17:06:52  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:11:43  dpj]
[ ./lib/us++/std_auth_ifc.h ]
Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:12:04  dpj]
[ ./lib/us++/std_cred.cc ]
Added DESTRUCTOR_GUARD.
[92/05/10  00:57:39  dpj]
[ ./lib/us++/std_cred_ifc.h ]
Made main methods virtual.
[92/06/24  17:07:51  dpj]

Upgraded to US38
[91/04/14  18:30:47  pjg]

Initial C++ revision.
[90/11/14  17:10:37  pjg]
[ ./lib/us++/std_ident_ifc.h ]
Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:12:20  dpj]
[ ./lib/us++/std_name.cc ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:08:39  dpj]

Converted to new C++ RPC package.
[92/05/10  00:57:55  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:12:39  dpj]
[ ./lib/us++/std_name_ifc.h ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:08:57  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:12:56  dpj]
[ ./lib/us++/std_prot.cc ]
Define as an abstract class instead of a concrete class.
Eliminated active_table/active_object mechanism.
[92/06/24  17:09:21  dpj]

Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  00:58:10  dpj]
[ ./lib/us++/std_prot_ifc.h ]
Define as an abstract class instead of a concrete class.
Eliminated active_table/active_object mechanism.
[92/06/24  17:10:00  dpj]

Added a couple of include files.
[92/05/10  00:58:32  dpj]
[ ./lib/us++/symlink.cc ]
Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:15:05  dpj]
[ ./lib/us++/test/Makefile ]
Added test_proxy and test_virtual.
[92/06/24  17:14:39  dpj]

Removed libmachobj.
[92/05/10  00:59:33  dpj]

First experimental version.
[92/03/12  13:52:22  dpj]
[ ./lib/us++/tm_task_proxy.cc ]
Fixed-up the mess with the RPC constructor.
Use NULL_TASK_ID explicitly (NOT 0).
[92/07/05  18:55:45  dpj]

Use new us_tm_{root,task,tgrp}_ifc.h interfaces for the C++ taskmaster.
Remove stuff for "tm_agency" and "tm_jgrp"
Init task_id to NULL_TASK_ID which != 0
[92/06/24  16:02:22  jms]
Converted to new C++ RPC package.
[92/05/10  01:00:50  dpj]
[ ./lib/us++/tm_task_proxy_ifc.h ]
Use new us_tm_task_ifc.h interface for the C++ taskmaster.
[92/06/24  16:09:04  jms]
Eliminated _init_task_id().
[92/05/10  01:01:06  dpj]
[ ./lib/us++/tm_tgrp_proxy.cc ]
Converted for new RPC package.
Fixed-up the mess with the RPC constructor.
[92/07/05  18:56:49  dpj]

Use new us_tm_tgrp_ifc.h interfaces for the C++ taskmaster to implement
logic that had been in tm_jgrp_proxy.cc.
[92/06/24  16:10:54  jms]
[ ./lib/us++/tm_tgrp_proxy_ifc.h ]
Use non-inline default constructor, with initalization for local cache.
[92/07/05  18:57:25  dpj]

Use new us_tm_tgrp_ifc.h interface for the C++ taskmaster to implement
functionality that had been found in tm_jgrp_proxy_ifc.h
[92/06/24  16:14:25  jms]
[ ./lib/us++/tmp_agency.cc ]
Remove the "real" temporary agency code putting it into the new "tmp_prop"
mechinism.  Then use this new mechinism to implement tmp_agency.
[92/06/24  16:16:40  jms]
Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  01:01:19  dpj]
[ ./lib/us++/tmp_agency_ifc.h ]
Remove the "real" temporary agency interface putting it into the new "tmp_prop"
mechinism.  Then use this new mechinism to declare tmp_agency.
[92/06/24  16:18:10  jms]
[ ./lib/us++/tmp_dir.cc ]
Initial tmp_dir.  This is a directory which automatically/atomically
disappears when it nolonger has agents/stronglinks/entries just as a
tmp_agency goes away when it has not agents/stronglinks.

Implemented using the "tmp_prop" and overiding some additional "dir" methods
where needed.
[92/06/24  16:22:23  jms]
[ ./lib/us++/tmp_dir_ifc.h ]
Initial tmp_dir.  This is a directory which automatically/atomically
disappears when it nolonger has agents/stronglinks/entries just as a
tmp_agency goes away when it has not agents/stronglinks.

Implemented using the "tmp_prop" and overiding some additional "dir" methods
where needed.
[92/06/24  16:25:23  jms]
[ ./lib/us++/tmp_prop.cc ]
Converted for new C++-based package.
[92/07/05  18:57:48  dpj]

Mechinism built from a previous revision on of "tmp_agency" to supply a
way to make an agency temporary.  This means that it will go away iff
there are no more stronglinks or agents left for the agency and the
the "last_chance" checks succeed.  These "last_chance" checks are controlled
by any given agency which wishes to be a tmp_prop. (See tmp_dir/tmp_agency)
[92/06/24  16:31:29  jms]
[ ./lib/us++/tmp_prop_ifc.h ]
Mechinism built from a previous revision on of "tmp_agency" to supply a
way to make an agency temporary.  This means that it will go away iff
there are no more stronglinks or agents left for the agency and the
the "last_chance" checks succeed.  These "last_chance" checks are controlled
by any given agency which wishes to be a tmp_prop. (See tmp_dir/tmp_agency)
[92/06/24  16:31:56  jms]
[ ./lib/us++/top.cc ]
Reorganized destructor guard (under GXXBUG_DELETE2) to reduce
the amount of debugging output.
[92/07/05  18:58:34  dpj]

No further changes.
[92/06/29  23:04:01  dpj]

Added compiler workarounds (GXXBUG).
Made _notdef() print an error instead of a debugging warning.
[92/06/24  17:16:37  dpj]

Converted to new C++ RPC package.
[92/05/10  01:01:33  dpj]
[ ./lib/us++/tty_bsd_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:12:51  dpj]
[ ./lib/us++/tty_bsd_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:17:09  dpj]
[ ./lib/us++/us_byteio.cc ]
Added dummy definition for io_map() as a null RPC.
[92/06/24  17:17:40  dpj]

Specified that some methods are interruptible.
[92/05/10  01:18:05  dpj]
[ ./lib/us++/us_byteio_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:18:44  dpj]
[ ./lib/us++/us_byteio_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:17:57  dpj]
[ ./lib/us++/us_event.cc ]
Change parent class to usItem
[92/06/24  16:34:00  jms]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:18:20  dpj]

Specified that some methods are interruptible.
[92/05/10  01:19:00  dpj]
[ ./lib/us++/us_item.cc ]
Add ns_get_item_ptr
[92/06/24  16:35:16  jms]
Made ns_(un)register_agent() into real functions instead of pure
virtuals, to get around a bug in gcc-2.0.
[92/03/10  20:32:09  dpj]
[ ./lib/us++/us_item_proxy.cc ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:18:53  dpj]

Converted to new C++ RPC package.
[92/05/10  01:19:25  dpj]
[ ./lib/us++/us_item_proxy_ifc.h ]
Conditionalized virtual base class specifications.
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:19:18  dpj]

Removed virtual destructor.
[92/05/10  01:19:50  dpj]
[ ./lib/us++/us_name_proxy.cc ]
Added a DESTRUCTOR_GUARD.
[92/06/24  17:19:46  dpj]

Converted to new C++ RPC package.
[92/05/10  01:20:06  dpj]
[ ./lib/us++/us_name_proxy_ifc.h ]
Conditionalized virtual base class specifications.
Added a DESTRUCTOR_GUARD.
[92/06/24  17:20:07  dpj]
[ ./lib/us++/us_net_base_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:20:27  dpj]
[ ./lib/us++/us_net_base_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:20:19  dpj]
[ ./lib/us++/us_net_clts.cc ]
Specified that some methods are interruptible.
[92/05/10  01:20:40  dpj]
[ ./lib/us++/us_net_clts_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:20:52  dpj]
[ ./lib/us++/us_net_clts_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:20:33  dpj]
[ ./lib/us++/us_net_clts_recs_proxy.cc ]
No changes.
[92/05/10  01:21:01  dpj]
[ ./lib/us++/us_net_clts_recs_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:20:48  dpj]
[ ./lib/us++/us_net_connector.cc ]
Specified that some methods are interruptible.
[92/05/10  01:21:17  dpj]
[ ./lib/us++/us_net_connector_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:21:33  dpj]
[ ./lib/us++/us_net_connector_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:21:07  dpj]
[ ./lib/us++/us_net_cots.cc ]
Specified that some methods are interruptible.
[92/05/10  01:21:48  dpj]
[ ./lib/us++/us_net_cots_bytes_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:21:19  dpj]
[ ./lib/us++/us_net_cots_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:22:18  dpj]
[ ./lib/us++/us_net_cots_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:21:32  dpj]
[ ./lib/us++/us_net_cots_recs_proxy.cc ]
No changes.
[92/05/10  01:22:27  dpj]
[ ./lib/us++/us_net_cots_recs_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:21:45  dpj]
[ ./lib/us++/us_net_name_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:22:41  dpj]
[ ./lib/us++/us_net_name_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:21:57  dpj]
[ ./lib/us++/us_recio.cc ]
Specified that some methods are interruptible.
[92/05/10  01:22:52  dpj]
[ ./lib/us++/us_recio_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:23:02  dpj]
[ ./lib/us++/us_recio_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:22:08  dpj]
[ ./lib/us++/us_sys.cc ]
Derive from usItem instead of usRemote.
[92/06/24  17:22:31  dpj]
[ ./lib/us++/us_sys_proxy.cc ]
Converted to new C++ RPC package.
[92/05/10  01:23:14  dpj]
[ ./lib/us++/us_sys_proxy_ifc.h ]
Conditionalized virtual base class specifications.
[92/06/24  17:23:24  dpj]
[ ./lib/us++/us_tm_root.cc ]
Define new us_tm_root_ifc.h interfaces for the C++ taskmaster.
Replaces tm_agency class from us_tm_task_ifc.h(dead file)
[92/06/24  16:49:35  jms]

Created.
[91/04/14  18:44:01  pjg]

Initial C++ revision.
[90/11/14  16:05:55  pjg]
[ ./lib/us++/us_tm_task.cc ]
Implement new us_tm_task_ifc.h interfaces for the C++ taskmaster.
[92/06/24  16:50:55  jms]

Created.
[91/04/14  18:44:01  pjg]

Initial C++ revision.
[90/11/14  16:05:55  pjg]
[ ./lib/us++/us_tm_tgrp.cc ]
Implement new us_tm_tgrp_ifc.h interfaces for the C++ taskmaster.
Replaces some code from us_task.cc.
[92/06/24  16:58:15  jms]

Created.
[91/04/14  18:44:01  pjg]

Initial C++ revision.
[90/11/14  16:05:55  pjg]
[ ./lib/us++/usint_mf.cc ]
First working version.
[92/06/24  17:24:01  dpj]
[ ./lib/us++/usint_mf_ifc.h ]
First working version.
[92/06/24  17:24:20  dpj]
[ ./lib/us++/usint_mf_proxy.cc ]
First working version.
[92/06/24  17:24:40  dpj]
[ ./lib/us++/usint_mf_proxy_ifc.h ]
First working version.
[92/06/24  17:24:54  dpj]
[ ./lib/us++/usint_mfio_ifc.h ]
First working version.
[92/06/24  17:25:10  dpj]
[ ./lib/us++/vn_agency.cc ]
First working version.
[92/06/24  17:25:28  dpj]
[ ./lib/us++/vn_agency_ifc.h ]
First working version.
[92/06/24  17:25:42  dpj]
[ ./lib/us++/vn_dir.cc ]
Use ns_get_item_ptr() instead of ns_get_agency_ptr().
[92/07/05  18:59:38  dpj]

First working version.
[92/06/24  17:26:11  dpj]
[ ./lib/us++/vn_dir_ifc.h ]
First working version.
[92/06/24  17:26:25  dpj]
[ ./lib/us++/vn_file.cc ]
First working version.
[92/06/24  17:26:37  dpj]
[ ./lib/us++/vn_file_ifc.h ]
First working version.
[92/06/24  17:26:49  dpj]
[ ./lib/us++/vn_mgr.cc ]
First working version.
[92/06/24  17:27:01  dpj]
[ ./lib/us++/vn_mgr_ifc.h ]
First working version.
[92/06/24  17:27:14  dpj]
[ ./lib/us++/vn_pager.cc ]
First working version.
[92/06/24  17:27:30  dpj]
[ ./lib/us++/vn_pager_ifc.h ]
First working version.
[92/06/24  17:27:46  dpj]
[ ./lib/us++/vn_symlink.cc ]
First working version.
[92/06/24  17:27:59  dpj]
[ ./lib/us++/vn_symlink_ifc.h ]
First working version.
[92/06/24  17:28:11  dpj]
[ ./lib/us++/vn_tsymlink.cc ]
First working version.
[92/06/24  17:28:23  dpj]
[ ./lib/us++/vn_tsymlink_ifc.h ]
First working version.
[92/06/24  17:28:35  dpj]
[ ./lib/us++/vol_agency.cc ]
Add the ns_tmp_xxx methods to enable the tmp_prop.
ns_register_tmplink only acts on dirs now.
[92/06/24  17:01:22  jms]
Eliminated ambiguity with local member "lock".
[92/05/10  01:24:08  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:17:27  dpj]
[ ./lib/us++/vol_agency_ifc.h ]
Add the ns_tmp_xxx methods to enable the tmp_prop.
ns_register_tmplink only acts on dirs now.
[92/06/24  17:01:57  jms]
No changes.
[92/05/10  01:24:17  dpj]
[ ./lib/ux/devnull.cc ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:29:39  dpj]
[ ./lib/ux/devnull_ifc.h ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:29:56  dpj]
[ ./lib/ux/ftab.cc ]
Converted to new C++ RPC package.
[92/05/10  01:24:32  dpj]
[ ./lib/ux/ftab_ifc.h ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:30:27  dpj]
[ ./lib/ux/uxident.cc ]
Converted to new C++ RPC package.
[92/05/10  01:24:45  dpj]
[ ./lib/ux/uxident_ifc.h ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:31:03  dpj]
[ ./lib/ux/uxio.cc ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:31:18  dpj]

Converted to new C++ RPC package.
[92/05/10  01:25:00  dpj]
[ ./lib/ux/uxio_socket.cc ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:31:51  dpj]

Converted to new C++ RPC package.
[92/05/10  01:25:14  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:20:05  dpj]
[ ./lib/ux/uxsignal.cc ]
Make ther remote class for a usEvent be usEvent_proxy
[92/06/24  17:05:52  jms]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:32:10  dpj]
[ ./lib/ux/uxsignal_ifc.h ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
Added a few include files for good luck with the compiler...
[92/06/24  17:32:47  dpj]
[ ./lib/ux/uxstat_ifc.h ]
Introduced abstract class usClone to define cloning functions
previously defined in usTop.
[92/06/24  17:33:16  dpj]
[ ./local_include/debug.h ]
Fixed some declarations for C++.
[92/05/10  01:25:45  dpj]
[ ./local_include/fs_types.h ]
Added a few extern declarations to reduce compiler warnings.
Fixed various syntax for new C++ compiler.
[92/06/24  17:34:40  dpj]
[ ./local_include/net_internal.h ]
Removed include of mach_object.h.
[92/05/10  01:26:16  dpj]
[ ./local_include/stdarg.h ]
First version. Installed here for easier compilation.
[92/05/10  01:26:56  dpj]
[ ./pkg/netmsg/server/sbuf.h ]
No change?
[92/03/10  20:33:36  dpj]
[ ./pkg/xkernel/STD/Makefile ]
Removed libmachobj++.
[92/05/10  01:27:24  dpj]
[ ./pkg/xkernel/mach3/Makefile.template ]
No changes.
[92/05/10  01:27:33  dpj]
[ ./pkg/xkernel/user/net_dir.cc ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:25:23  dpj]
[ ./pkg/xkernel/user/net_dir_ifc.h ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:25:38  dpj]
[ ./pkg/xkernel/user/net_init.cc ]
Converted to new C++ RPC package.
[92/05/10  01:27:47  dpj]
[ ./pkg/xkernel/user/usudp_clts.cc ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:09:32  jms]
Converted to new C++ RPC package.
[92/05/10  01:27:59  dpj]
[ ./pkg/xkernel/user/usudp_clts_ifc.h ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:15:49  jms]
[ ./pkg/xkernel/user/usudp_cots.cc ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:16:14  jms]
[ ./pkg/xkernel/user/usudp_cots_ifc.h ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:16:50  jms]
[ ./pkg/xkernel/user/usudp_dir.cc ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:26:04  dpj]

Converted to new C++ RPC package.
[92/05/10  01:28:11  dpj]
[ ./pkg/xkernel/user/usudp_dir_ifc.h ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:26:16  dpj]
[ ./pkg/xkernel/user/usudp_protocol.cc ]
Converted to new C++ RPC package.
[92/05/10  01:28:22  dpj]
[ ./pkg/xkernel/util/Makefile ]
No further changes.
[92/06/29  23:08:16  dpj]

Fixed to compile "compose" as a straight UNIX program (not MACH3_VUS),
so that it will run on a 2.6 system.
[92/03/12  13:55:17  dpj]
[ ./server/config/Makefile ]
Converted to C++.
[92/06/24  17:36:07  dpj]
[ ./server/config/config_server.cc ]
First working version.
[92/06/24  17:39:37  dpj]
[ ./server/config/rc.us ]
No further changes.
[92/06/29  23:08:42  dpj]
[ ./server/config/sys_agency.cc ]
First working version.
[92/06/24  17:40:10  dpj]
[ ./server/config/sys_agency_ifc.h ]
Converted to C++.
[92/06/24  17:40:27  dpj]
[ ./server/name/Makefile ]
Removed libmachobj++.
[92/05/10  01:28:34  dpj]
[ ./server/name/name_init.cc ]
Converted to new C++ RPC package.
[92/05/10  01:28:49  dpj]
[ ./server/pipenet/Makefile ]
Removed libmachobj++.
[92/05/10  01:29:36  dpj]
[ ./server/pipenet/pipenet_byteio_ifc.h ]
Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:38:56  dpj]
[ ./server/pipenet/pipenet_cldir_recs.cc ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:26:27  dpj]

Converted to new C++ RPC package.
[92/05/10  01:29:47  dpj]
[ ./server/pipenet/pipenet_cldir_recs_ifc.h ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:26:40  dpj]
[ ./server/pipenet/pipenet_clts_base.cc ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:19:06  jms]
Converted to new C++ RPC package.
[92/05/10  01:29:57  dpj]
[ ./server/pipenet/pipenet_clts_base_ifc.h ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:19:41  jms]
Converted to new C++ RPC package.
[92/05/10  01:30:08  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:39:33  dpj]
[ ./server/pipenet/pipenet_clts_recs.cc ]
Converted to new C++ RPC package.
[92/05/10  01:30:19  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:39:52  dpj]
[ ./server/pipenet/pipenet_codir_bytes.cc ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:27:13  dpj]

Converted to new C++ RPC package.
[92/05/10  01:30:29  dpj]
[ ./server/pipenet/pipenet_codir_bytes_ifc.h ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:27:31  dpj]

Added dummy snddis_upcall() to avoid undefined virtual.
[92/04/17  16:40:53  dpj]
[ ./server/pipenet/pipenet_connector.cc ]
Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  01:30:44  dpj]

Fixed argument types for pipenet_terminate_connection.
[92/04/17  16:53:00  dpj]
[ ./server/pipenet/pipenet_connector_ifc.h ]
Fixed argument types for pipenet_terminate_connection().
Added dummy pipenet_snddis_upcall() to avoid undefined virtual.
[92/04/17  16:54:00  dpj]
[ ./server/pipenet/pipenet_cots_base.cc ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:23:14  jms]
Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  01:30:57  dpj]
[ ./server/pipenet/pipenet_cots_base_ifc.h ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:23:42  jms]
Added dummy routines to avoid undefined virtuals.
[92/04/17  16:54:36  dpj]
[ ./server/pipenet/pipenet_cots_recs.cc ]
Added DESTRUCTOR_GUARD.
[92/05/10  01:31:07  dpj]
[ ./server/pipenet/pipenet_dir_base.cc ]
tmp_cleanup_for_shutdown -> ns_tmp_cleanup_for_shutdown
[92/06/24  17:24:03  jms]
Converted to new C++ RPC package.
Added DESTRUCTOR_GUARD.
[92/05/10  01:31:19  dpj]
[ ./server/pipenet/pipenet_endpt_base_ifc.h ]
Fixed argument types for pipenet_terminate_connection().
[92/04/17  16:55:23  dpj]
[ ./server/pipenet/pipenet_init.cc ]
Converted to new C++ RPC package.
[92/05/10  01:31:32  dpj]
[ ./server/pipenet/pipenet_internal.cc ]
Added some include files.
[92/04/17  16:55:56  dpj]
[ ./server/pipenet/pipenet_internal.h ]
Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:56:12  dpj]
[ ./server/pipenet/pipenet_recio_ifc.h ]
Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:56:34  dpj]
[ ./server/pipenet/pipenet_root.cc ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:27:47  dpj]
[ ./server/pipenet/pipenet_root_ifc.h ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:28:03  dpj]
[ ./server/pipenet/pipenet_updir_bytes.cc ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:28:17  dpj]

Added DESTRUCTOR_GUARD.
[92/05/10  01:31:42  dpj]
[ ./server/pipenet/pipenet_updir_bytes_ifc.h ]
Added explicit definition of remote_class_name()
under GXXBUG_VIRTUAL1.
[92/06/29  17:28:28  dpj]
[ ./server/tm/Makefile ]
Removed libmachobj++, no longer needed with new C++ RPC package.
[92/07/05  19:00:16  dpj]

Use g++ libs/flags

tm_agency.o => tm_root.o
tm_job_group* => tm_task_group*
Add tm_task_timer.o
[92/06/24  17:27:29  jms]
[ ./server/tm/tm_main.cc ]
Converted for new C++ RPC package.
[92/07/05  19:00:35  dpj]

Don't register twice with nameserver.
[92/06/25  11:24:04  jms]

Translated from tm_main.c
[92/06/24  17:30:02  jms]
[ ./server/tm/tm_root.cc ]
Converted for new C++ RPC package.
[92/07/05  19:00:59  dpj]

G++ translation from tm_agency for the "root" object of the taskmaster.
Use new us_tm_root_ifc.h interface for the C++ taskmaster.
[92/06/24  18:02:33  jms]
[ ./server/tm/tm_root_ifc.h ]
Removed active_table.
Added compiler work-around for remote_class_name() (GXXBUG_VIRTUAL1).
[92/07/05  19:01:38  dpj]

Use new us_tm_root_ifc.h interfaces for the C++ taskmaster.
Translated from tm_agency.c.
[92/06/24  18:03:52  jms]
[ ./server/tm/tm_task.cc ]
Converted for new C++ RPC package.
[92/07/05  19:01:59  dpj]

Ensure that events are not sent to dead processes.
[92/06/25  11:22:30  jms]

Use new us_tm_{root,task,tgrp}_ifc.h interfaces for the C++ taskmaster.
Translated from tm_task.c
[92/06/24  18:05:16  jms]
[ ./server/tm/tm_task_group.cc ]
Cleaned-up uses of GXXBUG_VIRTUAL2.
[92/07/05  19:02:40  dpj]

Use new us_tm_tgrp_ifc.h interfaces for the C++ taskmaster.
Translated to G++.
Implement task groups as tmp_dirs in the tm/GROUPS directory.
[92/06/24  18:12:31  jms]
[ ./server/tm/tm_task_group_ifc.h ]
Cleaned-up uses of GXXBUG_VIRTUAL2.
[92/07/05  19:02:58  dpj]

Use new us_tm_tgrp_ifc.h interface for the C++ taskmaster.
Translate to G++
Implement as tmpdir's in tm/GROUPS which contain task objects
[92/06/24  18:14:15  jms]
[ ./server/tm/tm_task_ifc.h ]
Use new us_tm_task_ifc.h interface for the C++ taskmaster.
Translate to G++
Implement as dir entries tm/TASK/<tid> and in the tm/GROUPS/<gid>/<tid>
[92/06/24  18:17:23  jms]
[ ./server/tm/tm_task_timer.cc ]
Use new us_tm_task_ifc.h interface for the C++ taskmaster.
Translate to G++
[92/06/24  18:18:19  jms]
[ ./server/tty/Makefile ]
Removed old-style installation rules.
[92/06/24  17:40:52  dpj]

Removed libmachobj++.
[92/05/10  01:31:54  dpj]
[ ./server/tty/bsd_tty.c ]
Eliminated diag_format().
[92/05/10  01:32:11  dpj]
[ ./server/tty/emul_xxx.c ]
Eliminated diag_format().
[92/05/10  01:32:28  dpj]
[ ./server/tty/libc_xxx.c ]
Fixed some declarations for C++.
[92/05/10  01:33:11  dpj]
[ ./server/tty/mach_synch.c ]
Removed include of mach_object.h.
[92/05/10  01:33:27  dpj]
[ ./server/tty/tty_agency.cc ]
Remote class name = tty_bsd_proxy.
[92/06/24  17:41:32  dpj]

Converted to new C++ RPC package.
[92/05/10  01:33:40  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:56:50  dpj]
[ ./server/tty/tty_dir.cc ]
Added dummy forwarding for remote_class_name (GXXBUG_VIRTUAL1).
[92/06/24  17:42:37  dpj]
[ ./server/tty/tty_dir_ifc.h ]
Added dummy forwarding for remote_class_name() (GXXBUG_VIRTUAL1).
[92/06/24  17:43:02  dpj]
[ ./server/tty/tty_io_procs.c ]
Removed include of mach_object.h.
[92/05/10  01:33:58  dpj]

Added include of mach_object.h.
[92/04/17  16:57:15  dpj]
[ ./server/tty/tty_name_create.cc ]
Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:57:30  dpj]
[ ./server/tty/tty_server.cc ]
Converted to new C++ RPC package.
[92/05/10  01:34:12  dpj]

Removed undef of __cplusplus in extern "C" declarations.
[92/04/17  16:57:53  dpj]
[ ./server/tty/tty_signal.cc ]
Use new us_tm_{root,task,tgrp}_ifc.h interfaces for the C++ taskmaster.
Use new us_tm_{root,task,tgrp}_proxy_ifc.h interfaces for the C++ taskmaster.
[92/06/24  18:21:55  jms]
Eliminated diag_format().
Converted to new C++ RPC package.
[92/05/10  01:34:25  dpj]
[ ./server/ufs/Makefile ]
Converted to use libus++ instead of libus/libmachobj.
Added ufs_main.o.
[92/06/24  17:43:54  dpj]
[ ./server/ufs/include/base.h ]
private -> PRIVATE to avoid C++ problem.
[92/06/24  17:44:42  dpj]
[ ./server/ufs/sync.c ]
private -> PRIVATE to avoid C++ problem.

  03-Mar-1988  Douglas Orr (dorr) at Carnegie-Mellon University
[92/06/24  17:45:27  dpj]
[ ./server/ufs/ufs_alloc.c ]
Eliminated diag_format().
[92/06/24  17:46:14  dpj]
[ ./server/ufs/ufs_export.c ]
Added IO_APPEND.
[92/06/24  17:46:33  dpj]
[ ./server/ufs/ufs_main.cc ]
First working version.
[92/06/24  17:46:51  dpj]
[ ./server/ufs/ufs_xxx.c ]
Moved main() into separate file ufs_main.cc.
[92/06/24  17:47:17  dpj]
[ ./test/Makefile ]
Added machobj++.
[92/03/10  20:34:08  dpj]
[ ./test/machobj++.cc ]
First experimental version.
[92/03/12  13:55:44  dpj]
[ ./utils/Makefile ]
Added libux for fsadmin, needed for task_master test code.
[92/07/05  19:03:34  dpj]

Add proxy_default script
Enable install of scripts alone to be done first thing on bootstrap
[92/06/24  18:22:48  jms]
Removed libmachobj++.
[92/05/10  01:34:37  dpj]
[ ./utils/STARTUP.fsadmin ]
Mount the taskmaster as /tm
[92/06/24  18:23:23  jms]
[ ./utils/fsadmin.cc ]
Added tm_get_tgrp_id command.
[92/07/05  19:04:19  dpj]

Add some taskmaster test stuff
[92/06/24  18:23:47  jms]
Converted for new C++ RPC package.
[92/06/24  17:47:42  dpj]

Converted to new C++ RPC package.
[92/05/10  01:34:59  dpj]
[ ./utils/proxy_default.csh ]
Converted for new C++ RPC package.
[92/07/05  19:04:46  dpj]

First version.
[92/06/24  18:24:58  jms]
[ ./include/MachObject.h ]
Making defunct
[ ./include/MachLockObject.h ]
Making defunct
[ ./include/cat_methods.h ]
Making defunct
[ ./include/diag_methods.h ]
Making defunct
[ ./include/event_methods.h ]
Making defunct
[ ./include/fs_methods.h ]
Making defunct
[ ./include/io_methods.h ]
Making defunct
[ ./include/io_methods2.h ]
Making defunct
[ ./include/kio_methods.h ]
Making defunct
[ ./include/mach_object.h ]
Making defunct
[ ./include/mgr_methods.h ]
Making defunct
[ ./include/net_methods.h ]
Making defunct
[ ./include/net_methods2.h ]
Making defunct
[ ./include/nfs_methods.h ]
Making defunct
[ ./include/ns_methods.h ]
Making defunct
[ ./include/shcond_methods.h ]
Making defunct
[ ./include/sys_methods.h ]
Making defunct
[ ./include/tm_methods.h ]
Making defunct
[ ./include/tty_methods.h ]
Making defunct
[ ./include/us_task_ifc.h ]
Making defunct
[ ./include/uxprot_methods.h ]
Making defunct
[ ./lib/us++/active_object.cc ]
Making defunct
[ ./lib/us++/active_object_ifc.h ]
Making defunct
[ ./lib/us++/active_table.cc ]
Making defunct
[ ./lib/us++/active_table_ifc.h ]
Making defunct
[ ./lib/us++/agency_mgr.cc ]
Making defunct
[ ./lib/us++/aot.cc ]
Making defunct
[ ./lib/us++/external_obj.cc ]
Making defunct
[ ./lib/us++/external_obj_ifc.h ]
Making defunct
[ ./lib/us++/fd_dir.cc ]
Making defunct
[ ./lib/us++/fd_dir_ifc.h ]
Making defunct
[ ./lib/us++/fd_io.cc ]
Making defunct
[ ./lib/us++/fd_io_ifc.h ]
Making defunct
[ ./lib/us++/fs_agency.cc ]
Making defunct
[ ./lib/us++/fs_agency_ifc.h ]
Making defunct
[ ./lib/us++/fs_dir_ifc.h ]
Making defunct
[ ./lib/us++/fs_file_ifc.h ]
Making defunct
[ ./lib/us++/fs_fio_ifc.h ]
Making defunct
[ ./lib/us++/fs_symlink_ifc.h ]
Making defunct
[ ./lib/us++/fs_tsymlink_ifc.h ]
Making defunct
[ ./lib/us++/mf_user_proxy_ifc.h ]
Making defunct
[ ./lib/us++/table.cc ]
Making defunct
[ ./lib/us++/tm_jgrp_proxy.cc ]
Making defunct
[ ./lib/us++/tm_jgrp_proxy_ifc.h ]
Making defunct
[ ./lib/us++/us_task.cc ]
Making defunct
[ ./lib/us++/us_task_proxy.cc ]
Making defunct
[ ./lib/us++/us_task_proxy_ifc.h ]
Making defunct
[ ./lib/us++/us_tm.cc ]
Making defunct
[ ./local_include/act_internal.h ]
Making defunct
[ ./local_include/act_obj_internal.h ]
Making defunct
[ ./local_include/cat_ifc.h ]
Making defunct
[ ./local_include/fs_internal.h ]
Making defunct
[ ./local_include/io_internal.h ]
Making defunct
[ ./local_include/ns_internal.h ]
Making defunct
[ ./local_include/table_ifc.h ]
Making defunct
[ ./local_include/top_defs.h ]
Making defunct
[ ./local_include/top_ifc.h ]
Making defunct
[ ./server/config/config_server.c ]
Making defunct
[ ./server/config/sys_agency.c ]
Making defunct
[ ./server/tm/timer.c ]
Making defunct
[ ./server/tm/tm_agency.c ]
Making defunct
[ ./server/tm/tm_agency_ifc.h ]
Making defunct
[ ./server/tm/tm_internal.h ]
Making defunct
[ ./server/tm/tm_job_group.c ]
Making defunct
[ ./server/tm/tm_job_group_agent.c ]
Making defunct
[ ./server/tm/tm_job_group_agent_ifc.h ]
Making defunct
[ ./server/tm/tm_job_group_ifc.h ]
Making defunct
[ ./server/tm/tm_main.c ]
Making defunct
[ ./server/tm/tm_task.c ]
Making defunct
[ ./server/tm/tm_task_agent.c ]
Making defunct
[ ./server/tm/tm_task_agent_ifc.h ]
Making defunct
[ ./server/tm/tm_task_group.c ]
Making defunct
[ ./include/table_ifc.h ]
Making defunct
[ ./lib/us++/mf_user_proxy.cc ]
Making defunct
[ ./lib/us++/us_item.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_name.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_byteio.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_recio.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_sys.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_tm_root.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_tm_task.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_tm_tgrp.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_net_base.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_net_clts.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_net_cots.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_net_connector.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_net_name.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/us_event.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/tty_bsd_proxy.cc ]
Use numeric method ids for RPC instead of method names.
[ ./lib/us++/usint_mf.cc ]
Use numeric method ids for RPC instead of method names.
    
    
    
==========================================================================
   ***** US Version US48  (jms) *****
    
    
New features:
--- --------
This CMU Mach3.0 Multi-server release is primarily made up of fixes for
multi-processor machines with misc. other bug fixes and minor features.

The changes are:

  UFS MP fixes adapted from software from roy@osf.org

  Log files.  (File-end shared-seek-key emulation)

  Fast Links in the file server.

  Null Pager objects.

  Shared data timing equivelence code.

  Scripts for juggling/binding processors and processor sets.

  Logging/tracing debugging tool

[SEQUENT-386MP]	Works here now.


Bug fixes:
--- -----
    MP bugfixes.
    UFS server MP bugfixes from roy@osf.org
    G++ bug workarounds.
    Updated spinlocks
    Many others.

Organizational changes:
-------------- -------
    Defaults to start up with one UFS server/partion /dev/zd0h.

    Now builds in a CMU Mach3.0 build env.  (no more STUMP dependencies)

Special notes:
------- -----
    Although not part of this release, the "doc" directory in the
    Multi-server source tree has been populated by Dan Julin and I.
    There is a README file there to help you.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
48
[ ./server/ufs/cache.h ]
defuncted
[ ./server/ufs/data.h ]
defuncted
[ ./Makeconf ]
Add "COMMON_DEFINES"  for switches "global" to the multi-server build.
Add the commond switch SHARED_DATA_TIMING_EQUIVALENCE=1
[93/01/18  14:49:28  jms]
[ ./Makefile-common.m4 ]
Add logic for "COMMON_DEFINES" for the entire build process
[93/01/18  15:37:21  jms]
[ ./include/top_ifc.h ]
Add GXXBUG_DELETE3 compilation flag to turn on deletion of object memory from
usTop::dereference_proc instead of .../lib/c++/gnulib.c::_builtin_delete.
g++ bug workaround.
[93/01/18  15:41:23  jms]
[ ./include/us_tm_root_ifc.h ]
Add the "shared space address" as an out arg to task registration.  Space
used for sharing between TM and task for SHARED_DATA_TIMING_EQUIVALENCE.
[93/01/18  15:46:25  jms]
[ ./include/us_tm_task_ifc.h ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timimg of such sharing.
[93/01/18  15:49:47  jms]
[ ./lib/c++/gnulib3.c ]
Implement the GXXBUG_DELETE3 g++ buq workaround to do object memory freeing
in top::dealloc_proc instead of gnulib3::_buildin_delete_

Add some tracing/debugging stuff
[93/01/18  15:53:01  jms]
[ ./lib/emul/Makefile ]
Remove out of date "libcs.a" gyrations.  Just get it where everyone else does.
[93/01/18  15:55:15  jms]
[ ./lib/emul/emul_all.cc ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  15:56:44  jms]
[ ./lib/emul/emul_file.cc ]
Bugfix.  Cleanup a reference to a "link_obj"
[93/01/18  15:57:45  jms]
[ ./lib/emul/emul_proc.cc ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.

Misc. debugging code to make it easier to determine when a child dies durring
the forking process.
[93/01/18  15:59:31  jms]
[ ./lib/emul/emul_proc.h ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  15:59:58  jms]
[ ./lib/mach3/include/Makefile ]
Add files mach_exception.h exception_all.h for installation
[93/01/18  16:04:50  jms]
[ ./lib/mach3/mach3/I386/lock.s ]
Get the DBG corrections for the mach3_spin... code
[93/01/18  16:06:38  jms]
[ ./lib/mach3/mach3/err_server.sub ]
Fix task_master error strings.
[93/01/18  16:07:19  jms]
[ ./lib/mach3/mach3/exception_all.h ]
Grab from another world.
[93/01/18  16:10:22  jms]
[ ./lib/mach3/mach3/mach_error.c ]
Update to correct build env (stump->CMU)
[93/01/18  16:11:26  jms]
[ ./lib/mach3/mach3/mach_exception.c ]
Update to correct build env (stump->CMU)
[93/01/18  16:12:29  jms]
[ ./lib/mach3/mach3/mach_exception.h ]
Grab from another world.
[93/01/18  16:14:03  jms]
[ ./lib/mach3/us/hash.c ]
Stop leaking hash entries upon hash_remove
[93/01/18  16:17:54  jms]
[ ./lib/threads/i386/csw.s ]
Pickup DBG fixes from UX land.
[93/01/18  16:19:17  jms]
[ ./lib/threads/i386/cthread_inline.awk ]
Pickup DBG fixes from UX land.
[ ./lib/threads/i386/lock.s ]
Pickup DBG fixes from UX land.
[93/01/18  16:20:27  jms]
[ ./lib/threads/malloc.c ]
Add some debugging stuff
[93/01/18  16:22:31  jms]
[ ./lib/threads/mig_support.c ]
Fix reply_port_lock initialization for forking
[93/01/18  16:23:51  jms]
[ ./lib/us++/I386/cthread_inline.awk ]
Pickup DBG fixes from UX land.
[93/01/18  16:24:29  jms]
[ ./lib/us++/Makefile ]
Add CPP_FLAGS to proxy_default.
Add null_pager.o logging.o
[93/01/18  16:26:32  jms]
[ ./lib/us++/access_table.cc ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  16:26:58  jms]
[ ./lib/us++/logging.c ]
Fisrt multi-server revision
[93/01/18  16:27:50  jms]
[ ./lib/us++/logging.dict ]
Dictionary for multi-server logging facility.  First revision
[93/01/18  16:31:01  jms]
[ ./lib/us++/mf_mem.cc ]
Add MF_CLIENT_EOF_WRITE_AS_APPEND logic.  This logic is used to recognize
when we believe that we are writing at the end of a file and turn it
into an "append" operation instead of a write.  The primary purpose of which
is to make log files work without true shared seek keys.

do_write_through => is_mgr.  More correct description.

Show errors when doing "cleaning" instead of just returning.
[93/01/18  16:44:43  jms]
[ ./lib/us++/mf_mem_ifc.h ]
Add MF_CLIENT_EOF_WRITE_AS_APPEND logic.  This logic is used to recognize
when we believe that we are writing at the end of a file and turn it
into an "append" operation instead of a write.  The primary purpose of which
is to make log files work without true shared seek keys.
[93/01/18  16:45:07  jms]
[ ./lib/us++/null_pager.cc ]
First release.
[93/01/18  16:46:11  jms]
[ ./lib/us++/null_pager_ifc.h ]
First version.
[93/01/18  16:46:39  jms]
[ ./lib/us++/pager_base.cc ]
Fix logic for "destroying" memory objects.
[93/01/18  16:48:21  jms]
[ ./lib/us++/pager_base_ifc.h ]
Add "pager_may_cache" args.
Add count to io_page{in,out}
Add deallocate flag to io_pagein.  Should the user deallocate the mem?
[93/01/18  17:01:28  jms]
[ ./lib/us++/remote.cc ]
Much debugging code. All deactivated.
[93/01/18  17:02:56  jms]
[ ./lib/us++/rpcmgr.cc ]
Cleanup the mig reply port when something goes wrong.
Deactivated debugging code.
[93/01/18  17:04:26  jms]
[ ./lib/us++/rpcmgr_ifc.h ]
Deactivated debugging code.
[93/01/18  17:05:02  jms]
[ ./lib/us++/top.cc ]
Implement the GXXBUG_DELETE3 g++ buq workaround to do object memory freeing
in top::dealloc_proc instead of gnulib3::_buildin_delete_

Add some tracing/debugging stuff
[93/01/18  17:07:15  jms]
[ ./lib/us++/us_tm_root.cc ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  17:07:38  jms]
[ ./lib/us++/us_tm_task.cc ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  17:07:52  jms]
[ ./lib/us++/vn_dir.cc ]
Bzero a new fs_attr before filling it in ns_create.
[93/01/18  17:09:26  jms]
[ ./lib/us++/vn_mgr.cc ]
Increase the time between syncs.
[93/01/18  17:10:27  jms]
[ ./lib/us++/vn_mgr_ifc.h ]
AOT_NUM_BUCKETS 128 => 4096
[93/01/18  17:11:15  jms]
[ ./lib/us++/vn_pager.cc ]
Add "pager_may_cache" logic.
Add "io_pagein" dealloc logic.
[93/01/18  17:12:02  jms]
[ ./lib/us++/vn_pager_ifc.h ]
Add pager_may_cache and io_pagein deallocate logic.
[93/01/18  17:20:10  jms]
[ ./lib/ux/ftab.cc ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  17:20:30  jms]
[ ./lib/ux/ftab_ifc.h ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  17:20:51  jms]
[ ./lib/ux/uxsignal.cc ]
Add a thread abort right after the thread suspend.  Used to shrink window
of pagein vulnerability.  Assumes that thread_abort will not need to pagein
something that is currently being paged in.  Hope thread abort gets better
in later kernels.
[93/01/18  17:22:58  jms]
[ ./local_include/logging.h ]
First version (orig from netmsgsvr)
[93/01/18  17:23:37  jms]
[ ./pkg/malloc/lib/malloc.c ]
Takeout MACH3_UNIX stuff
[93/01/18  17:24:18  jms]
[ ./pkg/malloc/lib/trace.c ]
Update to new_ipc.
Disable tracing by default
[93/01/18  17:25:24  jms]
[ ./server/config/prefix.config ]
Take second ufs server out of default
[93/01/18  17:26:10  jms]
[ ./server/config/rc.us ]
Don't startup ufs2 by default
Used /dev/zd0h for ufs. (boris)
Fsck harder.
[93/01/19  12:46:32  jms]
[ ./server/pipenet/Makefile ]
Commented out "malloc" libs line
[93/01/18  17:31:49  jms]
[ ./server/tm/Makefile ]
Commented out "malloc" libs line
[93/01/18  17:35:40  jms]
[ ./server/tm/tm_root.cc ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.

Misc deactivated debugging code.
[93/01/18  17:37:02  jms]
[ ./server/tm/tm_root_ifc.h ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  17:37:40  jms]
[ ./server/tm/tm_task.cc ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  17:38:46  jms]
[ ./server/tm/tm_task_ifc.h ]
Add SHARED_DATA_TIMING_EQUIVALENCE code to setup a shared memory space between
the task_master and a task.  Used to emulate timing of such sharing.
[93/01/18  17:39:08  jms]
[ ./server/tm/tm_task_timer.cc ]
Timer bug fixes
[93/01/18  17:39:35  jms]
[ ./server/tty/include/time.h ]
Fetch from UX land
[93/01/18  17:40:13  jms]
[ ./server/ufs/Makefile ]
Add Fastlinks flag
Commented malloc trace libs
[93/01/18  17:41:43  jms]
[ ./server/ufs/cache.c ]
Updated with code from roy@osf with MP bug fixes
[93/01/18  17:43:13  jms]
[ ./server/ufs/data.c ]
Updated for MP bug fixes with code from roy@osf.org
[93/01/18  17:45:55  jms]
[ ./server/ufs/disk.c ]
Hooks to use bug fixes from roy@osf.org
[93/01/18  17:47:20  jms]
[ ./server/ufs/disk.h ]
Hooks for bug fixes from roy@osf.org
[93/01/18  17:47:46  jms]
[ ./server/ufs/include/inode.h ]
Fastlink stuff
[93/01/18  17:48:55  jms]
[ ./server/ufs/mach_directory.c ]
Fastlink stuff
[93/01/18  17:49:49  jms]
[ ./server/ufs/sys_inode.c ]
Hooks to use MP bug fixes from roy@osf.org
[93/01/18  17:52:35  jms]
[ ./server/ufs/ufs_alloc.c ]
Fastlink stuff
[93/01/18  17:53:03  jms]
[ ./server/ufs/ufs_bmap.c ]
Hooks to use MP fixes from roy@osf.org
[93/01/18  17:53:51  jms]
[ ./server/ufs/ufs_export.c ]
Fastlink stuff
[93/01/18  17:54:44  jms]
[ ./server/ufs/ufs_inode.c ]
Fastlink stuff
INOHSZ 2048=>4096 (fix problem with find)
Hooks to use MP fixes from roy@osf.org
[93/01/18  17:56:13  jms]
[ ./server/ufs/ufs_main.cc ]
Use multiple ufs service threads.  Take optional count on command line.
[93/01/18  17:57:46  jms]
[ ./server/ufs/ufs_xxx.c ]
ninode 300 => 5000
[93/01/18  17:58:16  jms]
[ ./utils/Makefile ]
Add us_restart and kemul scripts
Remove old libcs.a hack
[93/01/18  17:59:16  jms]
[ ./utils/STARTUP.fsadmin ]
Take ufs2 out of default config
[93/01/18  17:59:47  jms]
[ ./utils/findprocs.csh ]
First version
[93/01/18  18:05:22  jms]
[ ./utils/fsadmin.cc ]
newfsadmin => fsadmin. yet again.
[93/01/18  18:05:56  jms]
[ ./utils/kemul.csh ]
First working version
[93/01/18  18:07:13  jms]
[ ./utils/nprocset.csh ]
First version
[93/01/18  18:08:24  jms]
[ ./utils/procper.csh ]
First version
[93/01/18  18:09:42  jms]
[ ./utils/proxy_default.csh ]
Add "cflags" arg to be used when running "cc -E"
[93/01/18  18:11:01  jms]
[ ./utils/setboot ]
First checked in version
[93/01/18  18:13:54  jms]
[ ./utils/us_restart.csh ]
First version
[93/01/18  18:16:01  jms]
    
    
    
==========================================================================
   ***** US Version US49  (jms) *****
    
    
The MachUS CMU Mach multi-server system now has networking.

New features:
--- --------
  TCP/UDP/IP: net_server: We now have network communication.  
	The net_server runs and works.  It has a "OSI/XTI" based service
	interface with bsd4.3 sockets emulated on top in the client space.

	The server uses the feb93 xKernel v3.2 from the University of Arizona
	to supply the protocol engine.

	Runs as fast to much faster for FTP than MachUX.  Tested running
	tftp, inetd, ftp(d), telnet(d),...

Select: is now accurately/completely emulated.

All default proxies now built automatically.

Bug fixes:
--- -----
  PTTYS now work.

  Server directory permissions fixed.

  Many More.


Organizational changes:
-------------- -------
  Building against the "mk alpha" release because we are still using the
  pre-ode build tools.

  The proxies have been removed from .../lib/us++ and are now in
  .../lib/proxies

Special notes:
------- -----
  Additional minor releases for the near future:
	Upgrade to ODE tools
	Upgrade to latest gcc with c++

  Major MachUS "alpha" release, to be packaged/usable/available for
	OS researchers "early" this year.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
49
[ ./Makeconf ]
Build against "alpha" release.
[94/01/09  18:13:57  jms]
[ ./Makefile ]
Stop building the "pkg" area
[ ./doc/fs_fork_tcp_tour.mss ]
Initial Version
[94/01/09  18:18:26  jms]
[ ./include/clone_ifc.h ]
Moved from .../lib/us++/clone_ifc.h
[94/01/09  18:19:18  jms]
[ ./include/us_tty_ifc.h ]
Initial Version
[94/01/09  18:20:09  jms]
[ ./lib/Makefile ]
Add "proxies" lib
[94/01/09  18:22:35  jms]
[ ./lib/emul/Makefile ]
Use the "proxies" lib.
[94/01/09  18:24:09  jms]
[ ./lib/emul/emul_all.cc ]
Remove "ustty_proxy" special translation. Now default.
[94/01/09  18:47:26  jms]
[ ./lib/emul/emul_file.cc ]
Don't require NSR_EXECUTE for emul_chdir.
Fix double dereference on eror in emul_mkdir.
Add net objs to change protection.
[94/01/09  18:32:08  jms]
[ ./lib/emul/emul_init_prog/Makefile ]
Add use of "proxies"
[94/01/09  18:33:08  jms]
[ ./lib/emul/emul_io.cc ]
Implement "real" select emulation.
[94/01/09  18:37:32  jms]
[ ./lib/emul/emul_proc.cc ]
Misc bug fixes.
[94/01/09  18:39:17  jms]
[ ./lib/emul/emul_socket.cc ]
Add tcp support.
Misc bug fixes.
[94/01/09  18:41:47  jms]
[ ./lib/emul/emul_user_init.cc ]
Remove "ustty_proxy" special translation. Now default.
[94/01/09  18:49:40  jms]
[ ./lib/proxies/Makefile ]
Initial Version
[94/01/09  18:51:42  jms]
[ ./lib/proxies/tm_task_proxy.cc ]
Proxy moved from .../lib/us++
[94/01/09  18:53:32  jms]
[ ./lib/proxies/tm_task_proxy_ifc.h ]
Proxy moved from .../lib/us++
[94/01/09  18:54:00  jms]
[ ./lib/proxies/tm_tgrp_proxy.cc ]
Proxy moved from .../lib/us++
[94/01/09  18:54:34  jms]
[ ./lib/proxies/tm_tgrp_proxy_ifc.h ]
Proxy moved from .../lib/us++
[94/01/09  18:55:00  jms]
[ ./lib/proxies/us_item_proxy.cc ]
Proxy moved from .../lib/us++
[94/01/09  18:55:49  jms]
[ ./lib/proxies/us_item_proxy_ifc.h ]
Proxy moved from .../lib/us++
[94/01/09  18:56:17  jms]
[ ./lib/proxies/usint_mf_proxy.cc ]
Proxy moved from .../lib/us++
[94/01/09  18:56:50  jms]
[ ./lib/proxies/usint_mf_proxy_ifc.h ]
Proxy moved from .../lib/us++
[94/01/09  18:57:22  jms]
[ ./lib/threads/Makefile ]
Add cthread_fakes.c
[94/01/09  19:29:04  jms]
[ ./lib/threads/cthread_fakes.c ]
Initial Version
[94/01/09  19:31:29  jms]
[ ./lib/us++/Makefile ]
Move proxies out to .../lib/proxies
add us_tty.o
[94/01/09  19:33:01  jms]
[ ./lib/us++/agent.cc ]
If ns_register_agent fails at time of agent creation, assume that the
(bad) agent is about to be killed, and dissociate the agency to prevent
extra agency death slime
[94/01/09  19:36:07  jms]
[ ./lib/us++/bytestream.cc ]
Misc bug fixes in empty block manipulation.
[94/01/09  19:37:49  jms]
[ ./lib/us++/dir.cc ]
Take locking out of dir_entry_count.  Locking now required at a higher
level (when needed?)
[94/01/09  19:39:23  jms]
[ ./lib/us++/std_name.cc ]
Comment out "proxy" debug references/includes.
[94/01/09  19:40:37  jms]
[ ./lib/us++/tmp_prop.cc ]
Handle the possibility of a "Null" tmporary object in tmp_shutdown_internal
[94/01/09  19:42:25  jms]
[ ./lib/us++/us_tty.cc ]
Initial Version
[94/01/09  19:43:25  jms]
[ ./lib/ux/Makefile ]
Use .../lib/proxies.
Add uxselect.o
[94/01/09  19:44:31  jms]
[ ./lib/ux/ftab.cc ]
Add debugging code
[94/01/09  19:45:34  jms]
[ ./lib/ux/uxio.cc ]
Add "select" and "probe" logic for "real" select.
[94/01/09  19:47:08  jms]
[ ./lib/ux/uxio_ifc.h ]
Add "select" and "probe" logic for "real" select.
[94/01/09  19:47:53  jms]
[ ./lib/ux/uxio_socket.cc ]
Add "select" and "probe" logic for "real" select.
Add tcp logic.
Correct socket permissions.
General KP.
[94/01/09  19:50:25  jms]
[ ./lib/ux/uxio_socket_ifc.h ]
Add "select" and "probe" logic for "real" select.
[94/01/09  19:51:12  jms]
[ ./lib/ux/uxio_tty.cc ]
Use new usTTY_proxy definition.
[94/01/09  19:52:05  jms]
[ ./lib/ux/uxselect.cc ]
Initial Version
[94/01/09  19:52:36  jms]
[ ./lib/ux/uxselect_ifc.h ]
Initial Version
[94/01/09  19:53:05  jms]
[ ./lib/ux/uxstat.cc ]
Correct "owner" definition  so that the first entry in the ACL is the
owner, not the NSR_ADMIN one.  Corresponds to accepted practice, and
NSR_ADMIN need not be given to the owner.
[94/01/09  19:55:49  jms]
[ ./pkg/Makefile ]
Only build "malloc" package.  Others moved to the attic.
[ ./server/Makefile ]
Add "net" server
[94/01/09  19:56:50  jms]
[ ./server/config/Makefile ]
Use "proxies" includes and lib.
[ ./server/config/prefix.config ]
Put second ufs server back in default.
Take out "/dev => tty_server".  Should make a fake "/dev" and populate
it with links to /servers/tty/*
[ ./server/config/rc.us ]
Start net_server.
Put second ufs server back in
[ ./server/name/Makefile ]
Use the new "proxies" dir/lib
[94/01/09  20:00:00  jms]
[ ./server/name/name_init.cc ]
Fix server directory protections.
[94/01/09  20:01:39  jms]
[ ./server/net/Makefile ]
Initial Version
[94/01/09  20:02:29  jms]
[ ./server/net/README ]
Initial Version.
[ ./server/net/cmu_build/Makefile ]
Initial Version
[94/01/09  20:14:43  jms]
[ ./server/net/cmu_build/STD/Makefile ]
Initial Version
[94/01/09  20:15:07  jms]
[ ./server/net/cmu_build/etc/site.h ]
Initial Version
[94/01/09  20:17:11  jms]
[ ./server/net/cmu_build/lib/Makefile ]
Initial Version
[94/01/09  20:17:39  jms]
[ ./server/net/cmu_build/lib/mach3/Makefile ]
Initial Version
[94/01/09  20:17:55  jms]
[ ./server/net/cmu_build/lib/mach3/alloc.c ]
Initial Version
[94/01/09  20:20:04  jms]
[ ./server/net/cmu_build/lib/mach3/ether.c ]
At startup fake up a "ROM" entry for this IP=>etheraddr mapping
Use commandline ether device name (global value)
[94/01/09  20:43:26  jms]
[ ./server/net/cmu_build/lib/mach3/init.c ]
Fix race on the initial "CreateProcess" and "build_pgraph"

Create an empty in memory "ROM" file representation and setup to have
other modules (ether.c,...) add to it.  This "ROM" file game appears to be
the only way to define system configuration while starting up other
than statically reading the config.
[94/01/09  20:52:39  jms]
[ ./server/net/cmu_build/lib/mach3/insque.c ]
Had a long life.
[94/01/09  20:56:15  jms]
[ ./server/net/cmu_build/lib/pi/Makefile ]
Initial Version
[94/01/09  20:56:56  jms]
[ ./server/net/cmu_build/lib/pi/ptblData.c ]
Fix all of the numbers to be the "real" numbers. not the xkernel test numbers.
[94/01/09  21:04:26  jms]
[ ./server/net/cmu_build/lib/protocols/Makefile ]
Initial Version
[94/01/09  21:05:01  jms]
[ ./server/net/cmu_build/lib/protocols/tcp/tcp_input.c ]
After aquiring the "tcpst" insure that it is not "NULL" and not "closed"
before we use it.
[94/01/09  21:16:00  jms]
[ ./server/net/cmu_build/user/net_dir.cc ]
Fix net directories protections.
Upgrade to xkernel v3.2
Add TCP support
[94/01/10  11:25:13  jms]
[ ./server/net/cmu_build/user/net_dir_ifc.h ]
Update to xkernel v3.2
[94/01/10  11:25:57  jms]
[ ./server/net/cmu_build/user/net_init.cc ]
Minor changes
[94/01/10  11:28:25  jms]
[ ./server/net/cmu_build/user/ustcp_connector.cc ]
Initial Version
[94/01/10  11:33:11  jms]
[ ./server/net/cmu_build/user/ustcp_connector_ifc.h ]
Initial Version
[94/01/10  11:33:57  jms]
[ ./server/net/cmu_build/user/ustcp_cots.cc ]
Initial Version
[94/01/10  11:44:36  jms]
[ ./server/net/cmu_build/user/ustcp_cots_ifc.h ]
Initial Version
[94/01/10  11:45:23  jms]
[ ./server/net/cmu_build/user/ustcp_dir.cc ]
Initial Version
[94/01/10  11:46:18  jms]
[ ./server/net/cmu_build/user/ustcp_dir_ifc.h ]
Initial Version
[94/01/10  11:46:30  jms]
[ ./server/net/cmu_build/user/ustcp_protocol.cc ]
Initial Version
[94/01/10  11:46:49  jms]
[ ./server/net/cmu_build/user/usudp_clts.cc ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  11:51:17  jms]
[ ./server/net/cmu_build/user/usudp_clts_ifc.h ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  11:52:17  jms]
[ ./server/net/cmu_build/user/usudp_cots.cc ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
Initial Version
[94/01/10  11:53:28  jms]
[ ./server/net/cmu_build/user/usudp_cots_ifc.h ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  11:54:08  jms]
[ ./server/net/cmu_build/user/usudp_dir.cc ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  11:55:29  jms]
[ ./server/net/cmu_build/user/usudp_dir_ifc.h ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  11:55:50  jms]
[ ./server/net/cmu_build/user/usudp_protocol.cc ]
Massively revised/re-written for xkernel v3.2
[94/01/10  11:57:24  jms]
[ ./server/net/cmu_build/user/usx_dir.cc ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  12:47:39  jms]
[ ./server/net/cmu_build/user/usx_dir_ifc.h ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  12:48:17  jms]
[ ./server/net/cmu_build/user/usx_endpt_base.cc ]
Revised with the introduction of common "usx_" logic and xkernel v3.2
[94/01/10  12:50:12  jms]
[ ./server/net/cmu_build/user/usx_endpt_base_ifc.h ]
Revised with the introduction of common "usx_" logic and xkernel v3.2
[94/01/10  12:50:55  jms]
[ ./server/net/cmu_build/user/usx_internal.cc ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  12:52:41  jms]
[ ./server/net/cmu_build/user/usx_internal.h ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  12:55:13  jms]
[ ./server/net/cmu_build/user/usx_iobuf_mgr.cc ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  12:56:14  jms]
[ ./server/net/cmu_build/user/usx_iobuf_mgr_ifc.h ]
Massively revised/re-written with the introduction of common "usx_" logic
TCP and xkernel v3.2
[94/01/10  12:57:02  jms]
[ ./server/net/cmu_build/user/utils.c ]
Minor changes
[94/01/10  13:00:10  jms]
[ ./server/net/cmu_build/user/xk_main.cc ]
Create fake "ROM" entry for the ip_address and gateway address.
Upgrade for xkernel v3.2
Derived created from the file ".../mach3/init.c"
[94/01/10  13:11:45  jms]
[ ./server/net/cmu_build/util/Makefile ]
Initial Version
[94/01/10  13:12:30  jms]
[ ./server/net/cmu_build/util/compose/Makefile ]
Initial Version
[94/01/10  13:16:04  jms]
[ ./server/net/cmu_build/util/compose/compose_cmu.h ]
Initial Version
[94/01/10  13:20:39  jms]
[ ./server/net/cmu_build/util/ptbldump/Makefile ]
Initial Version
[94/01/10  13:22:24  jms]
[ ./server/net/cmu_build/xk_make_defs.inc ]
Initial Version
[94/01/10  13:23:53  jms]
[ ./server/pipenet/pipenet_cldir_recs.cc ]
Call pipenet_dir_base::remote_class_name not dir::remote_class_name in
pipenet_cldir_recs::remote_class_name
[94/01/10  13:25:46  jms]
[ ./server/pipenet/pipenet_codir_bytes.cc ]
Call pipenet_dir_base::remote_class_name not dir::remote_class_name in
pipenet_codir_recs::remote_class_name
[94/01/10  13:27:13  jms]
[ ./server/pipenet/pipenet_dir_base.cc ]
Call net_dir_base::remote_class_name in pipenet_dir_base::remote_class_name
[94/01/10  13:28:44  jms]
[ ./server/pipenet/pipenet_dir_base_ifc.h ]
Add "remote_class_name" method
[94/01/10  13:29:17  jms]
[ ./server/pipenet/pipenet_root.cc ]
Fix server directory protections.
[94/01/10  13:30:11  jms]
[ ./server/tm/Makefile ]
Use the new "proxies" dir/lib
[94/01/10  13:30:33  jms]
[ ./server/tm/tm_root.cc ]
Fix server directory protections.
[94/01/10  13:31:01  jms]
[ ./server/tm/tm_task.cc ]
Use first ACL entry as task owner.
[94/01/10  13:41:22  jms]
[ ./server/tty/Makefile ]
Use the new "proxies" dir/lib
[94/01/10  13:41:53  jms]
[ ./server/tty/mach_synch.c ]
More debugging stuff.
[94/01/10  13:42:27  jms]
[ ./server/tty/struct_xxx.c ]
In tty_get_thread_info: more correctly manipulate thread info and uarea stuff
to not depend blindly on what might have been in memory before.
[94/01/10  13:45:24  jms]
[ ./server/tty/tty_agency.cc ]
Use "usTTY_proxy" remote object name, not "tty_bsd_proxy".
Add tty "probe" and "select" support
[94/01/10  13:47:12  jms]
[ ./server/tty/tty_agency_ifc.h ]
Add probe/select support
[94/01/10  13:47:41  jms]
[ ./server/tty/tty_cmupty.c ]
Add debugging stuff.
[94/01/10  13:48:28  jms]
[ ./server/tty/tty_dir.cc ]
Add probe/select support
[94/01/10  13:48:51  jms]
[ ./server/tty/tty_io_procs.c ]
Add probe/select support.
Cope with interupts durring "open" and "close"
Misc bug fixes.
Much debugging stuff.
[94/01/10  13:51:29  jms]
[ ./server/tty/tty_select_proc.c ]
Initial Version
[94/01/10  13:52:03  jms]
[ ./server/tty/tty_server.cc ]
Fix server directory protections.
[94/01/10  13:52:35  jms]
[ ./test/Makefile ]
Build telnetd test version
[94/01/10  13:53:11  jms]
[ ./test/socktcp.c ]
Initial Version
[94/01/10  13:53:47  jms]
[ ./test/telnetd/Makefile ]
Initial Version
[94/01/10  13:55:16  jms]
[ ./test/telnetd/telnetd.c ]
Grabbed from "stump" release from xinu
[94/01/10  13:56:04  jms]
[ ./test/ttcp.c ]
Let's preserve a copy
[94/01/10  13:58:51  jms]
[ ./utils/Makefile ]
Install the "start_net" script
[94/01/10  13:59:31  jms]
[ ./utils/STARTUP.fsadmin ]
Put second ufs server back in
[ ./utils/fsadmin.cc ]
Noise
[94/01/10  13:59:58  jms]
[ ./utils/kemul.csh ]
Kill the net_server
[94/01/10  14:02:57  jms]
[ ./utils/proxy_default.csh ]
Modify heavily to be able to build all of the "default"
proxies.  Even those that inherit from more than to parent classes.
Part of the creation of the "lib/proxies" separation from "lib/us++"
[94/01/10  14:04:50  jms]
[ ./utils/start_net.csh ]
Derived from start_xkernel
[94/01/10  14:05:35  jms]
    
    
    
==========================================================================
   ***** US Version US50  (jms) *****
    
    
This is a revision release notice for the Mach-US CMU Mach3 multi-server

New features:
--- --------

Re-enable standalone execution

Use the gcc/g++ version release with "latest" mach3 user collection.
this is gcc 2.3.3 and is used to build mk83.

Bug fixes:
--- -----
We have been running externally supplied 4.3bsd acceptance tests, and there
are many mixed fixes associated with this effort.

Special notes:
------- -----
This version still uses the "alpha" revision build-tools and ld associated with
the user collection for mk78.  It is a step on the way to a formal release
of the Mach-US system.  The use of the latest/ode build tools and ld has
been done and will be merged next.

This revision will not be sup-able because of its intermediate nature.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
50
[ ./lib/us++/std_name.cc ]
Made changes to the prefix caching logic, so that the name resolution code
decides what it wants to cache before it starts the resolution.
[94/04/26  16:34:56  grm]
[ ./lib/us++/std_name_ifc.h ]
Made changes to the prefix caching logic, so that the name
resolution code decides what it wants to cache before it
starts the resolution.
[94/04/26  16:36:21  grm]
[ ./lib/c++/gnulib3.c ]
Allocate the first page in memory full of zeros.  Need so that "standalone"
has zeros as happens when things are started from mach-UX
[94/04/29  14:56:08  jms]
[ ./server/tm/tm_root.cc ]
Mild debugging additions
[94/04/29  14:57:52  jms]
[ ./server/tm/tm_task.cc ]
Debugging info changes
[94/04/29  15:01:57  jms]
[ ./lib/us++/std_name.cc ]
Needed implementations of methods for class std_name for 2.3.3 g++ compiler -modh
[ ./server/tm/tm_task_ifc.h ]
Change the order of multiple inheritance of to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[ ./server/tm/tm_task.cc ]
Change the order of multiple inheritance of to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.

Add hack in constructor to permit the calling of a method in a superclass
	this_hack = this; this_hack->method();
[ ./include/tm_types.h ]
New Error Message for too many tasks in session
[94/05/11  14:38:48  modh]
[ ./lib/emul/emul_error.cc ]
Add new error message to task master.
[94/05/11  14:40:53  modh]
[ ./lib/emul/emul_proc.cc ]
If error is TM_TOO_MANY_TASK then do not suspend process when forking.
[94/05/11  14:41:57  modh]
[ ./lib/mach3/mach3/err_server.sub ]
Add error string for new task error of too many tasks in session.
[94/05/11  14:42:33  modh]
[ ./server/tm/Makefile ]
Compile new file for keeping track of num of tasks in a session.
[94/05/11  14:43:17  modh]
[ ./server/tm/tm_session.cc ]
first checkin.
[94/05/11  15:05:03  modh]
[ ./server/tm/tm_session_ifc.h ]
first checkin.
[94/05/11  15:04:39  modh]
[ ./server/tm/tm_task.cc ]
Add task session calls.
[94/05/11  14:55:58  modh]
[ ./server/tm/tm_task_ifc.h ]
Add pointers to session object.
[94/05/11  14:56:26  modh]
[ ./utils/start_net.csh ]
Check in mach_servers/us/lib for NETWORKS.US and not just in /etc.
[94/05/11  14:57:33  modh]
[ ./lib/us++/std_name.cc ]
Fixed resolution code so that it followed transparent
symlinks correctly.
[94/05/04  13:56:26  grm]

Made changes to the prefix caching logic, so that the name
[94/04/26  16:34:56  grm]
[ ./lib/emul/emul_file.cc ]
Make change dir follow all links including tsymlinks. -grm
[ ./Makefile-common.m4 ]
Bizzare Mastication in order to use the "release" gcc/g++ 2.3.3 with the
"mach alpha release" build tools and loader.

This includes special changes for the new compiler:
	"-lc++ -lgcc" now on all configs
	"LIBCPlusPlus" set to nothing
[94/04/28  17:57:55  jms]
[ ./include/top_ifc.h ]
Change over to new 2.3.3 g++ compiler
[94/04/28  18:02:59  jms]
[ ./lib/c++/gnulib3.c ]
Change do_global_init =>do_global_ctors, do_global_cleanup=>do_global_dtors
[94/04/28  18:09:38  jms]
[ ./lib/emul/Makefile ]
Add -lgcc to places where "_LDFLAGS_" were used
Use "normal" loader instead of "/bin/ld"
[94/04/28  18:13:00  jms]
[ ./lib/emul/emul_init_prog/Makefile ]
# Revision 2.8.2.1  94/02/18  11:21:47  modh
# 	Needed to add -lc for 2.3.3 g++ compiler
[94/04/28  18:15:27  jms]
[ ./lib/mach3/unix/I386/alloca.s ]
Remove single quote from comment.  Different assembler cannot handle it
[94/04/28  18:18:40  jms]
[ ./lib/mach3/us/auth_types.defs ]
Pull extra ";"
[94/04/28  18:19:28  jms]
[ ./lib/threads/Makefile ]
Waste INLINE awk crud
Misc random KP
Needed -x assembler-with-cpp for 2.3.3 g++ compiler -modh
[94/04/28  18:21:28  jms]
[ ./lib/threads/cprocs.c ]
Make a things that are spin_locks, spin_locks instead of int
Make some stuff volatile
[94/04/28  18:23:19  jms]
[ ./lib/threads/cthread_internals.h ]
Make cproc state volatile
[94/04/28  18:23:52  jms]
[ ./lib/threads/cthreads.c ]
Make spin_locks spin_locks instead of int
Make stuff volatile as needed
[94/04/28  18:25:17  jms]
[ ./lib/threads/cthreads.h ]
Grab version from "release" version of the mach3 kernel and then
change names to fit this older version of the kernel.
[94/04/28  18:32:38  jms]
[ ./lib/threads/i386/cthreads.h ]
Grab copy from mach3 threads and correct for this versions names
[94/04/28  18:35:42  jms]
[ ./lib/threads/malloc.c ]
Make spin_locks spin_locks instead of int
Make stuff volatile as needed
[94/04/28  18:36:38  jms]
[ ./lib/threads/stack.c ]
Make spin_locks spin_locks instead of int
Make stuff volatile as needed
[94/04/28  18:36:58  jms]
[ ./lib/us++/Makefile ]
No more awk inline lock stuff
[94/04/28  18:39:18  jms]
[ ./lib/us++/agency.cc ]
Needed implementations of methods in agency class for 2.3.3 g++ compiler -modh
[94/04/28  18:40:20  jms]
[ ./lib/us++/agency_ifc.h ]
Needed to delcare virtual functions in agency class for 2.3.3 g++ compiler -modh
[94/04/28  18:40:59  jms]
[ ./lib/us++/agent.cc ]
Static variables bug in 2.3.3 g++ compiler require declaration of 
object name -modh
[94/04/28  18:41:50  jms]
[ ./lib/us++/bytestream_ifc.h ]
Change the order of multiple inheritance of to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/28  18:43:48  jms]

<[ ./lib/us++/fs_access.cc ]
fs_check_access_in_data: don't permit special ids to succeed on NSR_EXECUTE
unless some one is permitted to execute.
[94/04/28  18:46:47  jms]

[ ./lib/us++/mountpt_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/28  18:47:05  jms]
[ ./lib/us++/pager_base.cc ]
Cast args to cthread_fork
[94/04/28  18:48:44  jms]
[ ./lib/us++/recordstream_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/28  18:49:10  jms]
[ ./lib/us++/rpcmgr.cc ]
Much more debugging stuff
Some misc stuff for gcc2.3.3 code purity
cast args to cthread_fork
[94/04/28  18:51:37  jms]
[ ./lib/us++/std_name_ifc.h ]
Needed declarations of virtual functions in class std_name for 2.3.3 g++ -modh
[94/04/28  18:52:53  jms]
[ ./lib/us++/std_prot.cc ]
ns_check_access: Ensure for special ids (root) that NSR_EXECUTE permission is
not granted unles someone has execute permission
[94/04/28  18:54:11  jms]
[ ./lib/us++/stream_base.cc ]
Need implementations for virtual methods in class stream_base for 2.3.3 g++-modh
[94/04/28  18:54:42  jms]
[ ./lib/us++/stream_base_ifc.h ]
Needed to declare virtual functions in class stream_base for 2.3.3 g++ -modh
[94/04/28  18:55:10  jms]
[ ./lib/us++/symlink_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/28  18:55:25  jms]
[ ./lib/us++/vn_dir_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/28  18:55:40  jms]
[ ./lib/us++/vn_file_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/28  18:55:51  jms]
[ ./lib/us++/vn_mgr.cc ]
Cast args to cthread_fork
[94/04/28  18:56:08  jms]
[ ./lib/us++/vn_symlink_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/28  18:56:22  jms]
[ ./lib/ux/ftab.cc ]
Needed implementations of virtual methods in class ftab for 2.3.3 g++ -modh
[94/04/28  18:56:52  jms]
[ ./lib/ux/ftab_ifc.h ]
Needed implementations of virtual methods in class ftab for 2.3.3 g++ -modh
[94/04/28  18:57:19  jms]
[ ./lib/ux/uxident.cc ]
Need implementations of virtual methods in class uxident for 2.3.3 g++ -modh
[94/04/28  18:57:45  jms]
[ ./lib/ux/uxident_ifc.h ]
Need implementations of virtual methods in class uxident for 2.3.3 g++ -modh
[94/04/28  18:58:03  jms]
[ ./lib/ux/uxselect.cc ]
Fix state locking bug
[94/04/28  19:00:05  jms]
[ ./lib/ux/uxsignal.cc ]
Need dummy implementations of virtual methods in class 
	uxsignal for 2.3.3 g++ -modh
[94/04/28  19:00:52  jms]
[ ./lib/ux/uxsignal_ifc.h ]
Need dummy implementations of virtual methods in class 
	uxsignal for 2.3.3 g++ -modh
[94/04/28  19:01:05  jms]
[ ./lib/ux/uxstat.cc ]
Need dummy  implementations of virtual methods in class uxstat 
	for 2.3.3 g++ -modh
[94/04/28  19:01:57  jms]
[ ./lib/ux/uxstat_ifc.h ]
Need dummy  implementations of virtual methods in class uxstat 
	for 2.3.3 g++ -modh
[94/04/28  19:02:09  jms]
[ ./mach_include_sa/strings.h ]
Fix types of strlen for gcc2.3.3
[94/04/28  19:04:05  jms]
[ ./server/config/config_server.cc ]
Cast args to cthread_fork
[94/04/28  19:06:36  jms]
[ ./server/config/sys_agency_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/28  19:06:53  jms]
[ ./server/net/cmu_build/user/ustcp_connector.cc ]
Need dummy implementations of virtual methods in class ustcp_connector
	for 2.3.3 g++ -modh
[94/04/28  19:08:38  jms]
[ ./server/net/cmu_build/user/ustcp_connector_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.

Need dummy implementations of virtual methods in class ustcp_connector
	for 2.3.3 g++ -modh
[94/04/28  19:09:08  jms]
[ ./server/net/cmu_build/user/ustcp_cots.cc ]
Need dummy implementations of virtual methods in class ustcp_cots
	for 2.3.3 g++ -modh
[94/04/28  19:09:50  jms]
[ ./server/net/cmu_build/user/ustcp_cots_ifc.h ]
Need dummy implementations of virtual methods in class ustcp_cots
	for 2.3.3 g++ -modh
[94/04/28  19:10:01  jms]
[ ./server/net/cmu_build/user/ustcp_protocol.cc ]
Correct "opendone" forward decl return type
[94/04/29  11:47:53  jms]
[ ./server/net/cmu_build/user/usudp_clts.cc ]
Need dummy implementations of virtual methods in class usudb_clts
	for 2.3.3 g++ -modh
[94/04/29  13:26:21  jms]
[ ./server/net/cmu_build/user/usudp_clts_ifc.h ]
Need dummy implementations of virtual methods in class usudb_clts
	for 2.3.3 g++ -modh
[94/04/29  13:28:49  jms]
[ ./server/net/cmu_build/user/usudp_cots.cc ]
Need dummy implementations of virtual methods in class usudp_cots
	for 2.3.3 g++ -modh
[94/04/29  13:30:03  jms]
[ ./server/net/cmu_build/user/usudp_cots_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.

Need dummy implementations of virtual methods in class usudp_cots
	for 2.3.3 g++ -modh
[94/04/29  13:30:28  jms]
[ ./server/net/cmu_build/user/usudp_protocol.cc ]
Correct "opendone" forward decl return type
[94/04/29  13:35:54  jms]
[ ./server/net/cmu_build/util/compose/Makefile ]
Add "-lgcc"
[94/04/29  13:39:43  jms]
[ ./server/pipenet/pipenet_clts_base_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/29  13:40:07  jms]
[ ./server/pipenet/pipenet_connector_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/29  13:40:25  jms]
[ ./server/pipenet/pipenet_cots_base_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.

Need to declare dummy  virtual functions in pipenet_cots_base for 2.3.3 g++ -modh
[94/04/29  13:41:23  jms]
[ ./server/pipenet/pipenet_upipe_bytes_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/29  13:41:44  jms]
[ ./server/tm/tm_task_timer.cc ]
Static variables bug in 2.3.3 g++ requires declaration of 
static object name -modh

Cast args to cthread_fork
[94/04/29  13:46:09  jms]
[ ./server/tty/Makefile ]
Change games with LIBCPlusPlus
[94/04/29  13:47:12  jms]
[ ./server/tty/tty_agency_ifc.h ]
Change the order of multiple inheritance to implementation class followed
by abstract class.  This change was needed because the other order does not
work with gcc2.3.3.
[94/04/29  13:47:29  jms]
[ ./server/ufs/include/inode.h ]
Fix for compile error with nested structs in 2.3.3 g++ -modh
[94/04/29  13:48:20  jms]
[ ./server/ufs/sync.c ]
Change private to capital PRIVATE for 2.3.3 g++ -modh
[94/04/29  13:49:11  jms]
[ ./server/ufs/ufs_main.cc ]
Cast args to cthread_fork
[94/04/29  13:52:07  jms]
[ ./utils/fsadmin.cc ]
Add "-s" switch to be able to stop it to attach with a debugger
[94/04/29  14:03:02  jms]
[ ./lib/emul/emul_init.cc ]
To fix problem for loader_load_program_file for new 2.3.3 g++ compiler
[94/02/18  11:21:05  modh]
[ ./lib/threads/sync.c ]
Be sure to get the "cthreads.h" from this directory.
    
    
    
==========================================================================
   ***** US Version US51  (mrt) *****
    
    
New features:
--- --------
Added a us-setup script to set up a root partition for the]
multi-server that parallels the one the UX server is using.

Added some installation notes in doc/us_setup.ps

Bug fixes:
--- -----
You can no longer write in the read-only partitions.

Telnet and ftp work with machine names as well as IP addresses.

Organizational changes:
-------------- -------
The tree now builds with the standard ODE tools as well as the
standard gcc 2.3.3 compiler

defuncted some files that aren't used any longer

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
51
[ ./server/tty/i386_mach/devnum.h ]
Moved to i386
[ ./pkg/malloc/man/mallck.1 ]
renamed to mallck.man
[ ./Make.inc ]
Not needed with ODE tools
[ ./Makefile-common.m4 ]
Not needed with ODE tools
[ ./Makeopt-mach3.m4 ]
Not used with ODE tools
[ ./shadow_us.csh ]
not used anymore
[ ./lib/mach3/libmach3_sa/mach3/Makefile ]
no longer building libmach3_sa
[ ./lib/mach3/libmach3_sa/unix/Makefile ]
no longer building libmach3_sa
[ ./lib/mach3/libmach3_sa/mach_sa/Makefile ]
no longer building libmach3_sa
[ ./lib/mach3/libmach3_sa/test/Makefile ]
no longer building libmach3_sa
[ ./lib/mach3/libmach3_sa/Makefile ]
no longer building libmach3_sa
[ ./server/tty/include/i386_mach/machparam.h ]
moved to tty/i386/machparam.h
[ ./mach_include_sa/Makeconf ]
no longer needed
[ ./utils/rcs_co_dir.csh ]
old stuff
[ ./utils/rcs_co_file.csh ]
old stuff
[ ./utils/rcs_co_tree.csh ]
old stuff
[ ./utils/rcs_copy_link.csh ]
old stuff
[ ./utils/rcs_delete_if_in_rcs.csh ]
old stuff
[ ./utils/rcs_locked_dir.csh ]
old stuff
[ ./utils/rcs_locked_tree.csh ]
old stuff
[ ./utils/rcs_shadow_dir.csh ]
old stuff
[ ./utils/rcs_shadow_link.csh ]
old stuff
[ ./utils/rcs_shadow_tree.csh ]
old stuff
[ ./utils/neton.sh ]
old stuff
[ ./utils/umerge.csh ]
old stuff
[ ./utils/make_path.csh ]
old stuff
[ ./utils/skel.Makefile.lib ]
old stuff
[ ./utils/skel.Makefile.prog ]
old stuff
[ ./utils/setboot ]
old stuff
[ ./utils/Makefile ]
move to bin
[ ./utils/STARTUP.fsadmin ]
move to bin
[ ./utils/proxy_default.csh ]
move to bin
[ ./utils/start_net.csh ]
moved to bin
[ ./utils/kemul.csh ]
moved to bin
[ ./utils/fsadmin.cc ]
moved to bin
[ ./lib/emul/bsd_syscalls.cpp ]
dumped the call/CAT macro stuff.
[94/05/27            mrt]
[ ./lib/mach3/mach3/mach_error.c ]
Changed include of <servers/errorlib.h> to <errorlib.h>
[94/02/14            mrt]
[ ./lib/mach3/mach3/mach_exception.c ]
changed include of <exception.h> to <mach/exception.h>
[94/02/14            mrt]
[ ./lib/mach3/mach3/netname_defs.h ]
Copied newer version of file from user area
[94/04/20            mrt]
[ ./lib/mach3/us/auth.defs ]
Changed #include "" to <>
[94/04/20  14:15:53  mrt]
[ ./lib/mach3/us/auth_types.defs ]
Changed #include "" to <>
[94/04/20  14:15:58  mrt]
[ ./pkg/malloc/man/mallck.man ]
Renamed from mallck.1
[94/04/25  14:45:32  mrt]
[ ./server/config/prefix.config ]
Added comments.
[94/04/21            mrt]
[ ./server/config/rc.us ]
Added some comments, removed old history
[94/04/21            mrt]
[ ./server/tty/i386/devnum.h ]
Moved from i386_mach to i386 directory for odemake.
[94/03/02            mrt]
[ ./server/tty/i386/machparam.h ]
Moved from i396_mach

[ ./bin/fsadmin.cc ]
Moved from utils to bin.
[94/06/01            mrt]
[ ./bin/proxy_default.csh ]
Moved from utils.

[ ./bin/STARTUP.fsadmin.template.csh ]
Moved from utils/STARTUP.fsadmin.csh

[ ./bin/start_net.template.csh ]
Moved from utils to bin. Simplified to include host specific
address rather than using NETWORKS and GATEWAYS.
[94/06/01            mrt]
[ ./include/top_ifc.h ]
Add USSTATS stuff from DPJ.

Fix no debug version of the (de)reference stuff to correspond to fixes in the
debug version.
[94/05/25  13:11:50  jms]
[ ./lib/mach3/mach3/netname.defs ]
Copied here from the user sources since it is no longer released
to a release or export area.
[94/05/26            mrt]
[ ./lib/mach3/mach3/service.defs ]
Copied here from the user sources since it is no longer released
to a release or export area.
[94/05/26            mrt]
[ ./lib/emul/emul_user_init.cc ]
Changed default name server name from root_server to
pathname_server.
[94/06/02            mrt]
[ ./lib/c++/gnulib3.c ]
Add USSTATS stuff from DPJ.
[94/05/25  13:12:29  jms]
[ ./lib/us++/rpcmgr.cc ]
Add USSTATS stuff from DPJ.
[94/05/25  13:15:02  jms]
[ ./lib/us++/diag.cc ]
Add USSTATS stuff from DPJ.
[94/05/25  13:13:29  jms]
[ ./lib/us++/diag_ifc.h ]
Add USSTATS stuff from DPJ.
[94/05/25  13:14:23  jms]

Initial C++ revision.
[90/11/14  17:05:13  pjg]
[ ./lib/us++/top.cc ]
Add USSTATS stuff from DPJ.
[94/05/25  13:15:36  jms]
[ ./local_include/us_statistics.h ]
First checkin of statistics logging stuff from DPJ.
[94/05/25  13:20:31  jms]
[ ./mach_include_sa/mach/mach_types.h ]
Moved defintion of vm_address_t to std_types.h
[94/05/27            mrt]
[ ./mach_include_sa/mach/mig_errors.h ]
Copied new one from mk sources to go with the new mig.

[ ./mach_include_sa/mach/std_types.h ]
Copied new one from mk sources to go with new mig.

[ ./mach_include_sa/mach/mig_support.h ]
Change to compile with gcc -traditional.
[94/05/27            mrt]
[ ./server/name/name_init.cc ]
Changed default name from root_server to pathname_server.
[94/06/02            mrt]
[ ./server/ufs/ufs_export.c ]
Fix chown1 so that root can do anything.
[94/06/02  13:26:34  jms]
[ ./server/config/wait.h ]
Needed for the wait call in config server. Commented
out the include of resource.h and wait3 call.
[94/06/16            mrt]
[ ./server/config/config_server.cc ]
Added a wait call before exec the fsadmin program to make sure
all the servers have been started. Changed the default location
for prefix.config and rc.us to /mach_servers/us/etc.
[ ./server/config/rc.us ]
Renamed to *.template
[ ./server/config/prefix.config ]
Renamed to *.template
[ ./server/config/rc.us.template ]
Changed root_server to pathname_server.
Renamed to rc.us.template
[94/06/03            mrt]
[ ./server/config/prefix.config.template ]
Corrected spelling of supperroot and change root_server
to pathname_server. Renamed to prefix.config.template
[94/06/03            mrt]
[ ./lib/us++/interrupt.c ]
change intr_mach_msg to use mach_msg_trap and clearing the "interrupt" option
bits ourselves, instead of using mach_msg.
[94/06/29  13:05:45  jms]

Last checkin before name change to interrupt.c
Abort a thread before setting its state, not after.
[91/02/21  11:21:42  jms]
[ ./bin/kemul.csh ]
Moved from utils to bin.
[94/06/01            mrt]
[ ./bin/multi.csh ]
Created.
[94/06/27            mrt]
[ ./bin/us_setup.template.csh ]
Created.
[94/06/27            mrt]
[ ./lib/us++/fs_access.cc ]
Fixed code to support access to read only mounted devices.
[94/06/29  13:50:05  grm]
[ ./lib/us++/fs_access_ifc.h ]
Fixed code to support access to read only mounted devices.
[94/06/29  13:51:34  grm]
[ ./lib/us++/vn_dir.cc ]
Added the mount option to the new fs_access.
[94/06/29  13:53:00  grm]
[ ./lib/us++/vn_dir_ifc.h ]
Added mount option to the new fs_access.
[94/06/29  13:53:40  grm]
[ ./lib/ux/uxio.cc ]
Changed the code to support two i/o object types (byte and
record i/o.  This was to fix the i/o probe of a datagram 
socket (a record dev).
[94/06/29  13:56:57  grm]
[ ./lib/ux/uxio_ifc.h ]
Added the recordio_obj as a local var to the uxio class.  This
was to fix the i/o probe of the datagram socket (a record dev).
[94/06/29  13:55:43  grm]
[ ./server/ufs/ufs_main.cc ]
Added the mount option as a parameter to the new of vn_dir.
This allows read-only mounted devices to remain read-only!
[94/06/29  13:59:35  grm]
[ ./Makeconf ]
Redid for odemake. Removed history.
[93/11/10            mrt]
[ ./Makefile ]
Updated for odemake. Removed old history.
[94/01/10            mrt]
[ ./include/Makefile ]
Updated for odemake
[93/12/16            mrt]
[ ./lib/Makefile ]
Updated for odemake.
[94/02/02            mrt]
[ ./lib/c++/Makefile ]
Updated for Odemake
[94/04/20  13:49:47  mrt]
[ ./lib/emul/Makefile ]
Updated for odemake. Removed ancient history.
[94/02/24            mrt]
[ ./lib/emul/emul_init_prog/Makefile ]
Updated for odemake. Removed ancient history.
[94/02/24            mrt]
[ ./lib/emul/memory/Makefile ]
Updated for odemake. Removed ancient history.
[94/02/24            mrt]
[ ./lib/mach3/Makefile ]
Updated for odemake. Stopped building libmach3_sa.
[94/02/09            mrt]
[ ./lib/mach3/include/Makefile ]
Updated for odemake. Added all the .h and .defs files that
should be exported from the lib/mach3 directories
[94/03/04            mrt]
[ ./lib/mach3/libmach3_us/Makefile ]
Updated for odemake.
[94/02/09            mrt]
[ ./lib/mach3/libmach3_us/mach3/Makefile ]
Updated for odemake.
[94/02/16            mrt]
[ ./lib/mach3/libmach3_us/mach_sa/Makefile ]
Updated for odemake.
[94/02/16            mrt]
[ ./lib/mach3/libmach3_us/unix/Makefile ]
Updated for odemake.
[94/02/16            mrt]
[ ./lib/mach3/libmach3_us/us/Makefile ]
Updated for odemake.
[94/04/20  13:58:43  mrt]
[ ./lib/mach3/libmach3_vus/Makefile ]
Updated for odemake.
[94/02/09            mrt]
[ ./lib/mach3/libmach3_vus/mach3/Makefile ]
Updated for odemake
[94/02/09            mrt]
[ ./lib/mach3/libmach3_vus/mach_sa/Makefile ]
Updated for odemake.
[94/02/09            mrt]
[ ./lib/mach3/libmach3_vus/us/Makefile ]
Updated for odemake
[94/02/09            mrt]
[ ./lib/mach3/mach3/Makefile-include ]
Updated for odemake.  Removed mach_init.o, mach_msg_destroy.o
and mach_msg_server.o which were all coming from libmach_sa.a anyways
[94/04/20            mrt]
[ ./lib/mach3/mach_sa/Makefile-include ]
Updated for odemake. 
[94/02/09            mrt]
[ ./lib/mach3/unix/I386/Makefile-machdep ]
Updated for odemake. 
[94/02/09            mrt]
[ ./lib/mach3/unix/Makefile-include ]
Updated for odemake.
[94/02/09            mrt]
[ ./lib/mach3/us/Makefile ]
Created to export the .h and .defs

HISTORY
[94/02/09            mrt]
[ ./lib/mach3/us/Makefile-include ]
Updated for odemake. 
[94/02/15            mrt]
[ ./lib/proxies/Makefile ]
Updated for odemake
[94/01/12            mrt]
[ ./lib/threads/Makefile ]
Updated for odemake. Changed to build only threads version
of library. Removed old history
[94/02/04            mrt]
[ ./lib/us++/Makefile ]
Updated for odemake. Cleaned up some history
[94/01/12            mrt]
[ ./lib/ux/Makefile ]
Updated for odemake. Removed ancient history.
[94/02/24            mrt]
[ ./local_include/Makefile ]
updated for odemake
[93/12/16            mrt]
[ ./local_include/i386_mach/Makefile ]
Created for odemake
[93/12/16            mrt]
[ ./mach_include_sa/Makefile ]
Updated for odemake. Removed old history
[93/12/17            mrt]
[ ./mach_include_sa/device/Makefile ]
Updated for odemake. Removed old history
[93/12/17            mrt]
[ ./mach_include_sa/i386/Makefile ]
Updated for odemake. Removed old history
[93/12/17            mrt]
[ ./mach_include_sa/mach/Makefile ]
Created for odemake.
[93/12/17            mrt]
[ ./mach_include_sa/mach/i386/Makefile ]
Updated for odemake. Removed old history
[93/12/17            mrt]
[ ./mach_include_sa/mach_debug/Makefile ]
Updated for odemake. Removed old history
[93/12/17            mrt]
[ ./pkg/Makefile ]
Updated for odemake. Condensed History.
[94/04/25            mrt]
[ ./pkg/malloc/Makefile ]
Updated for odemake. Condensed History.
[94/03/06            mrt]
[ ./pkg/malloc/bin/Makefile ]
Updated for odemake. Condensed History.
[94/03/06            mrt]
[ ./pkg/malloc/lib/Makefile ]
Updated for odemake. Condensed History.
[94/03/06            mrt]
[ ./pkg/malloc/man/Makefile ]
Updated for odemake. Condensed History.
[94/03/06            mrt]
[ ./sa_include/Makefile ]
Created for odemake
[94/05/20  15:39:10  mrt]
[ ./server/Makefile ]
Updated for odemake. Removed history
[93/11/28            mrt]
[ ./server/as/Makefile ]
Updated for odemake. Condensed history.
[94/04/25            mrt]
[ ./server/config/Makefile ]
Updated for odemake.
[94/03/02            mrt]
[ ./server/diag/Makefile ]
Updated for odemake. Condensed history
[94/03/02            mrt]
[ ./server/name/Makefile ]
Updated for odemake. Condensed history
[93/11/28            mrt]
[ ./server/net/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/STD/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/lib/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/lib/mach3/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/lib/pi/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/lib/protocols/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/util/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/util/compose/Makefile ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/net/cmu_build/xk_make_defs.inc ]
Updated for odemake.
[94/03/01            mrt]
[ ./server/nfs/Makefile ]
Updated for Odemake
[93/11/28            mrt]
[ ./server/pipenet/Makefile ]
Updated for odemake. Condensed history
[94/03/03            mrt]
[ ./server/tm/Makefile ]
Updated for odemake. Condensed history
[93/11/28            mrt]
[ ./server/tm/test/Makefile ]
Created for odemake.
[93/11/28            mrt]
[ ./server/tty/Makefile ]
Updated for odemake. Removed history.
[93/11/28            mrt]
[ ./server/tty/i386/Makefile ]
Created for odemake.
[94/03/02            mrt]
[ ./server/tty/test/Makefile ]
Created for odemake.
[93/11/28            mrt]
[ ./server/ufs/Makefile ]
3-Mary-94  Mary Thompson (mrt) at Carnegie-Mellon University
Updated for odemake. Condensed history
[94/04/26  17:21:52  mrt]
[ ./unix_include/Makefile ]
Updated for OdeMake.
[93/12/10            mrt]
[ ./unix_include/i386_mach/Makefile ]
updated for odemake
[93/12/16            mrt]
[ ./unix_include/netinet/Makefile ]
updated for odemake
[93/12/16            mrt]
[ ./unix_include/sys/Makefile ]
updated for odemake
[93/12/16            mrt]
[ ./bin/Makefile ]
Moved from utils.

[ ./server/tty/VUS/Makefile ]
Copied from server/tty. Updated for odemake.
Set MACH_VUS as the configuration to build.
[94/06/29            mrt]
[ ./server/tty/US/Makefile ]
Copied from server/tty. Updated for odemake.
Set MACH_US as the configuration to build.
[94/06/29            mrt]
[ ./mk/Makefile ]
Created.
[94/06/30            mrt]
[ ./mk/osf.cmu_machus.mk ]
Created.
[94/06/30            mrt]
[ ./mk/osf.cmu_machus.passes.mk ]
Copied from osf.mach3.passes.mk. Same file different name.
[94/06/30            mrt]
[ ./Makefile ]
Added mk directory to EXPBIN_SUBDIRS.
[94/06/30            mrt]
[ ./Makefile ]
Added mk directory to EXPBIN_SUBDIRS and SUBDIRS
[94/06/30            mrt]
    
    
    
==========================================================================
   ***** US Version US52  (mrt) *****
    
    
New features:
--- --------
This is the first official, generally available release. It 
includes enough doucmentation to make it usuable by 
Mach-knowledgable folks.

Added a gdb binary to the release directory that works on
multi-servers.

Added a version of machid that works when running standalone

Bug fixes:
--- -----
Fixed a bug to allow killing of programs in a user-level
compute loop.

Fixed the bug that kept non-root processes from copying read-only
files.

Fixed the bug that caused file modification dates of new files
to be set to the current time at the sync time.
i.e. files that were created cp -p would have the original date
for about a minute and then get updated to the current time.


Organizational changes:
-------------- -------
Updated the copyrihts on all the files that were not derived from
BSD code to be the free Mach copyright

Defuncted some more sun3 and pmax files and directories


******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
52
[ ./server/config/wait.h ]
added definition of wait to config_server.cc
[ ./server/config/rc.us.template ]
Added a call to start the machid server.
[94/07/07            mrt]
[ ./lib/threads/ibmrt/FILES ]
no longer supported
[ ./lib/threads/ibmrt/csw.s ]
no longer supported
[ ./lib/threads/ibmrt/cthread_inline.awk ]
no longer supported
[ ./lib/threads/ibmrt/lock.s ]
no longer supported
[ ./lib/threads/ibmrt/thread.c ]
no longer supported
[ ./lib/threads/mmax/FILES ]
no longer supported
[ ./lib/threads/mmax/csw.s ]
no longer supported
[ ./lib/threads/mmax/cthread_inline.awk ]
no longer supported
[ ./lib/threads/mmax/lock.s ]
no longer supported
[ ./lib/threads/mmax/thread.c ]
no longer supported
[ ./lib/threads/sun3/FILES ]
no longer supported
[ ./lib/threads/sun3/call_asm.s ]
no longer supported
[ ./lib/threads/sun3/call_md.c ]
no longer supported
[ ./lib/threads/sun3/csw.s ]
no longer supported
[ ./lib/threads/sun3/cthread_inline.awk ]
no longer supported
[ ./lib/threads/sun3/lock.s ]
no longer supported
[ ./lib/threads/sun3/thread.c ]
no longer supported
[ ./lib/threads/vax/FILES ]
no longer supported
[ ./lib/threads/vax/csw.s ]
no longer supported
[ ./lib/threads/vax/cthread_inline.awk ]
no longer supported
[ ./lib/threads/vax/lock.s ]
no longer supported
[ ./lib/threads/vax/thread.c ]
no longer supported
[ ./lib/threads/pmax/csw.s ]
no longer supported
[ ./lib/threads/pmax/cthread_inline.awk ]
no longer supported
[ ./lib/threads/pmax/lock.s ]
no longer supported
[ ./lib/threads/pmax/thread.c ]
no longer supported
[ ./lib/threads/i386/cthread_inline.awk ]
not used
[ ./lib/threads/call.c ]
Not used.
[ ./lib/threads/ipc.c ]
Not used.
[ ./lib/threads/mach_traps.c ]
Not used.
[ ./lib/threads/msg.c ]
Not used.
[ ./lib/threads/mach_traps.sed ]
Not used.
[ ./lib/threads/msg.sed ]
Not used.
[ ./lib/threads/cthread_inline ]
Not used.
[ ./lib/threads/i386/csw.s ]
Not used.
[ ./include/us_byteio_ifc.h ]
Updated copyright, added comments
[ ./include/us_event_ifc.h ]
Updated copyright, added comments
[ ./include/us_item_ifc.h ]
Updated copyright, added comments
[ ./include/us_net_base_ifc.h ]
Updated copyright, added comments
[ ./include/us_net_clts_ifc.h ]
Updated copyright, added comments
[ ./include/us_net_connector_ifc.h ]
Updated copyright, added comments
[ ./include/us_net_cots_ifc.h ]
Updated copyright, added comments
[ ./include/us_net_name_ifc.h ]
Updated copyright, added comments
[ ./include/us_recio_ifc.h ]
Updated copyright, added comments
[ ./include/us_tty_ifc.h ]
Updated copyright, added comments
[ ./lib/emul/i386/Make.i386 ]
not used
[ ./lib/emul/i386/Make.at386 ]
not used
[ ./lib/emul/vax/Make.vax ]
not used
[ ./lib/emul/sun3/Make.sun3 ]
not used
[ ./lib/emul/ibmrt/Make.ibmrt ]
not used
[ ./lib/emul/ibmrt/crt0.ex ]
not used
[ ./lib/emul/memory/Makefile ]
not used
[ ./lib/emul/bsd_emul_umount ]
not used
[ ./lib/emul/gen_htg.awk ]
not used
[ ./lib/emul/syscall_table.h ]
Updtated copyright
[ ./lib/mach3/mach3/PMAX/lock.s ]
not supported
[ ./lib/mach3/mach3/PMAX/syscall.s ]
not supported
[ ./bin/machid/machid_debug_procs.c ]
copied here from the user area
[ ./bin/machid/machid_dpager_procs.c ]
copied here from the user area
[ ./bin/machid/machid_internal.h ]
copied here from the user area
[ ./bin/machid/machid_notify_procs.c ]
copied here from the user area
[ ./bin/machid/machid_procs.c ]
copied here from the user area
[ ./bin/machid/Makefile ]
copied here from the user area
[ ./bin/machid/machid.c ]
Removed call to service_waitfor for the nameserver since Poe
does not support that call.
[94/07/07            mrt]
[ ./server/nfs/Makefile ]
No longer supported
[ ./server/nfs/fs_sunrpc.c ]
No longer supported
[ ./server/nfs/fs_sunrpc_ifc.h ]
No longer supported
[ ./server/nfs/nfs_export.c ]
No longer supported
[ ./server/nfs/nfs_fs.c ]
No longer supported
[ ./server/nfs/nfs_fs_ifc.h ]
No longer supported
[ ./server/nfs/nfs_internal.h ]
No longer supported
[ ./server/nfs/nfs_main.c ]
No longer supported
[ ./server/nfs/nfs_obj.c ]
No longer supported
[ ./server/nfs/nfs_obj_ifc.h ]
No longer supported
[ ./server/nfs/nfs_root.c ]
No longer supported
[ ./server/nfs/nfs_root_ifc.h ]
No longer supported
[ ./server/pipenet/pipenet_byteio.cc ]
[ ./pkg/malloc/lib/SUN3/malloc_backtrace.h ]
no longer supported
[ ./lib/us++/vn_agency.cc ]
Fixed ns_set_times so that it won't reset the
protections to garbage.  (va_mode = -1).
[94/07/15  13:21:36  grm]
[ ./lib/us++/rpcmgr.cc ]
Added a MACH_RCV_TMEOUT to _outgoing_invoke so that
abort messages don't hang.
[94/07/08  21:58:31  grm]
[ ./lib/us++/method_info.cc ]
Fixed so that the interruptable flag is parsed correctly.
[94/07/08  21:56:09  grm]
[ ./lib/us++/us_event.cc ]
Changed the timeout value for event_post_with_timeout
from 300ms to 600ms.  Removed the intr field as well,
since it was never used before (see changes to
method_info.cc)
[94/07/08  22:00:00  grm]
[ ./server/net/cmu_build/util/Makefile ]
	Updated for odemake.
[94/07/19            mrt]
[ ./server/net/cmu_build/util/ptbldump/Makefile ]
not used
[ ./server/net/cmu_build/lib/pi/Makefile ]
Moved ptbl_static to local directory to remove
printf statment.
[ ./server/net/cmu_build/lib/pi/ptbl_static.c ]
Copied here from az_xkernel/gen/ptbl_static.c in order
to remove "procTblParse called" printf.
[94/07/19            mrt]
[ ./lib/emul/emul_init.cc ]
If the program to startup in is csh or sh, start it as
a "login shell".
[94/07/20            mrt]
[ ./lib/mach3/unix/Makefile-include2 ]
no longer used
[ ./lib/mach3/unix/PMAX/Makefile-machdep ]
no longer supported
[ ./lib/mach3/unix/PMAX/_setjmp.s ]
no longer supported
[ ./lib/mach3/unix/PMAX/abs.s ]
no longer supported
[ ./lib/mach3/unix/PMAX/alloca.c ]
no longer supported
[ ./lib/mach3/unix/PMAX/bcopy.c ]
no longer supported
[ ./lib/mach3/unix/PMAX/doprnt.c ]
no longer supported
[ ./lib/mach3/unix/PMAX/dtoa.s ]
no longer supported
[ ./lib/mach3/unix/PMAX/dwmultu.s ]
no longer supported
[ ./lib/mach3/unix/PMAX/fp_class.h ]
no longer supported
[ ./lib/mach3/unix/PMAX/fp_class.s ]
no longer supported
[ ./lib/mach3/unix/PMAX/jmpbuf.h ]
no longer supported
[ ./lib/mach3/unix/PMAX/print.h ]
no longer supported
[ ./lib/mach3/unix/PMAX/tenscale.s ]
no longer supported
[ ./lib/mach3/unix/PMAX/values.h ]
no longer supported
[ ./lib/mach3/unix/SUN3/Makefile-machdep ]
no longer supported
[ ./server/ufs/ufs_main.cc ]
Changed include of "sys/file.h" to "file.h" to get local
version instead of the one from unix_include/sys. Updated
copyright.
[94/07/21            mrt]
[ ./lib/us++/vn_dir.cc ]
Changed ns_create to allow for "unix-style" file creation with
protections more restrictive than the returning access mode of
the agency (ie: creat(foobar, O_RDWR, O_RDONLY)).
[94/07/22  16:47:54  grm]

Added the mount option to the new fs_access.
[94/06/29  13:53:00  grm]
[ ./bin/Makefile ]
Added init_env.template.csh
[94/07/25            mrt]
[ ./lib/us++/mf_mem.cc ]
Made changes to allow io_write and io_append to update the
last modified time on the mapping's agency.
[94/07/27  14:08:32  grm]
[ ./lib/us++/mf_mem_ifc.h ]
Added a field in the mf_mem object to hold a pointer
to the mapping's agency.
[94/07/27  14:09:49  grm]
[ ./lib/us++/mf_mgr.cc ]
Added code to the mf_mgr constructor to initialize
the mapping's agency.
[94/07/27  14:10:38  grm]
[ ./lib/us++/mf_mgr_ifc.h ]
Added a constructor for the mf_mgr that takes a
usItem * as a parameter to initialize the mapping's
agency pointer.
[94/07/27  14:11:36  grm]
[ ./lib/us++/vn_file.cc ]
Added code to the vn_file constructor to initialize the
mapping object with the vn_file's agency.
[94/07/27  14:13:15  grm]
[ ./server/ufs/ufs_export.c ]
Changed the fss_setattr routine so that a timeval with
a value of zero will cause the related inode time to be
update with the current time.
[94/07/27  14:15:37  grm]
[ ./server/ufs/ufs_inode.c ]
Ifdef'd out the code in irele that resets the atime and
mtime to the release time.
[94/07/27  14:16:42  grm]
[ ./server/ufs/ufs_subr.c ]
Ifdef'd out the code in syncip and update that resets
the inode atime and mtime to the delayed sync time.
[94/07/27  14:18:29  grm]
[ ./doc/us-install.mss ]
updated
[ ./doc/fs_fork_tcp_tour.mss ]
fixed spelling of comment
[ ./lib/us++/mf_mem.cc ]
Don't do previous time fix on user side
[ ./bsd.list ]
as of july 94
[ ./lib/us++/mf_mem.cc ]
	Don't do previous time fix on user side
[94/07/27            mrt]
    
    
    
==========================================================================
   ***** US Version US53  (jms) *****
    
    
New features:
--- --------
bin/us_ps:  Program added.  When as a Mach-US process, each proceess and its
	associated exec string is listed.

doc/us-install.ps: Document corrected after more offsite experiences with
	system installation.

doc/us_client_server.ps: TechReport: Examine requirements and
	implementation of remote invocation and binding maintainence for:
	transparent invocation, authentication, forking, object-lifetime,
	and interruption.  "Client-Server Interactions In Multi-Server
	Operating Systems: The Mach-US Approach"
	J. Mark Stevenson, Daniel P. Julin.

doc/us_analyze.ps: Draft Publication: Brief overview of Mach-US,
	motivation for system design choices, and an analysis of OS
	architecture features as demonstrated by the system.  "Mach-US: Unix On
	Generic OS Object Servers" J. Mark Stevenson, Daniel P. Julin.

doc/us_clues.ps, doc/us-install.ps: Updated.

Bug fixes:
--- -----
Yes.

Organizational changes:
-------------- -------
Friendly copies of GDB and FSCK added to the .../us/release/bin area.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
53
[ ./bin/Makefile ]
Add the "us_ps" program.  Prints out exec strings for process ids.
[94/10/26  14:25:08  jms]
[ ./bin/STARTUP.fsadmin.template.csh ]
Fix the comment character
[94/10/26  18:04:48  jms]
[ ./bin/fsadmin.cc ]
Set some return values to VOID
Add tm_task_id_to_task_info_cmd to get the exec info for a given task
Add tm_ps_cmd to get the exec info for all tasks
[94/10/26  14:28:05  jms]
[ ./bin/us_ps.cc ]
Program for doing a list of the exec strings of all processes in the system.
[94/10/26  14:31:34  jms]
[ ./include/tm_types.h ]
Add the tm_shared_info_struct for holdin info in mem shared between
the client and the task_master.
[94/10/26  14:35:26  jms]
[ ./include/us_tm_task_ifc.h ]
Add the tm_get_shared_info method for getting process info shared between
the client and the task_master, most notably the exec string.
[94/10/26  14:37:53  jms]
[ ./lib/emul/emul_all.cc ]
Add manipulation of the "shared_info" addr.
[94/10/26  14:39:01  jms]
[ ./lib/emul/emul_exec.cc ]
Copy the exec string into the "shared_info" space, shared between the
emulated processes and the task_master.
[94/10/26  14:41:14  jms]
[ ./lib/emul/emul_file.cc ]
Added support for CMU "@sys" (GRM)
[94/10/26  14:43:08  jms]
[ ./lib/emul/emul_proc.cc ]
Setup for the "shared_info" area shared with the task_master.
[94/10/26  14:44:31  jms]
[ ./lib/emul/emul_proc.h ]
Shared_info type change
[94/10/26  14:45:39  jms]
[ ./lib/us++/access_table.cc ]
Add tm_get_shared_info method.
[94/10/26  14:46:30  jms]
[ ./lib/us++/bytestream.cc ]
25-Oct-94  J. Mark Stevenson (jms)
Fixed queue size check.  This fixes the problem of
having a pipe gobble up all of the paging space with
zero filled pages.
[94/10/26  14:46:45  jms]
[ ./lib/us++/dir.cc ]
Bugfix to directory iterator
[94/10/26  14:48:01  jms]
[ ./lib/us++/us_tm_task.cc ]
Add tm_get_shared_info method
[94/10/26  14:49:01  jms]
[ ./server/tm/tm_root.cc ]
Add tm_dump_exec_strings method (not exported)
[94/10/26  14:50:29  jms]
[ ./server/tm/tm_root_ifc.h ]
Add tm_dump_exec_strings method (not exported)
[94/10/26  14:51:28  jms]
[ ./server/tm/tm_task.cc ]
Add "tm_get_shared_info method" (and support methods) to access process
info hsared between the taskmaster and the client process emulator.
[94/10/26  14:53:10  jms]
[ ./server/tm/tm_task_group.cc ]
Task reference bug fix.
[94/10/26  14:55:50  jms]
[ ./server/tm/tm_task_ifc.h ]
Add tm_get_shared_info method for accessing process info shared between the
client emulator and the task_master.
[94/10/26  14:58:45  jms]
